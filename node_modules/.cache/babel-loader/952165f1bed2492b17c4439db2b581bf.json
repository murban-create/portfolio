{"ast":null,"code":"import { globalThis } from \"../utils/server-safe-globals.js\";\nimport { MediaUIEvents, StreamTypes, TextTrackKinds, TextTrackModes } from \"../constants.js\";\nimport { getTextTracksList, parseTracks, updateTracksModeTo } from \"../utils/captions.js\";\nimport { getSubtitleTracks, toggleSubtitleTracks } from \"./util.js\";\nconst requestMap = {\n  /**\n   * @TODO Consider adding state to `StateMediator` for e.g. `mediaThumbnailCues` and use that for derived state here (CJP)\n   */\n  [MediaUIEvents.MEDIA_PREVIEW_REQUEST](stateMediator, stateOwners, _ref) {\n    let {\n      detail\n    } = _ref;\n    var _a, _b, _c;\n    const {\n      media\n    } = stateOwners;\n    const mediaPreviewTime = detail != null ? detail : void 0;\n    let mediaPreviewImage = void 0;\n    let mediaPreviewCoords = void 0;\n    if (media && mediaPreviewTime != null) {\n      const [track] = getTextTracksList(media, {\n        kind: TextTrackKinds.METADATA,\n        label: \"thumbnails\"\n      });\n      const cue = Array.prototype.find.call((_a = track == null ? void 0 : track.cues) != null ? _a : [], (c, i, cs) => {\n        if (i === 0) return c.endTime > mediaPreviewTime;\n        if (i === cs.length - 1) return c.startTime <= mediaPreviewTime;\n        return c.startTime <= mediaPreviewTime && c.endTime > mediaPreviewTime;\n      });\n      if (cue) {\n        const base = !/'^(?:[a-z]+:)?\\/\\//i.test(cue.text) ? (_b = media == null ? void 0 : media.querySelector('track[label=\"thumbnails\"]')) == null ? void 0 : _b.src : void 0;\n        const url = new URL(cue.text, base);\n        const previewCoordsStr = new URLSearchParams(url.hash).get(\"#xywh\");\n        mediaPreviewCoords = previewCoordsStr.split(\",\").map(numStr => +numStr);\n        mediaPreviewImage = url.href;\n      }\n    }\n    const mediaDuration = stateMediator.mediaDuration.get(stateOwners);\n    const mediaChaptersCues = stateMediator.mediaChaptersCues.get(stateOwners);\n    let mediaPreviewChapter = (_c = mediaChaptersCues.find((c, i, cs) => {\n      if (i === cs.length - 1 && mediaDuration === c.endTime) {\n        return c.startTime <= mediaPreviewTime && c.endTime >= mediaPreviewTime;\n      }\n      return c.startTime <= mediaPreviewTime && c.endTime > mediaPreviewTime;\n    })) == null ? void 0 : _c.text;\n    if (detail != null && mediaPreviewChapter == null) {\n      mediaPreviewChapter = \"\";\n    }\n    return {\n      mediaPreviewTime,\n      mediaPreviewImage,\n      mediaPreviewCoords,\n      mediaPreviewChapter\n    };\n  },\n  [MediaUIEvents.MEDIA_PAUSE_REQUEST](stateMediator, stateOwners) {\n    const key = \"mediaPaused\";\n    const value = true;\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_PLAY_REQUEST](stateMediator, stateOwners) {\n    var _a, _b, _c, _d;\n    const key = \"mediaPaused\";\n    const value = false;\n    const isLive = stateMediator.mediaStreamType.get(stateOwners) === StreamTypes.LIVE;\n    const canAutoSeekToLive = !((_a = stateOwners.options) == null ? void 0 : _a.noAutoSeekToLive);\n    const isDVR = stateMediator.mediaTargetLiveWindow.get(stateOwners) > 0;\n    if (isLive && canAutoSeekToLive && !isDVR) {\n      const seekableEnd = (_b = stateMediator.mediaSeekable.get(stateOwners)) == null ? void 0 : _b[1];\n      if (seekableEnd) {\n        const seekToLiveOffset = (_d = (_c = stateOwners.options) == null ? void 0 : _c.seekToLiveOffset) != null ? _d : 0;\n        const liveEdgeTime = seekableEnd - seekToLiveOffset;\n        stateMediator.mediaCurrentTime.set(liveEdgeTime, stateOwners);\n      }\n    }\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_PLAYBACK_RATE_REQUEST](stateMediator, stateOwners, _ref2) {\n    let {\n      detail\n    } = _ref2;\n    const key = \"mediaPlaybackRate\";\n    const value = detail;\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_MUTE_REQUEST](stateMediator, stateOwners) {\n    const key = \"mediaMuted\";\n    const value = true;\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_UNMUTE_REQUEST](stateMediator, stateOwners) {\n    const key = \"mediaMuted\";\n    const value = false;\n    if (!stateMediator.mediaVolume.get(stateOwners)) {\n      stateMediator.mediaVolume.set(0.25, stateOwners);\n    }\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_VOLUME_REQUEST](stateMediator, stateOwners, _ref3) {\n    let {\n      detail\n    } = _ref3;\n    const key = \"mediaVolume\";\n    const value = detail;\n    if (value && stateMediator.mediaMuted.get(stateOwners)) {\n      stateMediator.mediaMuted.set(false, stateOwners);\n    }\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_SEEK_REQUEST](stateMediator, stateOwners, _ref4) {\n    let {\n      detail\n    } = _ref4;\n    const key = \"mediaCurrentTime\";\n    const value = detail;\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_SEEK_TO_LIVE_REQUEST](stateMediator, stateOwners) {\n    var _a, _b, _c;\n    const key = \"mediaCurrentTime\";\n    const seekableEnd = (_a = stateMediator.mediaSeekable.get(stateOwners)) == null ? void 0 : _a[1];\n    if (Number.isNaN(Number(seekableEnd))) return;\n    const seekToLiveOffset = (_c = (_b = stateOwners.options) == null ? void 0 : _b.seekToLiveOffset) != null ? _c : 0;\n    const value = seekableEnd - seekToLiveOffset;\n    stateMediator[key].set(value, stateOwners);\n  },\n  // Text Tracks state change requests\n  [MediaUIEvents.MEDIA_SHOW_SUBTITLES_REQUEST](_stateMediator, stateOwners, _ref5) {\n    let {\n      detail\n    } = _ref5;\n    var _a;\n    const {\n      options\n    } = stateOwners;\n    const tracks = getSubtitleTracks(stateOwners);\n    const tracksToUpdate = parseTracks(detail);\n    const preferredLanguage = (_a = tracksToUpdate[0]) == null ? void 0 : _a.language;\n    if (preferredLanguage && !options.noSubtitlesLangPref) {\n      globalThis.localStorage.setItem(\"media-chrome-pref-subtitles-lang\", preferredLanguage);\n    }\n    updateTracksModeTo(TextTrackModes.SHOWING, tracks, tracksToUpdate);\n  },\n  [MediaUIEvents.MEDIA_DISABLE_SUBTITLES_REQUEST](_stateMediator, stateOwners, _ref6) {\n    let {\n      detail\n    } = _ref6;\n    const tracks = getSubtitleTracks(stateOwners);\n    const tracksToUpdate = detail != null ? detail : [];\n    updateTracksModeTo(TextTrackModes.DISABLED, tracks, tracksToUpdate);\n  },\n  [MediaUIEvents.MEDIA_TOGGLE_SUBTITLES_REQUEST](_stateMediator, stateOwners, _ref7) {\n    let {\n      detail\n    } = _ref7;\n    toggleSubtitleTracks(stateOwners, detail);\n  },\n  // Renditions/Tracks state change requests\n  [MediaUIEvents.MEDIA_RENDITION_REQUEST](stateMediator, stateOwners, _ref8) {\n    let {\n      detail\n    } = _ref8;\n    const key = \"mediaRenditionSelected\";\n    const value = detail;\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_AUDIO_TRACK_REQUEST](stateMediator, stateOwners, _ref9) {\n    let {\n      detail\n    } = _ref9;\n    const key = \"mediaAudioTrackEnabled\";\n    const value = detail;\n    stateMediator[key].set(value, stateOwners);\n  },\n  // State change requests dependent on root node\n  [MediaUIEvents.MEDIA_ENTER_PIP_REQUEST](stateMediator, stateOwners) {\n    const key = \"mediaIsPip\";\n    const value = true;\n    if (stateMediator.mediaIsFullscreen.get(stateOwners)) {\n      stateMediator.mediaIsFullscreen.set(false, stateOwners);\n    }\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_EXIT_PIP_REQUEST](stateMediator, stateOwners) {\n    const key = \"mediaIsPip\";\n    const value = false;\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_ENTER_FULLSCREEN_REQUEST](stateMediator, stateOwners) {\n    const key = \"mediaIsFullscreen\";\n    const value = true;\n    if (stateMediator.mediaIsPip.get(stateOwners)) {\n      stateMediator.mediaIsPip.set(false, stateOwners);\n    }\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_EXIT_FULLSCREEN_REQUEST](stateMediator, stateOwners) {\n    const key = \"mediaIsFullscreen\";\n    const value = false;\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_ENTER_CAST_REQUEST](stateMediator, stateOwners) {\n    const key = \"mediaIsCasting\";\n    const value = true;\n    if (stateMediator.mediaIsFullscreen.get(stateOwners)) {\n      stateMediator.mediaIsFullscreen.set(false, stateOwners);\n    }\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_EXIT_CAST_REQUEST](stateMediator, stateOwners) {\n    const key = \"mediaIsCasting\";\n    const value = false;\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_AIRPLAY_REQUEST](stateMediator, stateOwners) {\n    const key = \"mediaIsAirplaying\";\n    const value = true;\n    stateMediator[key].set(value, stateOwners);\n  }\n};\nexport { requestMap };","map":null,"metadata":{},"sourceType":"module"}