{"ast":null,"code":"var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\nvar _mediaController, _previouslyFocused, _invokerElement, _previousItems, _mutationObserver, _isPopover, _cssRule, _handleSlotChange, handleSlotChange_fn, _handleMenuItems, _updateLayoutStyle, updateLayoutStyle_fn, _handleInvoke, handleInvoke_fn, _handleOpen, handleOpen_fn, _handleClosed, handleClosed_fn, _handleBoundsResize, _handleMenuResize, _positionMenu, positionMenu_fn, _resizeMenu, resizeMenu_fn, _handleClick, handleClick_fn, _backButtonElement, backButtonElement_get, _handleToggle, handleToggle_fn, _checkSubmenuHasExpanded, checkSubmenuHasExpanded_fn, _handleFocusOut, handleFocusOut_fn, _handleKeyDown, handleKeyDown_fn, _getItem, getItem_fn, _getTabItem, getTabItem_fn, _setTabItem, setTabItem_fn, _selectItem, selectItem_fn;\nimport { MediaStateReceiverAttributes } from \"../constants.js\";\nimport { globalThis, document } from \"../utils/server-safe-globals.js\";\nimport { computePosition } from \"../utils/anchor-utils.js\";\nimport { observeResize, unobserveResize } from \"../utils/resize-observer.js\";\nimport { ToggleEvent, InvokeEvent } from \"../utils/events.js\";\nimport { getActiveElement, containsComposedNode, closestComposedNode, insertCSSRule, getMediaController, getAttributeMediaController, getDocumentOrShadowRoot, namedNodeMapToObject } from \"../utils/element-utils.js\";\nfunction createMenuItem(_ref) {\n  let {\n    type,\n    text,\n    value,\n    checked\n  } = _ref;\n  const item = document.createElement(\"media-chrome-menu-item\");\n  item.type = type != null ? type : \"\";\n  item.part.add(\"menu-item\");\n  if (type) item.part.add(type);\n  item.value = value;\n  item.checked = checked;\n  const label = document.createElement(\"span\");\n  label.textContent = text;\n  item.append(label);\n  return item;\n}\nfunction createIndicator(el, name) {\n  let customIndicator = el.querySelector(`:scope > [slot=\"${name}\"]`);\n  if ((customIndicator == null ? void 0 : customIndicator.nodeName) == \"SLOT\") customIndicator = customIndicator.assignedElements({\n    flatten: true\n  })[0];\n  if (customIndicator) {\n    customIndicator = customIndicator.cloneNode(true);\n    return customIndicator;\n  }\n  const fallbackIndicator = el.shadowRoot.querySelector(`[name=\"${name}\"] > svg`);\n  if (fallbackIndicator) {\n    return fallbackIndicator.cloneNode(true);\n  }\n  return \"\";\n}\nfunction getTemplateHTML(_attrs) {\n  return /*html*/`\n    <style>\n      :host {\n        font: var(--media-font,\n          var(--media-font-weight, normal)\n          var(--media-font-size, 14px) /\n          var(--media-text-content-height, var(--media-control-height, 24px))\n          var(--media-font-family, helvetica neue, segoe ui, roboto, arial, sans-serif));\n        color: var(--media-text-color, var(--media-primary-color, rgb(238 238 238)));\n        --_menu-bg: rgb(20 20 30 / .8);\n        background: var(--media-menu-background, var(--media-control-background, var(--media-secondary-color, var(--_menu-bg))));\n        border-radius: var(--media-menu-border-radius);\n        border: var(--media-menu-border, none);\n        display: var(--media-menu-display, inline-flex);\n        transition: var(--media-menu-transition-in,\n          visibility 0s,\n          opacity .2s ease-out,\n          transform .15s ease-out,\n          left .2s ease-in-out,\n          min-width .2s ease-in-out,\n          min-height .2s ease-in-out\n        ) !important;\n        ${/* ^^Prevent transition override by media-container */\n  \"\"}\n        visibility: var(--media-menu-visibility, visible);\n        opacity: var(--media-menu-opacity, 1);\n        max-height: var(--media-menu-max-height, var(--_menu-max-height, 300px));\n        transform: var(--media-menu-transform-in, translateY(0) scale(1));\n        flex-direction: column;\n        ${/* Prevent overflowing a flex container */\n  \"\"}\n        min-height: 0;\n        position: relative;\n        bottom: var(--_menu-bottom);\n        box-sizing: border-box;\n      } \n\n      @-moz-document url-prefix() {\n        :host{\n          --_menu-bg: rgb(20 20 30);\n        }\n      }\n\n      :host([hidden]) {\n        transition: var(--media-menu-transition-out,\n          visibility .15s ease-in,\n          opacity .15s ease-in,\n          transform .15s ease-in\n        ) !important;\n        visibility: var(--media-menu-hidden-visibility, hidden);\n        opacity: var(--media-menu-hidden-opacity, 0);\n        max-height: var(--media-menu-hidden-max-height,\n          var(--media-menu-max-height, var(--_menu-max-height, 300px)));\n        transform: var(--media-menu-transform-out, translateY(2px) scale(.99));\n        pointer-events: none;\n      }\n\n      :host([slot=\"submenu\"]) {\n        background: none;\n        width: 100%;\n        min-height: 100%;\n        position: absolute;\n        bottom: 0;\n        right: -100%;\n      }\n\n      #container {\n        display: flex;\n        flex-direction: column;\n        min-height: 0;\n        transition: transform .2s ease-out;\n        transform: translate(0, 0);\n      }\n\n      #container.has-expanded {\n        transition: transform .2s ease-in;\n        transform: translate(-100%, 0);\n      }\n\n      button {\n        background: none;\n        color: inherit;\n        border: none;\n        padding: 0;\n        font: inherit;\n        outline: inherit;\n        display: inline-flex;\n        align-items: center;\n      }\n\n      slot[name=\"header\"][hidden] {\n        display: none;\n      }\n\n      slot[name=\"header\"] > *,\n      slot[name=\"header\"]::slotted(*) {\n        padding: .4em .7em;\n        border-bottom: 1px solid rgb(255 255 255 / .25);\n        cursor: var(--media-cursor, default);\n      }\n\n      slot[name=\"header\"] > button[part~=\"back\"],\n      slot[name=\"header\"]::slotted(button[part~=\"back\"]) {\n        cursor: var(--media-cursor, pointer);\n      }\n\n      svg[part~=\"back\"] {\n        height: var(--media-menu-icon-height, var(--media-control-height, 24px));\n        fill: var(--media-icon-color, var(--media-primary-color, rgb(238 238 238)));\n        display: block;\n        margin-right: .5ch;\n      }\n\n      slot:not([name]) {\n        gap: var(--media-menu-gap);\n        flex-direction: var(--media-menu-flex-direction, column);\n        overflow: var(--media-menu-overflow, hidden auto);\n        display: flex;\n        min-height: 0;\n      }\n\n      :host([role=\"menu\"]) slot:not([name]) {\n        padding-block: .4em;\n      }\n\n      slot:not([name])::slotted([role=\"menu\"]) {\n        background: none;\n      }\n\n      media-chrome-menu-item > span {\n        margin-right: .5ch;\n        max-width: var(--media-menu-item-max-width);\n        text-overflow: ellipsis;\n        overflow: hidden;\n      }\n    </style>\n    <style id=\"layout-row\" media=\"width:0\">\n\n      slot[name=\"header\"] > *,\n      slot[name=\"header\"]::slotted(*) {\n        padding: .4em .5em;\n      }\n\n      slot:not([name]) {\n        gap: var(--media-menu-gap, .25em);\n        flex-direction: var(--media-menu-flex-direction, row);\n        padding-inline: .5em;\n      }\n\n      media-chrome-menu-item {\n        padding: .3em .5em;\n      }\n\n      media-chrome-menu-item[aria-checked=\"true\"] {\n        background: var(--media-menu-item-checked-background, rgb(255 255 255 / .2));\n      }\n\n      ${/* In row layout hide the checked indicator completely. */\n  \"\"}\n      media-chrome-menu-item::part(checked-indicator) {\n        display: var(--media-menu-item-checked-indicator-display, none);\n      }\n    </style>\n    <div id=\"container\">\n      <slot name=\"header\" hidden>\n        <button part=\"back button\" aria-label=\"Back to previous menu\">\n          <slot name=\"back-icon\">\n            <svg aria-hidden=\"true\" viewBox=\"0 0 20 24\" part=\"back indicator\">\n              <path d=\"m11.88 17.585.742-.669-4.2-4.665 4.2-4.666-.743-.669-4.803 5.335 4.803 5.334Z\"/>\n            </svg>\n          </slot>\n          <slot name=\"title\"></slot>\n        </button>\n      </slot>\n      <slot></slot>\n    </div>\n    <slot name=\"checked-indicator\" hidden></slot>\n  `;\n}\nconst Attributes = {\n  STYLE: \"style\",\n  HIDDEN: \"hidden\",\n  DISABLED: \"disabled\",\n  ANCHOR: \"anchor\"\n};\nclass MediaChromeMenu extends globalThis.HTMLElement {\n  constructor() {\n    super();\n    __privateAdd(this, _handleSlotChange);\n    /**\n     * Sets the layout style for the menu.\n     * It can be a row or column layout. e.g. playback-rate-menu\n     */\n    __privateAdd(this, _updateLayoutStyle);\n    __privateAdd(this, _handleInvoke);\n    __privateAdd(this, _handleOpen);\n    __privateAdd(this, _handleClosed);\n    /**\n     * Updates the popover menu position based on the anchor element.\n     * @param  {number} [menuWidth]\n     */\n    __privateAdd(this, _positionMenu);\n    /**\n     * Resize this menu to fit the submenu.\n     * @param  {boolean} animate\n     */\n    __privateAdd(this, _resizeMenu);\n    __privateAdd(this, _handleClick);\n    __privateAdd(this, _backButtonElement);\n    /**\n     * Handle the toggle event of submenus.\n     * Closes all other open submenus when opening a submenu.\n     * Resizes this menu to fit the submenu.\n     *\n     * @param  {ToggleEvent} event\n     */\n    __privateAdd(this, _handleToggle);\n    /**\n     * Check if any submenu is expanded and update the container class accordingly.\n     * When the CSS :has() selector is supported, this can be done with CSS only.\n     */\n    __privateAdd(this, _checkSubmenuHasExpanded);\n    __privateAdd(this, _handleFocusOut);\n    __privateAdd(this, _handleKeyDown);\n    __privateAdd(this, _getItem);\n    __privateAdd(this, _getTabItem);\n    __privateAdd(this, _setTabItem);\n    __privateAdd(this, _selectItem);\n    __privateAdd(this, _mediaController, null);\n    __privateAdd(this, _previouslyFocused, null);\n    __privateAdd(this, _invokerElement, null);\n    __privateAdd(this, _previousItems, /* @__PURE__ */new Set());\n    __privateAdd(this, _mutationObserver, void 0);\n    __privateAdd(this, _isPopover, false);\n    __privateAdd(this, _cssRule, null);\n    /**\n     * Fires an event when a menu item is added or removed.\n     * This is needed to update the description slot of an ancestor menu item.\n     */\n    __privateAdd(this, _handleMenuItems, () => {\n      const previousItems = __privateGet(this, _previousItems);\n      const currentItems = new Set(this.items);\n      for (const item of previousItems) {\n        if (!currentItems.has(item)) {\n          this.dispatchEvent(new CustomEvent(\"removemenuitem\", {\n            detail: item\n          }));\n        }\n      }\n      for (const item of currentItems) {\n        if (!previousItems.has(item)) {\n          this.dispatchEvent(new CustomEvent(\"addmenuitem\", {\n            detail: item\n          }));\n        }\n      }\n      __privateSet(this, _previousItems, currentItems);\n    });\n    __privateAdd(this, _handleBoundsResize, () => {\n      __privateMethod(this, _positionMenu, positionMenu_fn).call(this);\n      __privateMethod(this, _resizeMenu, resizeMenu_fn).call(this, false);\n    });\n    __privateAdd(this, _handleMenuResize, () => {\n      __privateMethod(this, _positionMenu, positionMenu_fn).call(this);\n    });\n    if (!this.shadowRoot) {\n      this.attachShadow(this.constructor.shadowRootOptions);\n      const attrs = namedNodeMapToObject(this.attributes);\n      this.shadowRoot.innerHTML = this.constructor.getTemplateHTML(attrs);\n    }\n    this.container = this.shadowRoot.querySelector(\"#container\");\n    this.defaultSlot = this.shadowRoot.querySelector(\"slot:not([name])\");\n    this.shadowRoot.addEventListener(\"slotchange\", this);\n    __privateSet(this, _mutationObserver, new MutationObserver(__privateGet(this, _handleMenuItems)));\n    __privateGet(this, _mutationObserver).observe(this.defaultSlot, {\n      childList: true\n    });\n  }\n  static get observedAttributes() {\n    return [Attributes.DISABLED, Attributes.HIDDEN, Attributes.STYLE, Attributes.ANCHOR, MediaStateReceiverAttributes.MEDIA_CONTROLLER];\n  }\n  static formatMenuItemText(text, _data) {\n    return text;\n  }\n  enable() {\n    this.addEventListener(\"click\", this);\n    this.addEventListener(\"focusout\", this);\n    this.addEventListener(\"keydown\", this);\n    this.addEventListener(\"invoke\", this);\n    this.addEventListener(\"toggle\", this);\n  }\n  disable() {\n    this.removeEventListener(\"click\", this);\n    this.removeEventListener(\"focusout\", this);\n    this.removeEventListener(\"keyup\", this);\n    this.removeEventListener(\"invoke\", this);\n    this.removeEventListener(\"toggle\", this);\n  }\n  handleEvent(event) {\n    switch (event.type) {\n      case \"slotchange\":\n        __privateMethod(this, _handleSlotChange, handleSlotChange_fn).call(this, event);\n        break;\n      case \"invoke\":\n        __privateMethod(this, _handleInvoke, handleInvoke_fn).call(this, event);\n        break;\n      case \"click\":\n        __privateMethod(this, _handleClick, handleClick_fn).call(this, event);\n        break;\n      case \"toggle\":\n        __privateMethod(this, _handleToggle, handleToggle_fn).call(this, event);\n        break;\n      case \"focusout\":\n        __privateMethod(this, _handleFocusOut, handleFocusOut_fn).call(this, event);\n        break;\n      case \"keydown\":\n        __privateMethod(this, _handleKeyDown, handleKeyDown_fn).call(this, event);\n        break;\n    }\n  }\n  connectedCallback() {\n    var _a, _b;\n    __privateSet(this, _cssRule, insertCSSRule(this.shadowRoot, \":host\"));\n    __privateMethod(this, _updateLayoutStyle, updateLayoutStyle_fn).call(this);\n    if (!this.hasAttribute(\"disabled\")) {\n      this.enable();\n    }\n    if (!this.role) {\n      this.role = \"menu\";\n    }\n    __privateSet(this, _mediaController, getAttributeMediaController(this));\n    (_b = (_a = __privateGet(this, _mediaController)) == null ? void 0 : _a.associateElement) == null ? void 0 : _b.call(_a, this);\n    if (!this.hidden) {\n      observeResize(getBoundsElement(this), __privateGet(this, _handleBoundsResize));\n      observeResize(this, __privateGet(this, _handleMenuResize));\n    }\n  }\n  disconnectedCallback() {\n    var _a, _b;\n    unobserveResize(getBoundsElement(this), __privateGet(this, _handleBoundsResize));\n    unobserveResize(this, __privateGet(this, _handleMenuResize));\n    this.disable();\n    (_b = (_a = __privateGet(this, _mediaController)) == null ? void 0 : _a.unassociateElement) == null ? void 0 : _b.call(_a, this);\n    __privateSet(this, _mediaController, null);\n  }\n  attributeChangedCallback(attrName, oldValue, newValue) {\n    var _a, _b, _c, _d;\n    if (attrName === Attributes.HIDDEN && newValue !== oldValue) {\n      if (!__privateGet(this, _isPopover)) __privateSet(this, _isPopover, true);\n      if (this.hidden) {\n        __privateMethod(this, _handleClosed, handleClosed_fn).call(this);\n      } else {\n        __privateMethod(this, _handleOpen, handleOpen_fn).call(this);\n      }\n      this.dispatchEvent(new ToggleEvent({\n        oldState: this.hidden ? \"open\" : \"closed\",\n        newState: this.hidden ? \"closed\" : \"open\",\n        bubbles: true\n      }));\n    } else if (attrName === MediaStateReceiverAttributes.MEDIA_CONTROLLER) {\n      if (oldValue) {\n        (_b = (_a = __privateGet(this, _mediaController)) == null ? void 0 : _a.unassociateElement) == null ? void 0 : _b.call(_a, this);\n        __privateSet(this, _mediaController, null);\n      }\n      if (newValue && this.isConnected) {\n        __privateSet(this, _mediaController, getAttributeMediaController(this));\n        (_d = (_c = __privateGet(this, _mediaController)) == null ? void 0 : _c.associateElement) == null ? void 0 : _d.call(_c, this);\n      }\n    } else if (attrName === Attributes.DISABLED && newValue !== oldValue) {\n      if (newValue == null) {\n        this.enable();\n      } else {\n        this.disable();\n      }\n    } else if (attrName === Attributes.STYLE && newValue !== oldValue) {\n      __privateMethod(this, _updateLayoutStyle, updateLayoutStyle_fn).call(this);\n    }\n  }\n  formatMenuItemText(text, data) {\n    return this.constructor.formatMenuItemText(text, data);\n  }\n  get anchor() {\n    return this.getAttribute(\"anchor\");\n  }\n  set anchor(value) {\n    this.setAttribute(\"anchor\", `${value}`);\n  }\n  /**\n   * Returns the anchor element when it is a floating menu.\n   */\n  get anchorElement() {\n    var _a;\n    if (this.anchor) {\n      return (_a = getDocumentOrShadowRoot(this)) == null ? void 0 : _a.querySelector(`#${this.anchor}`);\n    }\n    return null;\n  }\n  /**\n   * Returns the menu items.\n   */\n  get items() {\n    return this.defaultSlot.assignedElements({\n      flatten: true\n    }).filter(isMenuItem);\n  }\n  get radioGroupItems() {\n    return this.items.filter(item => item.role === \"menuitemradio\");\n  }\n  get checkedItems() {\n    return this.items.filter(item => item.checked);\n  }\n  get value() {\n    var _a, _b;\n    return (_b = (_a = this.checkedItems[0]) == null ? void 0 : _a.value) != null ? _b : \"\";\n  }\n  set value(newValue) {\n    const item = this.items.find(item2 => item2.value === newValue);\n    if (!item) return;\n    __privateMethod(this, _selectItem, selectItem_fn).call(this, item);\n  }\n  focus() {\n    __privateSet(this, _previouslyFocused, getActiveElement());\n    if (this.items.length) {\n      __privateMethod(this, _setTabItem, setTabItem_fn).call(this, this.items[0]);\n      this.items[0].focus();\n      return;\n    }\n    const focusable = this.querySelector('[autofocus], [tabindex]:not([tabindex=\"-1\"]), [role=\"menu\"]');\n    focusable == null ? void 0 : focusable.focus();\n  }\n  handleSelect(event) {\n    var _a;\n    const item = __privateMethod(this, _getItem, getItem_fn).call(this, event);\n    if (!item) return;\n    __privateMethod(this, _selectItem, selectItem_fn).call(this, item, item.type === \"checkbox\");\n    if (__privateGet(this, _invokerElement) && !this.hidden) {\n      (_a = __privateGet(this, _previouslyFocused)) == null ? void 0 : _a.focus();\n      this.hidden = true;\n    }\n  }\n  get keysUsed() {\n    return [\"Enter\", \"Escape\", \"Tab\", \" \", \"ArrowDown\", \"ArrowUp\", \"Home\", \"End\"];\n  }\n  handleMove(event) {\n    var _a, _b;\n    const {\n      key\n    } = event;\n    const items = this.items;\n    const currentItem = (_b = (_a = __privateMethod(this, _getItem, getItem_fn).call(this, event)) != null ? _a : __privateMethod(this, _getTabItem, getTabItem_fn).call(this)) != null ? _b : items[0];\n    const currentIndex = items.indexOf(currentItem);\n    let index = Math.max(0, currentIndex);\n    if (key === \"ArrowDown\") {\n      index++;\n    } else if (key === \"ArrowUp\") {\n      index--;\n    } else if (event.key === \"Home\") {\n      index = 0;\n    } else if (event.key === \"End\") {\n      index = items.length - 1;\n    }\n    if (index < 0) {\n      index = items.length - 1;\n    }\n    if (index > items.length - 1) {\n      index = 0;\n    }\n    __privateMethod(this, _setTabItem, setTabItem_fn).call(this, items[index]);\n    items[index].focus();\n  }\n}\n_mediaController = new WeakMap();\n_previouslyFocused = new WeakMap();\n_invokerElement = new WeakMap();\n_previousItems = new WeakMap();\n_mutationObserver = new WeakMap();\n_isPopover = new WeakMap();\n_cssRule = new WeakMap();\n_handleSlotChange = new WeakSet();\nhandleSlotChange_fn = function (event) {\n  const slot = event.target;\n  for (const node of slot.assignedNodes({\n    flatten: true\n  })) {\n    if (node.nodeType === 3 && node.textContent.trim() === \"\") {\n      node.remove();\n    }\n  }\n  if ([\"header\", \"title\"].includes(slot.name)) {\n    const header = this.shadowRoot.querySelector('slot[name=\"header\"]');\n    header.hidden = slot.assignedNodes().length === 0;\n  }\n  if (!slot.name) {\n    __privateGet(this, _handleMenuItems).call(this);\n  }\n};\n_handleMenuItems = new WeakMap();\n_updateLayoutStyle = new WeakSet();\nupdateLayoutStyle_fn = function () {\n  var _a;\n  const layoutRowStyle = this.shadowRoot.querySelector(\"#layout-row\");\n  const menuLayout = (_a = getComputedStyle(this).getPropertyValue(\"--media-menu-layout\")) == null ? void 0 : _a.trim();\n  layoutRowStyle.setAttribute(\"media\", menuLayout === \"row\" ? \"\" : \"width:0\");\n};\n_handleInvoke = new WeakSet();\nhandleInvoke_fn = function (event) {\n  __privateSet(this, _invokerElement, event.relatedTarget);\n  if (!containsComposedNode(this, event.relatedTarget)) {\n    this.hidden = !this.hidden;\n  }\n};\n_handleOpen = new WeakSet();\nhandleOpen_fn = function () {\n  var _a;\n  (_a = __privateGet(this, _invokerElement)) == null ? void 0 : _a.setAttribute(\"aria-expanded\", \"true\");\n  this.addEventListener(\"transitionend\", () => this.focus(), {\n    once: true\n  });\n  observeResize(getBoundsElement(this), __privateGet(this, _handleBoundsResize));\n  observeResize(this, __privateGet(this, _handleMenuResize));\n};\n_handleClosed = new WeakSet();\nhandleClosed_fn = function () {\n  var _a;\n  (_a = __privateGet(this, _invokerElement)) == null ? void 0 : _a.setAttribute(\"aria-expanded\", \"false\");\n  unobserveResize(getBoundsElement(this), __privateGet(this, _handleBoundsResize));\n  unobserveResize(this, __privateGet(this, _handleMenuResize));\n};\n_handleBoundsResize = new WeakMap();\n_handleMenuResize = new WeakMap();\n_positionMenu = new WeakSet();\npositionMenu_fn = function (menuWidth) {\n  if (this.hasAttribute(\"mediacontroller\") && !this.anchor) return;\n  if (this.hidden || !this.anchorElement) return;\n  const {\n    x,\n    y\n  } = computePosition({\n    anchor: this.anchorElement,\n    floating: this,\n    placement: \"top-start\"\n  });\n  menuWidth != null ? menuWidth : menuWidth = this.offsetWidth;\n  const bounds = getBoundsElement(this);\n  const boundsRect = bounds.getBoundingClientRect();\n  const right = boundsRect.width - x - menuWidth;\n  const bottom = boundsRect.height - y - this.offsetHeight;\n  const {\n    style\n  } = __privateGet(this, _cssRule);\n  style.setProperty(\"position\", \"absolute\");\n  style.setProperty(\"right\", `${Math.max(0, right)}px`);\n  style.setProperty(\"--_menu-bottom\", `${bottom}px`);\n  const computedStyle = getComputedStyle(this);\n  const isBottomCalc = style.getPropertyValue(\"--_menu-bottom\") === computedStyle.bottom;\n  const realBottom = isBottomCalc ? bottom : parseFloat(computedStyle.bottom);\n  const maxHeight = boundsRect.height - realBottom - parseFloat(computedStyle.marginBottom);\n  this.style.setProperty(\"--_menu-max-height\", `${maxHeight}px`);\n};\n_resizeMenu = new WeakSet();\nresizeMenu_fn = function (animate) {\n  const expandedMenuItem = this.querySelector('[role=\"menuitem\"][aria-haspopup][aria-expanded=\"true\"]');\n  const expandedSubmenu = expandedMenuItem == null ? void 0 : expandedMenuItem.querySelector('[role=\"menu\"]');\n  const {\n    style\n  } = __privateGet(this, _cssRule);\n  if (!animate) {\n    style.setProperty(\"--media-menu-transition-in\", \"none\");\n  }\n  if (expandedSubmenu) {\n    const height = expandedSubmenu.offsetHeight;\n    const width = Math.max(expandedSubmenu.offsetWidth, expandedMenuItem.offsetWidth);\n    this.style.setProperty(\"min-width\", `${width}px`);\n    this.style.setProperty(\"min-height\", `${height}px`);\n    __privateMethod(this, _positionMenu, positionMenu_fn).call(this, width);\n  } else {\n    this.style.removeProperty(\"min-width\");\n    this.style.removeProperty(\"min-height\");\n    __privateMethod(this, _positionMenu, positionMenu_fn).call(this);\n  }\n  style.removeProperty(\"--media-menu-transition-in\");\n};\n_handleClick = new WeakSet();\nhandleClick_fn = function (event) {\n  var _a;\n  event.stopPropagation();\n  if (event.composedPath().includes(__privateGet(this, _backButtonElement, backButtonElement_get))) {\n    (_a = __privateGet(this, _previouslyFocused)) == null ? void 0 : _a.focus();\n    this.hidden = true;\n    return;\n  }\n  const item = __privateMethod(this, _getItem, getItem_fn).call(this, event);\n  if (!item || item.hasAttribute(\"disabled\")) return;\n  __privateMethod(this, _setTabItem, setTabItem_fn).call(this, item);\n  this.handleSelect(event);\n};\n_backButtonElement = new WeakSet();\nbackButtonElement_get = function () {\n  var _a;\n  const headerSlot = this.shadowRoot.querySelector('slot[name=\"header\"]');\n  return (_a = headerSlot.assignedElements({\n    flatten: true\n  })) == null ? void 0 : _a.find(el => el.matches('button[part~=\"back\"]'));\n};\n_handleToggle = new WeakSet();\nhandleToggle_fn = function (event) {\n  if (event.target === this) return;\n  __privateMethod(this, _checkSubmenuHasExpanded, checkSubmenuHasExpanded_fn).call(this);\n  const menuItemsWithSubmenu = Array.from(this.querySelectorAll('[role=\"menuitem\"][aria-haspopup]'));\n  for (const item of menuItemsWithSubmenu) {\n    if (item.invokeTargetElement == event.target) continue;\n    if (event.newState == \"open\" && item.getAttribute(\"aria-expanded\") == \"true\" && !item.invokeTargetElement.hidden) {\n      item.invokeTargetElement.dispatchEvent(new InvokeEvent({\n        relatedTarget: item\n      }));\n    }\n  }\n  for (const item of menuItemsWithSubmenu) {\n    item.setAttribute(\"aria-expanded\", `${!item.submenuElement.hidden}`);\n  }\n  __privateMethod(this, _resizeMenu, resizeMenu_fn).call(this, true);\n};\n_checkSubmenuHasExpanded = new WeakSet();\ncheckSubmenuHasExpanded_fn = function () {\n  const selector = '[role=\"menuitem\"] > [role=\"menu\"]:not([hidden])';\n  const expandedMenuItem = this.querySelector(selector);\n  this.container.classList.toggle(\"has-expanded\", !!expandedMenuItem);\n};\n_handleFocusOut = new WeakSet();\nhandleFocusOut_fn = function (event) {\n  var _a;\n  if (!containsComposedNode(this, event.relatedTarget)) {\n    if (__privateGet(this, _isPopover)) {\n      (_a = __privateGet(this, _previouslyFocused)) == null ? void 0 : _a.focus();\n    }\n    if (__privateGet(this, _invokerElement) && __privateGet(this, _invokerElement) !== event.relatedTarget && !this.hidden) {\n      this.hidden = true;\n    }\n  }\n};\n_handleKeyDown = new WeakSet();\nhandleKeyDown_fn = function (event) {\n  var _a, _b, _c, _d, _e;\n  const {\n    key,\n    ctrlKey,\n    altKey,\n    metaKey\n  } = event;\n  if (ctrlKey || altKey || metaKey) {\n    return;\n  }\n  if (!this.keysUsed.includes(key)) {\n    return;\n  }\n  event.preventDefault();\n  event.stopPropagation();\n  if (key === \"Tab\") {\n    if (__privateGet(this, _isPopover)) {\n      this.hidden = true;\n      return;\n    }\n    if (event.shiftKey) {\n      (_b = (_a = this.previousElementSibling) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);\n    } else {\n      (_d = (_c = this.nextElementSibling) == null ? void 0 : _c.focus) == null ? void 0 : _d.call(_c);\n    }\n    this.blur();\n  } else if (key === \"Escape\") {\n    (_e = __privateGet(this, _previouslyFocused)) == null ? void 0 : _e.focus();\n    if (__privateGet(this, _isPopover)) {\n      this.hidden = true;\n    }\n  } else if (key === \"Enter\" || key === \" \") {\n    this.handleSelect(event);\n  } else {\n    this.handleMove(event);\n  }\n};\n_getItem = new WeakSet();\ngetItem_fn = function (event) {\n  return event.composedPath().find(el => {\n    return [\"menuitemradio\", \"menuitemcheckbox\"].includes(el.role);\n  });\n};\n_getTabItem = new WeakSet();\ngetTabItem_fn = function () {\n  return this.items.find(item => item.tabIndex === 0);\n};\n_setTabItem = new WeakSet();\nsetTabItem_fn = function (tabItem) {\n  for (const item of this.items) {\n    item.tabIndex = item === tabItem ? 0 : -1;\n  }\n};\n_selectItem = new WeakSet();\nselectItem_fn = function (item, toggle) {\n  const oldCheckedItems = [...this.checkedItems];\n  if (item.type === \"radio\") {\n    this.radioGroupItems.forEach(el => el.checked = false);\n  }\n  if (toggle) {\n    item.checked = !item.checked;\n  } else {\n    item.checked = true;\n  }\n  if (this.checkedItems.some((opt, i) => opt != oldCheckedItems[i])) {\n    this.dispatchEvent(new Event(\"change\", {\n      bubbles: true,\n      composed: true\n    }));\n  }\n};\nMediaChromeMenu.shadowRootOptions = {\n  mode: \"open\"\n};\nMediaChromeMenu.getTemplateHTML = getTemplateHTML;\nfunction isMenuItem(element) {\n  return [\"menuitem\", \"menuitemradio\", \"menuitemcheckbox\"].includes(element == null ? void 0 : element.role);\n}\nfunction getBoundsElement(host) {\n  var _a;\n  return (_a = host.getAttribute(\"bounds\") ? closestComposedNode(host, `#${host.getAttribute(\"bounds\")}`) : getMediaController(host) || host.parentElement) != null ? _a : host;\n}\nif (!globalThis.customElements.get(\"media-chrome-menu\")) {\n  globalThis.customElements.define(\"media-chrome-menu\", MediaChromeMenu);\n}\nvar media_chrome_menu_default = MediaChromeMenu;\nexport { Attributes, MediaChromeMenu, createIndicator, createMenuItem, media_chrome_menu_default as default };","map":null,"metadata":{},"sourceType":"module"}