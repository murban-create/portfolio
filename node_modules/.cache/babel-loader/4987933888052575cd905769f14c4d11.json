{"ast":null,"code":"import { MediaUIAttributes, TextTrackKinds } from \"../constants.js\";\nconst splitTextTracksStr = function () {\n  let textTracksStr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  return textTracksStr.split(/\\s+/);\n};\nconst parseTextTrackStr = function () {\n  let textTrackStr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  const [kind, language, encodedLabel] = textTrackStr.split(\":\");\n  const label = encodedLabel ? decodeURIComponent(encodedLabel) : void 0;\n  return {\n    kind: kind === \"cc\" ? TextTrackKinds.CAPTIONS : TextTrackKinds.SUBTITLES,\n    language,\n    label\n  };\n};\nconst parseTextTracksStr = function () {\n  let textTracksStr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  let textTrackLikeObj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return splitTextTracksStr(textTracksStr).map(textTrackStr => {\n    const textTrackObj = parseTextTrackStr(textTrackStr);\n    return {\n      ...textTrackLikeObj,\n      ...textTrackObj\n    };\n  });\n};\nconst parseTracks = trackOrTracks => {\n  if (!trackOrTracks) return [];\n  if (Array.isArray(trackOrTracks)) {\n    return trackOrTracks.map(trackObjOrStr => {\n      if (typeof trackObjOrStr === \"string\") {\n        return parseTextTrackStr(trackObjOrStr);\n      }\n      return trackObjOrStr;\n    });\n  }\n  if (typeof trackOrTracks === \"string\") {\n    return parseTextTracksStr(trackOrTracks);\n  }\n  return [trackOrTracks];\n};\nconst formatTextTrackObj = function () {\n  let {\n    kind,\n    label,\n    language\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    kind: \"subtitles\"\n  };\n  if (!label) return language;\n  return `${kind === \"captions\" ? \"cc\" : \"sb\"}:${language}:${encodeURIComponent(label)}`;\n};\nconst stringifyTextTrackList = function () {\n  let textTracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return Array.prototype.map.call(textTracks, formatTextTrackObj).join(\" \");\n};\nconst isMatchingPropOf = (key, value) => obj => obj[key] === value;\nconst textTrackObjAsPred = filterObj => {\n  const preds = Object.entries(filterObj).map(_ref => {\n    let [key, value] = _ref;\n    return isMatchingPropOf(key, value);\n  });\n  return textTrack => preds.every(pred => pred(textTrack));\n};\nconst updateTracksModeTo = function (mode) {\n  let tracks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let tracksToUpdate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  const preds = parseTracks(tracksToUpdate).map(textTrackObjAsPred);\n  const isTrackToUpdate = textTrack => {\n    return preds.some(pred => pred(textTrack));\n  };\n  Array.from(tracks).filter(isTrackToUpdate).forEach(textTrack => {\n    textTrack.mode = mode;\n  });\n};\nconst getTextTracksList = function (media) {\n  let filterPredOrObj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => true;\n  if (!(media == null ? void 0 : media.textTracks)) return [];\n  const filterPred = typeof filterPredOrObj === \"function\" ? filterPredOrObj : textTrackObjAsPred(filterPredOrObj);\n  return Array.from(media.textTracks).filter(filterPred);\n};\nconst areSubsOn = el => {\n  var _a;\n  const showingSubtitles = !!((_a = el.mediaSubtitlesShowing) == null ? void 0 : _a.length) || el.hasAttribute(MediaUIAttributes.MEDIA_SUBTITLES_SHOWING);\n  return showingSubtitles;\n};\nexport { areSubsOn, formatTextTrackObj, getTextTracksList, isMatchingPropOf, parseTextTrackStr, parseTextTracksStr, parseTracks, splitTextTracksStr, stringifyTextTrackList, textTrackObjAsPred, updateTracksModeTo };","map":null,"metadata":{},"sourceType":"module"}