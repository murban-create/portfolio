{"ast":null,"code":"import { globalThis, document } from \"./server-safe-globals.js\";\nimport { delay } from \"./utils.js\";\nimport { isFullscreenEnabled } from \"./fullscreen-api.js\";\nlet testMediaEl;\nconst getTestMediaEl = () => {\n  var _a, _b;\n  if (testMediaEl) return testMediaEl;\n  testMediaEl = (_b = (_a = document) == null ? void 0 : _a.createElement) == null ? void 0 : _b.call(_a, \"video\");\n  return testMediaEl;\n};\nconst hasVolumeSupportAsync = async function () {\n  let mediaEl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getTestMediaEl();\n  if (!mediaEl) return false;\n  const prevVolume = mediaEl.volume;\n  mediaEl.volume = prevVolume / 2 + 0.1;\n  const abortController = new AbortController();\n  const volumeSupported = await Promise.race([dispatchedVolumeChange(mediaEl, abortController.signal), volumeChanged(mediaEl, prevVolume)]);\n  abortController.abort();\n  return volumeSupported;\n};\nconst dispatchedVolumeChange = (mediaEl, signal) => {\n  return new Promise(resolve => {\n    mediaEl.addEventListener(\"volumechange\", () => resolve(true), {\n      signal\n    });\n  });\n};\nconst volumeChanged = async (mediaEl, prevVolume) => {\n  for (let i = 0; i < 10; i++) {\n    if (mediaEl.volume === prevVolume) return false;\n    await delay(10);\n  }\n  return mediaEl.volume !== prevVolume;\n};\nconst isSafari = /.*Version\\/.*Safari\\/.*/.test(globalThis.navigator.userAgent);\nconst hasPipSupport = function () {\n  let mediaEl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getTestMediaEl();\n  if (globalThis.matchMedia(\"(display-mode: standalone)\").matches && isSafari) return false;\n  return typeof (mediaEl == null ? void 0 : mediaEl.requestPictureInPicture) === \"function\";\n};\nconst hasFullscreenSupport = function () {\n  let mediaEl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getTestMediaEl();\n  return isFullscreenEnabled({\n    documentElement: document,\n    media: mediaEl\n  });\n};\nconst fullscreenSupported = hasFullscreenSupport();\nconst pipSupported = hasPipSupport();\nconst airplaySupported = !!globalThis.WebKitPlaybackTargetAvailabilityEvent;\nconst castSupported = !!globalThis.chrome;\nexport { airplaySupported, castSupported, fullscreenSupported, getTestMediaEl, hasFullscreenSupport, hasPipSupport, hasVolumeSupportAsync, pipSupported };","map":null,"metadata":{},"sourceType":"module"}