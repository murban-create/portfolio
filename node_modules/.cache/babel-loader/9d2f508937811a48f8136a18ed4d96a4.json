{"ast":null,"code":"import React, { lazy, Suspense, useEffect, useState } from \"react\";\nimport { defaultProps } from \"./props.js\";\nimport Player from \"./Player.js\";\nconst Preview = lazy(() => import(/* webpackChunkName: 'reactPlayerPreview' */\n\"./Preview.js\"));\nconst customPlayers = [];\nconst createReactPlayer = (players, playerFallback) => {\n  const getActivePlayer = src => {\n    for (const player of [...customPlayers, ...players]) {\n      if (src && player.canPlay(src)) {\n        return player;\n      }\n    }\n    if (playerFallback) {\n      return playerFallback;\n    }\n    return null;\n  };\n  const ReactPlayer = React.forwardRef((_props, ref) => {\n    const props = {\n      ...defaultProps,\n      ..._props\n    };\n    const {\n      src,\n      slot,\n      className,\n      style,\n      width,\n      height,\n      fallback,\n      wrapper\n    } = props;\n    const [showPreview, setShowPreview] = useState(!!props.light);\n    useEffect(() => {\n      if (props.light) {\n        setShowPreview(true);\n      } else {\n        setShowPreview(false);\n      }\n    }, [props.light]);\n    const handleClickPreview = e => {\n      var _a;\n      setShowPreview(false);\n      (_a = props.onClickPreview) == null ? void 0 : _a.call(props, e);\n    };\n    const renderPreview = src2 => {\n      if (!src2) return null;\n      const {\n        light,\n        playIcon,\n        previewTabIndex,\n        oEmbedUrl,\n        previewAriaLabel\n      } = props;\n      return /* @__PURE__ */React.createElement(Preview, {\n        src: src2,\n        light,\n        playIcon,\n        previewTabIndex,\n        previewAriaLabel,\n        oEmbedUrl,\n        onClickPreview: handleClickPreview\n      });\n    };\n    const renderActivePlayer = src2 => {\n      var _a, _b;\n      const player = getActivePlayer(src2);\n      if (!player) return null;\n      const {\n        style: style2,\n        width: width2,\n        height: height2,\n        wrapper: wrapper2\n      } = props;\n      const config = (_a = props.config) == null ? void 0 : _a[player.key];\n      return /* @__PURE__ */React.createElement(Player, {\n        ...props,\n        ref,\n        activePlayer: (_b = player.player) != null ? _b : player,\n        slot: wrapper2 ? void 0 : slot,\n        className: wrapper2 ? void 0 : className,\n        style: wrapper2 ? {\n          display: \"block\",\n          width: \"100%\",\n          height: \"100%\"\n        } : {\n          display: \"block\",\n          width: width2,\n          height: height2,\n          ...style2\n        },\n        config\n      });\n    };\n    const Wrapper = wrapper == null ? ForwardChildren : wrapper;\n    const UniversalSuspense = fallback === false ? ForwardChildren : Suspense;\n    return /* @__PURE__ */React.createElement(Wrapper, {\n      slot,\n      className,\n      style: {\n        width,\n        height,\n        ...style\n      }\n    }, /* @__PURE__ */React.createElement(UniversalSuspense, {\n      fallback\n    }, showPreview ? renderPreview(src) : renderActivePlayer(src)));\n  });\n  ReactPlayer.displayName = \"ReactPlayer\";\n  ReactPlayer.addCustomPlayer = player => {\n    customPlayers.push(player);\n  };\n  ReactPlayer.removeCustomPlayers = () => {\n    customPlayers.length = 0;\n  };\n  ReactPlayer.canPlay = src => {\n    if (src) {\n      for (const Player2 of [...customPlayers, ...players]) {\n        if (Player2.canPlay(src)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n  ReactPlayer.canEnablePIP = src => {\n    var _a;\n    if (src) {\n      for (const Player2 of [...customPlayers, ...players]) {\n        if (Player2.canPlay(src) && ((_a = Player2.canEnablePIP) == null ? void 0 : _a.call(Player2))) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n  return ReactPlayer;\n};\nconst ForwardChildren = _ref => {\n  let {\n    children\n  } = _ref;\n  return children;\n};\nexport { createReactPlayer };","map":null,"metadata":{},"sourceType":"module"}