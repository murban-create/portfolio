{"ast":null,"code":"import React, { useState, useCallback, useEffect } from 'react';\nimport Calendar, { Skeleton } from 'react-activity-calendar';\nexport { createCalendarTheme } from 'react-activity-calendar';\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n// GitHub theme\nconst API_URL = 'https://github-contributions-api.jogruber.de/v4/';\nconst DEFAULT_THEME = {\n  level4: '#216e39',\n  level3: '#30a14e',\n  level2: '#40c463',\n  level1: '#9be9a8',\n  level0: '#ebedf0'\n};\nconst transformData = (data, transformFn) => {\n  if (typeof transformFn !== 'function') {\n    return data;\n  }\n  const transformedData = transformFn(data);\n  if (!Array.isArray(transformedData)) {\n    throw new Error(`Passed function transformData must return a list of Day objects.`);\n  }\n  if (transformedData.length > 0) {\n    const testObj = transformedData[0];\n    if (typeof testObj.count !== 'number' || testObj.count < 0) {\n      throw new Error(`Required property \"count: number\" missing or invalid. Got: ${testObj.count}`);\n    }\n    if (typeof testObj.date !== 'string' || !/(\\d{4})-(\\d{2})-(\\d{2})/.test(testObj.date)) {\n      throw new Error(`Required property \"date: YYYY-MM-DD\" missing or invalid. Got: ${testObj.date}`);\n    }\n    if (typeof testObj.level !== 'number' || testObj.level < 0 || testObj.level > 4) {\n      throw new Error(`Required property \"level: 0 | 1 | 2 | 3 | 4\" missing or invalid: Got: ${testObj.level}.`);\n    }\n  }\n  return transformedData;\n};\nasync function fetchCalendarData(username, year) {\n  const response = await fetch(`${API_URL}${username}?y=${year}`);\n  const data = await response.json();\n  if (!response.ok) {\n    throw new Error(data.error);\n  }\n  return data;\n}\nconst GitHubCalendar = _ref => {\n  var _props$theme;\n  let {\n    username,\n    year = 'last',\n    transformData: transformDataProp,\n    ...props\n  } = _ref;\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const transformDataCallback = useCallback(contributions => transformData(contributions, transformDataProp), [transformDataProp]);\n  const fetchData = useCallback(() => {\n    setLoading(true);\n    setError(null);\n    fetchCalendarData(username, year).then(_ref2 => {\n      let {\n        contributions\n      } = _ref2;\n      return setData(transformDataCallback(contributions));\n    }).catch(setError).finally(() => setLoading(false));\n  }, [username, year, transformDataCallback]);\n  useEffect(fetchData, [fetchData]);\n  if (error) {\n    return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"i\", null, \"Unable to fetch contribution data. See console.\"));\n  }\n  if (loading || !data) {\n    return /*#__PURE__*/React.createElement(Skeleton, _extends({}, props, {\n      loading: true\n    }));\n  }\n  const theme = props.color ? undefined : (_props$theme = props.theme) !== null && _props$theme !== void 0 ? _props$theme : DEFAULT_THEME;\n  const labels = {\n    totalCount: `{{count}} contributions in ${year === 'last' ? 'the last year' : '{{year}}'}`\n  };\n  return /*#__PURE__*/React.createElement(Calendar, _extends({\n    data: data,\n    theme: theme,\n    labels: labels\n  }, props));\n};\nexport { GitHubCalendar as default };","map":null,"metadata":{},"sourceType":"module"}