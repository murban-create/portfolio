{"ast":null,"code":"import { stateMediator as defaultStateMediator, prepareStateOwners } from \"./state-mediator.js\";\nimport { areValuesEq } from \"./util.js\";\nimport { requestMap as defaultRequestMap } from \"./request-map.js\";\nconst createMediaStore = _ref => {\n  let {\n    media,\n    fullscreenElement,\n    documentElement,\n    stateMediator = defaultStateMediator,\n    requestMap = defaultRequestMap,\n    options = {},\n    monitorStateOwnersOnlyWithSubscriptions = true\n  } = _ref;\n  const callbacks = [];\n  const stateOwners = {\n    // Spreading options here since folks should not rely on holding onto references\n    // for any app-level logic wrt options.\n    options: {\n      ...options\n    }\n  };\n  let state = Object.freeze({\n    mediaPreviewTime: void 0,\n    mediaPreviewImage: void 0,\n    mediaPreviewCoords: void 0,\n    mediaPreviewChapter: void 0\n  });\n  const updateState = nextStateDelta => {\n    if (nextStateDelta == void 0) return;\n    if (areValuesEq(nextStateDelta, state)) {\n      return;\n    }\n    state = Object.freeze({\n      ...state,\n      ...nextStateDelta\n    });\n    callbacks.forEach(cb => cb(state));\n  };\n  const updateStateFromFacade = () => {\n    const nextState = Object.entries(stateMediator).reduce((nextState2, _ref2) => {\n      let [stateName, {\n        get\n      }] = _ref2;\n      nextState2[stateName] = get(stateOwners);\n      return nextState2;\n    }, {});\n    updateState(nextState);\n  };\n  const stateUpdateHandlers = {};\n  let nextStateOwners = void 0;\n  const updateStateOwners = async (nextStateOwnersDelta, nextSubscriberCount) => {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p;\n    const pendingUpdate = !!nextStateOwners;\n    nextStateOwners = {\n      ...stateOwners,\n      ...(nextStateOwners != null ? nextStateOwners : {}),\n      ...nextStateOwnersDelta\n    };\n    if (pendingUpdate) return;\n    await prepareStateOwners(...Object.values(nextStateOwnersDelta));\n    const shouldTeardownFromSubscriberCount = callbacks.length > 0 && nextSubscriberCount === 0 && monitorStateOwnersOnlyWithSubscriptions;\n    const mediaChanged = stateOwners.media !== nextStateOwners.media;\n    const textTracksChanged = ((_a = stateOwners.media) == null ? void 0 : _a.textTracks) !== ((_b = nextStateOwners.media) == null ? void 0 : _b.textTracks);\n    const videoRenditionsChanged = ((_c = stateOwners.media) == null ? void 0 : _c.videoRenditions) !== ((_d = nextStateOwners.media) == null ? void 0 : _d.videoRenditions);\n    const audioTracksChanged = ((_e = stateOwners.media) == null ? void 0 : _e.audioTracks) !== ((_f = nextStateOwners.media) == null ? void 0 : _f.audioTracks);\n    const remoteChanged = ((_g = stateOwners.media) == null ? void 0 : _g.remote) !== ((_h = nextStateOwners.media) == null ? void 0 : _h.remote);\n    const rootNodeChanged = stateOwners.documentElement !== nextStateOwners.documentElement;\n    const teardownMedia = !!stateOwners.media && (mediaChanged || shouldTeardownFromSubscriberCount);\n    const teardownTextTracks = !!((_i = stateOwners.media) == null ? void 0 : _i.textTracks) && (textTracksChanged || shouldTeardownFromSubscriberCount);\n    const teardownVideoRenditions = !!((_j = stateOwners.media) == null ? void 0 : _j.videoRenditions) && (videoRenditionsChanged || shouldTeardownFromSubscriberCount);\n    const teardownAudioTracks = !!((_k = stateOwners.media) == null ? void 0 : _k.audioTracks) && (audioTracksChanged || shouldTeardownFromSubscriberCount);\n    const teardownRemote = !!((_l = stateOwners.media) == null ? void 0 : _l.remote) && (remoteChanged || shouldTeardownFromSubscriberCount);\n    const teardownRootNode = !!stateOwners.documentElement && (rootNodeChanged || shouldTeardownFromSubscriberCount);\n    const teardownSomething = teardownMedia || teardownTextTracks || teardownVideoRenditions || teardownAudioTracks || teardownRemote || teardownRootNode;\n    const shouldSetupFromSubscriberCount = callbacks.length === 0 && nextSubscriberCount === 1 && monitorStateOwnersOnlyWithSubscriptions;\n    const setupMedia = !!nextStateOwners.media && (mediaChanged || shouldSetupFromSubscriberCount);\n    const setupTextTracks = !!((_m = nextStateOwners.media) == null ? void 0 : _m.textTracks) && (textTracksChanged || shouldSetupFromSubscriberCount);\n    const setupVideoRenditions = !!((_n = nextStateOwners.media) == null ? void 0 : _n.videoRenditions) && (videoRenditionsChanged || shouldSetupFromSubscriberCount);\n    const setupAudioTracks = !!((_o = nextStateOwners.media) == null ? void 0 : _o.audioTracks) && (audioTracksChanged || shouldSetupFromSubscriberCount);\n    const setupRemote = !!((_p = nextStateOwners.media) == null ? void 0 : _p.remote) && (remoteChanged || shouldSetupFromSubscriberCount);\n    const setupRootNode = !!nextStateOwners.documentElement && (rootNodeChanged || shouldSetupFromSubscriberCount);\n    const setupSomething = setupMedia || setupTextTracks || setupVideoRenditions || setupAudioTracks || setupRemote || setupRootNode;\n    const somethingToDo = teardownSomething || setupSomething;\n    if (!somethingToDo) {\n      Object.entries(nextStateOwners).forEach(_ref3 => {\n        let [stateOwnerName, stateOwner] = _ref3;\n        stateOwners[stateOwnerName] = stateOwner;\n      });\n      updateStateFromFacade();\n      nextStateOwners = void 0;\n      return;\n    }\n    Object.entries(stateMediator).forEach(_ref4 => {\n      let [stateName, {\n        get,\n        mediaEvents = [],\n        textTracksEvents = [],\n        videoRenditionsEvents = [],\n        audioTracksEvents = [],\n        remoteEvents = [],\n        rootEvents = [],\n        stateOwnersUpdateHandlers = []\n      }] = _ref4;\n      if (!stateUpdateHandlers[stateName]) {\n        stateUpdateHandlers[stateName] = {};\n      }\n      const handler = event => {\n        const nextValue = get(stateOwners, event);\n        updateState({\n          [stateName]: nextValue\n        });\n      };\n      let prevHandler;\n      prevHandler = stateUpdateHandlers[stateName].mediaEvents;\n      mediaEvents.forEach(eventType => {\n        if (prevHandler && teardownMedia) {\n          stateOwners.media.removeEventListener(eventType, prevHandler);\n          stateUpdateHandlers[stateName].mediaEvents = void 0;\n        }\n        if (setupMedia) {\n          nextStateOwners.media.addEventListener(eventType, handler);\n          stateUpdateHandlers[stateName].mediaEvents = handler;\n        }\n      });\n      prevHandler = stateUpdateHandlers[stateName].textTracksEvents;\n      textTracksEvents.forEach(eventType => {\n        var _a2, _b2;\n        if (prevHandler && teardownTextTracks) {\n          (_a2 = stateOwners.media.textTracks) == null ? void 0 : _a2.removeEventListener(eventType, prevHandler);\n          stateUpdateHandlers[stateName].textTracksEvents = void 0;\n        }\n        if (setupTextTracks) {\n          (_b2 = nextStateOwners.media.textTracks) == null ? void 0 : _b2.addEventListener(eventType, handler);\n          stateUpdateHandlers[stateName].textTracksEvents = handler;\n        }\n      });\n      prevHandler = stateUpdateHandlers[stateName].videoRenditionsEvents;\n      videoRenditionsEvents.forEach(eventType => {\n        var _a2, _b2;\n        if (prevHandler && teardownVideoRenditions) {\n          (_a2 = stateOwners.media.videoRenditions) == null ? void 0 : _a2.removeEventListener(eventType, prevHandler);\n          stateUpdateHandlers[stateName].videoRenditionsEvents = void 0;\n        }\n        if (setupVideoRenditions) {\n          (_b2 = nextStateOwners.media.videoRenditions) == null ? void 0 : _b2.addEventListener(eventType, handler);\n          stateUpdateHandlers[stateName].videoRenditionsEvents = handler;\n        }\n      });\n      prevHandler = stateUpdateHandlers[stateName].audioTracksEvents;\n      audioTracksEvents.forEach(eventType => {\n        var _a2, _b2;\n        if (prevHandler && teardownAudioTracks) {\n          (_a2 = stateOwners.media.audioTracks) == null ? void 0 : _a2.removeEventListener(eventType, prevHandler);\n          stateUpdateHandlers[stateName].audioTracksEvents = void 0;\n        }\n        if (setupAudioTracks) {\n          (_b2 = nextStateOwners.media.audioTracks) == null ? void 0 : _b2.addEventListener(eventType, handler);\n          stateUpdateHandlers[stateName].audioTracksEvents = handler;\n        }\n      });\n      prevHandler = stateUpdateHandlers[stateName].remoteEvents;\n      remoteEvents.forEach(eventType => {\n        var _a2, _b2;\n        if (prevHandler && teardownRemote) {\n          (_a2 = stateOwners.media.remote) == null ? void 0 : _a2.removeEventListener(eventType, prevHandler);\n          stateUpdateHandlers[stateName].remoteEvents = void 0;\n        }\n        if (setupRemote) {\n          (_b2 = nextStateOwners.media.remote) == null ? void 0 : _b2.addEventListener(eventType, handler);\n          stateUpdateHandlers[stateName].remoteEvents = handler;\n        }\n      });\n      prevHandler = stateUpdateHandlers[stateName].rootEvents;\n      rootEvents.forEach(eventType => {\n        if (prevHandler && teardownRootNode) {\n          stateOwners.documentElement.removeEventListener(eventType, prevHandler);\n          stateUpdateHandlers[stateName].rootEvents = void 0;\n        }\n        if (setupRootNode) {\n          nextStateOwners.documentElement.addEventListener(eventType, handler);\n          stateUpdateHandlers[stateName].rootEvents = handler;\n        }\n      });\n      const prevHandlerTeardown = stateUpdateHandlers[stateName].stateOwnersUpdateHandlers;\n      stateOwnersUpdateHandlers.forEach(fn => {\n        if (prevHandlerTeardown && teardownSomething) {\n          prevHandlerTeardown();\n        }\n        if (setupSomething) {\n          stateUpdateHandlers[stateName].stateOwnersUpdateHandlers = fn(handler, nextStateOwners);\n        }\n      });\n    });\n    Object.entries(nextStateOwners).forEach(_ref5 => {\n      let [stateOwnerName, stateOwner] = _ref5;\n      stateOwners[stateOwnerName] = stateOwner;\n    });\n    updateStateFromFacade();\n    nextStateOwners = void 0;\n  };\n  updateStateOwners({\n    media,\n    fullscreenElement,\n    documentElement,\n    options\n  });\n  return {\n    // note that none of these cases directly interact with the media element, root node, full screen element, etc.\n    // note these \"actions\" could just be the events if we wanted, especially if we normalize on \"detail\" for\n    // any payload-relevant values\n    // This is roughly equivalent to our used to be in our state requests dictionary object, though much of the\n    // \"heavy lifting\" is now moved into the facade `set()`\n    dispatch(action) {\n      const {\n        type,\n        detail\n      } = action;\n      if (requestMap[type] && state.mediaErrorCode == null) {\n        updateState(requestMap[type](stateMediator, stateOwners, action));\n        return;\n      }\n      if (type === \"mediaelementchangerequest\") {\n        updateStateOwners({\n          media: detail\n        });\n      } else if (type === \"fullscreenelementchangerequest\") {\n        updateStateOwners({\n          fullscreenElement: detail\n        });\n      } else if (type === \"documentelementchangerequest\") {\n        updateStateOwners({\n          documentElement: detail\n        });\n      } else if (type === \"optionschangerequest\") {\n        Object.entries(detail != null ? detail : {}).forEach(_ref6 => {\n          let [optionName, optionValue] = _ref6;\n          stateOwners.options[optionName] = optionValue;\n        });\n      }\n    },\n    getState() {\n      return state;\n    },\n    subscribe(callback) {\n      updateStateOwners({}, callbacks.length + 1);\n      callbacks.push(callback);\n      callback(state);\n      return () => {\n        const idx = callbacks.indexOf(callback);\n        if (idx >= 0) {\n          updateStateOwners({}, callbacks.length - 1);\n          callbacks.splice(idx, 1);\n        }\n      };\n    }\n  };\n};\nvar media_store_default = createMediaStore;\nexport { createMediaStore, media_store_default as default };","map":null,"metadata":{},"sourceType":"module"}