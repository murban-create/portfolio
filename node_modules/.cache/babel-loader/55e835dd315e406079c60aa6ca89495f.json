{"ast":null,"code":"import { MediaChromeButton } from \"./media-chrome-button.js\";\nimport { globalThis } from \"./utils/server-safe-globals.js\";\nimport { MediaUIEvents, MediaUIAttributes } from \"./constants.js\";\nimport { getBooleanAttr, setBooleanAttr } from \"./utils/element-utils.js\";\nimport { t } from \"./utils/i18n.js\";\nconst {\n  MEDIA_TIME_IS_LIVE,\n  MEDIA_PAUSED\n} = MediaUIAttributes;\nconst {\n  MEDIA_SEEK_TO_LIVE_REQUEST,\n  MEDIA_PLAY_REQUEST\n} = MediaUIEvents;\nconst indicatorSVG = '<svg viewBox=\"0 0 6 12\"><circle cx=\"3\" cy=\"6\" r=\"2\"></circle></svg>';\nfunction getSlotTemplateHTML(_attrs) {\n  return /*html*/`\n    <style>\n      :host { --media-tooltip-display: none; }\n      \n      slot[name=indicator] > *,\n      :host ::slotted([slot=indicator]) {\n        ${/* Override styles for icon-only buttons */\n  \"\"}\n        min-width: auto;\n        fill: var(--media-live-button-icon-color, rgb(140, 140, 140));\n        color: var(--media-live-button-icon-color, rgb(140, 140, 140));\n      }\n\n      :host([${MEDIA_TIME_IS_LIVE}]:not([${MEDIA_PAUSED}])) slot[name=indicator] > *,\n      :host([${MEDIA_TIME_IS_LIVE}]:not([${MEDIA_PAUSED}])) ::slotted([slot=indicator]) {\n        fill: var(--media-live-button-indicator-color, rgb(255, 0, 0));\n        color: var(--media-live-button-indicator-color, rgb(255, 0, 0));\n      }\n\n      :host([${MEDIA_TIME_IS_LIVE}]:not([${MEDIA_PAUSED}])) {\n        cursor: var(--media-cursor, not-allowed);\n      }\n\n      slot[name=text]{\n        text-transform: uppercase;\n      }\n\n    </style>\n\n    <slot name=\"indicator\">${indicatorSVG}</slot>\n    ${\n  /*\n  A new line between spacer and text creates inconsistent spacing\n  between slotted items and default slots.\n  */\n  \"\"}\n    <slot name=\"spacer\">&nbsp;</slot><slot name=\"text\">${t(\"live\")}</slot>\n  `;\n}\nconst updateAriaAttributes = el => {\n  const isPausedOrNotLive = el.mediaPaused || !el.mediaTimeIsLive;\n  const label = isPausedOrNotLive ? t(\"seek to live\") : t(\"playing live\");\n  el.setAttribute(\"aria-label\", label);\n  isPausedOrNotLive ? el.removeAttribute(\"aria-disabled\") : el.setAttribute(\"aria-disabled\", \"true\");\n};\nclass MediaLiveButton extends MediaChromeButton {\n  static get observedAttributes() {\n    return [...super.observedAttributes, MEDIA_TIME_IS_LIVE, MEDIA_PAUSED];\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    updateAriaAttributes(this);\n  }\n  attributeChangedCallback(attrName, oldValue, newValue) {\n    super.attributeChangedCallback(attrName, oldValue, newValue);\n    updateAriaAttributes(this);\n  }\n  /**\n   * @type {boolean} Is the media paused\n   */\n  get mediaPaused() {\n    return getBooleanAttr(this, MediaUIAttributes.MEDIA_PAUSED);\n  }\n  set mediaPaused(value) {\n    setBooleanAttr(this, MediaUIAttributes.MEDIA_PAUSED, value);\n  }\n  /**\n   * @type {boolean} Is the media playback currently live\n   */\n  get mediaTimeIsLive() {\n    return getBooleanAttr(this, MediaUIAttributes.MEDIA_TIME_IS_LIVE);\n  }\n  set mediaTimeIsLive(value) {\n    setBooleanAttr(this, MediaUIAttributes.MEDIA_TIME_IS_LIVE, value);\n  }\n  handleClick() {\n    if (!this.mediaPaused && this.mediaTimeIsLive) return;\n    this.dispatchEvent(new globalThis.CustomEvent(MEDIA_SEEK_TO_LIVE_REQUEST, {\n      composed: true,\n      bubbles: true\n    }));\n    if (this.hasAttribute(MEDIA_PAUSED)) {\n      this.dispatchEvent(new globalThis.CustomEvent(MEDIA_PLAY_REQUEST, {\n        composed: true,\n        bubbles: true\n      }));\n    }\n  }\n}\nMediaLiveButton.getSlotTemplateHTML = getSlotTemplateHTML;\nif (!globalThis.customElements.get(\"media-live-button\")) {\n  globalThis.customElements.define(\"media-live-button\", MediaLiveButton);\n}\nvar media_live_button_default = MediaLiveButton;\nexport { media_live_button_default as default };","map":{"version":3,"names":["MediaChromeButton","globalThis","MediaUIEvents","MediaUIAttributes","getBooleanAttr","setBooleanAttr","t","MEDIA_TIME_IS_LIVE","MEDIA_PAUSED","MEDIA_SEEK_TO_LIVE_REQUEST","MEDIA_PLAY_REQUEST","indicatorSVG","getSlotTemplateHTML","_attrs","updateAriaAttributes","el","isPausedOrNotLive","mediaPaused","mediaTimeIsLive","label","setAttribute","removeAttribute","MediaLiveButton","observedAttributes","connectedCallback","attributeChangedCallback","attrName","oldValue","newValue","value","handleClick","dispatchEvent","CustomEvent","composed","bubbles","hasAttribute","customElements","get","define","media_live_button_default","default"],"sources":["/Users/monawiebkeurban/Documents/portfolio/node_modules/media-chrome/dist/media-live-button.js"],"sourcesContent":["import { MediaChromeButton } from \"./media-chrome-button.js\";\nimport { globalThis } from \"./utils/server-safe-globals.js\";\nimport { MediaUIEvents, MediaUIAttributes } from \"./constants.js\";\nimport { getBooleanAttr, setBooleanAttr } from \"./utils/element-utils.js\";\nimport { t } from \"./utils/i18n.js\";\nconst { MEDIA_TIME_IS_LIVE, MEDIA_PAUSED } = MediaUIAttributes;\nconst { MEDIA_SEEK_TO_LIVE_REQUEST, MEDIA_PLAY_REQUEST } = MediaUIEvents;\nconst indicatorSVG = '<svg viewBox=\"0 0 6 12\"><circle cx=\"3\" cy=\"6\" r=\"2\"></circle></svg>';\nfunction getSlotTemplateHTML(_attrs) {\n  return (\n    /*html*/\n    `\n    <style>\n      :host { --media-tooltip-display: none; }\n      \n      slot[name=indicator] > *,\n      :host ::slotted([slot=indicator]) {\n        ${/* Override styles for icon-only buttons */\n    \"\"}\n        min-width: auto;\n        fill: var(--media-live-button-icon-color, rgb(140, 140, 140));\n        color: var(--media-live-button-icon-color, rgb(140, 140, 140));\n      }\n\n      :host([${MEDIA_TIME_IS_LIVE}]:not([${MEDIA_PAUSED}])) slot[name=indicator] > *,\n      :host([${MEDIA_TIME_IS_LIVE}]:not([${MEDIA_PAUSED}])) ::slotted([slot=indicator]) {\n        fill: var(--media-live-button-indicator-color, rgb(255, 0, 0));\n        color: var(--media-live-button-indicator-color, rgb(255, 0, 0));\n      }\n\n      :host([${MEDIA_TIME_IS_LIVE}]:not([${MEDIA_PAUSED}])) {\n        cursor: var(--media-cursor, not-allowed);\n      }\n\n      slot[name=text]{\n        text-transform: uppercase;\n      }\n\n    </style>\n\n    <slot name=\"indicator\">${indicatorSVG}</slot>\n    ${/*\n      A new line between spacer and text creates inconsistent spacing\n      between slotted items and default slots.\n    */\n    \"\"}\n    <slot name=\"spacer\">&nbsp;</slot><slot name=\"text\">${t(\"live\")}</slot>\n  `\n  );\n}\nconst updateAriaAttributes = (el) => {\n  const isPausedOrNotLive = el.mediaPaused || !el.mediaTimeIsLive;\n  const label = isPausedOrNotLive ? t(\"seek to live\") : t(\"playing live\");\n  el.setAttribute(\"aria-label\", label);\n  isPausedOrNotLive ? el.removeAttribute(\"aria-disabled\") : el.setAttribute(\"aria-disabled\", \"true\");\n};\nclass MediaLiveButton extends MediaChromeButton {\n  static get observedAttributes() {\n    return [\n      ...super.observedAttributes,\n      MEDIA_TIME_IS_LIVE,\n      MEDIA_PAUSED\n    ];\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    updateAriaAttributes(this);\n  }\n  attributeChangedCallback(attrName, oldValue, newValue) {\n    super.attributeChangedCallback(attrName, oldValue, newValue);\n    updateAriaAttributes(this);\n  }\n  /**\n   * @type {boolean} Is the media paused\n   */\n  get mediaPaused() {\n    return getBooleanAttr(this, MediaUIAttributes.MEDIA_PAUSED);\n  }\n  set mediaPaused(value) {\n    setBooleanAttr(this, MediaUIAttributes.MEDIA_PAUSED, value);\n  }\n  /**\n   * @type {boolean} Is the media playback currently live\n   */\n  get mediaTimeIsLive() {\n    return getBooleanAttr(this, MediaUIAttributes.MEDIA_TIME_IS_LIVE);\n  }\n  set mediaTimeIsLive(value) {\n    setBooleanAttr(this, MediaUIAttributes.MEDIA_TIME_IS_LIVE, value);\n  }\n  handleClick() {\n    if (!this.mediaPaused && this.mediaTimeIsLive)\n      return;\n    this.dispatchEvent(\n      new globalThis.CustomEvent(MEDIA_SEEK_TO_LIVE_REQUEST, {\n        composed: true,\n        bubbles: true\n      })\n    );\n    if (this.hasAttribute(MEDIA_PAUSED)) {\n      this.dispatchEvent(\n        new globalThis.CustomEvent(MEDIA_PLAY_REQUEST, {\n          composed: true,\n          bubbles: true\n        })\n      );\n    }\n  }\n}\nMediaLiveButton.getSlotTemplateHTML = getSlotTemplateHTML;\nif (!globalThis.customElements.get(\"media-live-button\")) {\n  globalThis.customElements.define(\"media-live-button\", MediaLiveButton);\n}\nvar media_live_button_default = MediaLiveButton;\nexport {\n  media_live_button_default as default\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}