{"ast":null,"code":"import VimeoPlayerAPI from \"@vimeo/player/dist/player.es.js\";\nconst EMBED_BASE = \"https://player.vimeo.com/video\";\nconst MATCH_SRC = /vimeo\\.com\\/(?:video\\/)?(\\d+)(?:\\/([\\w-]+))?/;\nfunction getTemplateHTML(attrs) {\n  let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const iframeAttrs = {\n    src: serializeIframeUrl(attrs, props),\n    frameborder: 0,\n    width: \"100%\",\n    height: \"100%\",\n    allow: \"accelerometer; fullscreen; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n  };\n  if (props.config) {\n    iframeAttrs[\"data-config\"] = JSON.stringify(props.config);\n  }\n  return /*html*/`\n    <style>\n      :host {\n        display: inline-block;\n        min-width: 300px;\n        min-height: 150px;\n        position: relative;\n      }\n      iframe {\n        position: absolute;\n        top: 0;\n        left: 0;\n      }\n      :host(:not([controls])) {\n        pointer-events: none;\n      }\n    </style>\n    <iframe${serializeAttributes(iframeAttrs)}></iframe>\n  `;\n}\nfunction serializeIframeUrl(attrs, props) {\n  if (!attrs.src) return;\n  const matches = attrs.src.match(MATCH_SRC);\n  const srcId = matches && matches[1];\n  const hParam = matches && matches[2];\n  const params = {\n    // ?controls=true is enabled by default in the iframe\n    controls: attrs.controls === \"\" ? null : 0,\n    autoplay: attrs.autoplay,\n    loop: attrs.loop,\n    muted: attrs.muted,\n    playsinline: attrs.playsinline,\n    preload: attrs.preload ?? \"metadata\",\n    transparent: false,\n    autopause: attrs.autopause,\n    h: hParam,\n    // This param is required when the video is Unlisted.\n    ...props.config\n  };\n  return `${EMBED_BASE}/${srcId}?${serialize(params)}`;\n}\nclass VimeoVideoElement extends (globalThis.HTMLElement ?? class {}) {\n  static getTemplateHTML = getTemplateHTML;\n  static shadowRootOptions = {\n    mode: \"open\"\n  };\n  static observedAttributes = [\"autoplay\", \"controls\", \"crossorigin\", \"loop\", \"muted\", \"playsinline\", \"poster\", \"preload\", \"src\"];\n  loadComplete = new PublicPromise();\n  #loadRequested;\n  #hasLoaded;\n  #isInit;\n  #currentTime = 0;\n  #duration = NaN;\n  #muted = false;\n  #paused = !this.autoplay;\n  #playbackRate = 1;\n  #progress = 0;\n  #readyState = 0;\n  #seeking = false;\n  #volume = 1;\n  #videoWidth = NaN;\n  #videoHeight = NaN;\n  #config = null;\n  constructor() {\n    super();\n    this.#upgradeProperty(\"config\");\n  }\n  requestFullscreen() {\n    var _a, _b;\n    return (_b = (_a = this.api) == null ? void 0 : _a.requestFullscreen) == null ? void 0 : _b.call(_a);\n  }\n  exitFullscreen() {\n    var _a, _b;\n    return (_b = (_a = this.api) == null ? void 0 : _a.exitFullscreen) == null ? void 0 : _b.call(_a);\n  }\n  requestPictureInPicture() {\n    var _a, _b;\n    return (_b = (_a = this.api) == null ? void 0 : _a.requestPictureInPicture) == null ? void 0 : _b.call(_a);\n  }\n  exitPictureInPicture() {\n    var _a, _b;\n    return (_b = (_a = this.api) == null ? void 0 : _a.exitPictureInPicture) == null ? void 0 : _b.call(_a);\n  }\n  get config() {\n    return this.#config;\n  }\n  set config(value) {\n    this.#config = value;\n  }\n  async load() {\n    var _a;\n    if (this.#loadRequested) return;\n    const isFirstLoad = !this.#hasLoaded;\n    if (this.#hasLoaded) this.loadComplete = new PublicPromise();\n    this.#hasLoaded = true;\n    await (this.#loadRequested = Promise.resolve());\n    this.#loadRequested = null;\n    this.#currentTime = 0;\n    this.#duration = NaN;\n    this.#muted = false;\n    this.#paused = !this.autoplay;\n    this.#playbackRate = 1;\n    this.#progress = 0;\n    this.#readyState = 0;\n    this.#seeking = false;\n    this.#volume = 1;\n    this.#readyState = 0;\n    this.#videoWidth = NaN;\n    this.#videoHeight = NaN;\n    this.dispatchEvent(new Event(\"emptied\"));\n    let oldApi = this.api;\n    this.api = null;\n    if (!this.src) {\n      return;\n    }\n    this.dispatchEvent(new Event(\"loadstart\"));\n    const options = {\n      autoplay: this.autoplay,\n      controls: this.controls,\n      loop: this.loop,\n      muted: this.defaultMuted,\n      playsinline: this.playsInline,\n      preload: this.preload ?? \"metadata\",\n      transparent: false,\n      autopause: this.hasAttribute(\"autopause\"),\n      ...this.#config\n    };\n    const onLoaded = async () => {\n      this.#readyState = 1;\n      this.dispatchEvent(new Event(\"loadedmetadata\"));\n      if (this.api) {\n        this.#muted = await this.api.getMuted();\n        this.#volume = await this.api.getVolume();\n        this.dispatchEvent(new Event(\"volumechange\"));\n        this.#duration = await this.api.getDuration();\n        this.dispatchEvent(new Event(\"durationchange\"));\n      }\n      this.dispatchEvent(new Event(\"loadcomplete\"));\n      this.loadComplete.resolve();\n    };\n    if (this.#isInit) {\n      this.api = oldApi;\n      await this.api.loadVideo({\n        ...options,\n        url: this.src\n      });\n      await onLoaded();\n      await this.loadComplete;\n      return;\n    }\n    this.#isInit = true;\n    let iframe = (_a = this.shadowRoot) == null ? void 0 : _a.querySelector(\"iframe\");\n    if (isFirstLoad && iframe) {\n      this.#config = JSON.parse(iframe.getAttribute(\"data-config\") || \"{}\");\n    }\n    if (!this.shadowRoot) {\n      this.attachShadow({\n        mode: \"open\"\n      });\n      this.shadowRoot.innerHTML = getTemplateHTML(namedNodeMapToObject(this.attributes), this);\n      iframe = this.shadowRoot.querySelector(\"iframe\");\n    }\n    this.api = new VimeoPlayerAPI(iframe);\n    const onceLoaded = () => {\n      this.api.off(\"loaded\", onceLoaded);\n      onLoaded();\n    };\n    this.api.on(\"loaded\", onceLoaded);\n    this.api.on(\"bufferstart\", () => {\n      if (this.#paused) {\n        this.#paused = false;\n        this.dispatchEvent(new Event(\"play\"));\n      }\n      this.dispatchEvent(new Event(\"waiting\"));\n    });\n    this.api.on(\"play\", () => {\n      if (!this.#paused) return;\n      this.#paused = false;\n      this.dispatchEvent(new Event(\"play\"));\n    });\n    this.api.on(\"playing\", () => {\n      this.#readyState = 3;\n      this.#paused = false;\n      this.dispatchEvent(new Event(\"playing\"));\n    });\n    this.api.on(\"seeking\", () => {\n      this.#seeking = true;\n      this.dispatchEvent(new Event(\"seeking\"));\n    });\n    this.api.on(\"seeked\", () => {\n      this.#seeking = false;\n      this.dispatchEvent(new Event(\"seeked\"));\n    });\n    this.api.on(\"pause\", () => {\n      this.#paused = true;\n      this.dispatchEvent(new Event(\"pause\"));\n    });\n    this.api.on(\"ended\", () => {\n      this.#paused = true;\n      this.dispatchEvent(new Event(\"ended\"));\n    });\n    this.api.on(\"ratechange\", _ref => {\n      let {\n        playbackRate\n      } = _ref;\n      this.#playbackRate = playbackRate;\n      this.dispatchEvent(new Event(\"ratechange\"));\n    });\n    this.api.on(\"volumechange\", async _ref2 => {\n      let {\n        volume\n      } = _ref2;\n      this.#volume = volume;\n      if (this.api) {\n        this.#muted = await this.api.getMuted();\n      }\n      this.dispatchEvent(new Event(\"volumechange\"));\n    });\n    this.api.on(\"durationchange\", _ref3 => {\n      let {\n        duration\n      } = _ref3;\n      this.#duration = duration;\n      this.dispatchEvent(new Event(\"durationchange\"));\n    });\n    this.api.on(\"timeupdate\", _ref4 => {\n      let {\n        seconds\n      } = _ref4;\n      this.#currentTime = seconds;\n      this.dispatchEvent(new Event(\"timeupdate\"));\n    });\n    this.api.on(\"progress\", _ref5 => {\n      let {\n        seconds\n      } = _ref5;\n      this.#progress = seconds;\n      this.dispatchEvent(new Event(\"progress\"));\n    });\n    this.api.on(\"resize\", _ref6 => {\n      let {\n        videoWidth,\n        videoHeight\n      } = _ref6;\n      this.#videoWidth = videoWidth;\n      this.#videoHeight = videoHeight;\n      this.dispatchEvent(new Event(\"resize\"));\n    });\n    await this.loadComplete;\n  }\n  async attributeChangedCallback(attrName, oldValue, newValue) {\n    if (oldValue === newValue) return;\n    switch (attrName) {\n      case \"autoplay\":\n      case \"controls\":\n      case \"src\":\n        {\n          this.load();\n          return;\n        }\n    }\n    await this.loadComplete;\n    switch (attrName) {\n      case \"loop\":\n        {\n          this.api.setLoop(this.loop);\n          break;\n        }\n    }\n  }\n  async play() {\n    var _a;\n    this.#paused = false;\n    this.dispatchEvent(new Event(\"play\"));\n    await this.loadComplete;\n    try {\n      await ((_a = this.api) == null ? void 0 : _a.play());\n    } catch (error) {\n      this.#paused = true;\n      this.dispatchEvent(new Event(\"pause\"));\n      throw error;\n    }\n  }\n  async pause() {\n    var _a;\n    await this.loadComplete;\n    return (_a = this.api) == null ? void 0 : _a.pause();\n  }\n  get ended() {\n    return this.#currentTime >= this.#duration;\n  }\n  get seeking() {\n    return this.#seeking;\n  }\n  get readyState() {\n    return this.#readyState;\n  }\n  get videoWidth() {\n    return this.#videoWidth;\n  }\n  get videoHeight() {\n    return this.#videoHeight;\n  }\n  get src() {\n    return this.getAttribute(\"src\");\n  }\n  set src(val) {\n    if (this.src == val) return;\n    this.setAttribute(\"src\", val);\n  }\n  get paused() {\n    return this.#paused;\n  }\n  get duration() {\n    return this.#duration;\n  }\n  get autoplay() {\n    return this.hasAttribute(\"autoplay\");\n  }\n  set autoplay(val) {\n    if (this.autoplay == val) return;\n    this.toggleAttribute(\"autoplay\", Boolean(val));\n  }\n  get buffered() {\n    if (this.#progress > 0) {\n      return createTimeRanges(0, this.#progress);\n    }\n    return createTimeRanges();\n  }\n  get controls() {\n    return this.hasAttribute(\"controls\");\n  }\n  set controls(val) {\n    if (this.controls == val) return;\n    this.toggleAttribute(\"controls\", Boolean(val));\n  }\n  get currentTime() {\n    return this.#currentTime;\n  }\n  set currentTime(val) {\n    if (this.currentTime == val) return;\n    this.#currentTime = val;\n    this.loadComplete.then(() => {\n      var _a;\n      (_a = this.api) == null ? void 0 : _a.setCurrentTime(val).catch(() => {});\n    });\n  }\n  get defaultMuted() {\n    return this.hasAttribute(\"muted\");\n  }\n  set defaultMuted(val) {\n    if (this.defaultMuted == val) return;\n    this.toggleAttribute(\"muted\", Boolean(val));\n  }\n  get loop() {\n    return this.hasAttribute(\"loop\");\n  }\n  set loop(val) {\n    if (this.loop == val) return;\n    this.toggleAttribute(\"loop\", Boolean(val));\n  }\n  get muted() {\n    return this.#muted;\n  }\n  set muted(val) {\n    if (this.muted == val) return;\n    this.#muted = val;\n    this.loadComplete.then(() => {\n      var _a;\n      (_a = this.api) == null ? void 0 : _a.setMuted(val).catch(() => {});\n    });\n  }\n  get playbackRate() {\n    return this.#playbackRate;\n  }\n  set playbackRate(val) {\n    if (this.playbackRate == val) return;\n    this.#playbackRate = val;\n    this.loadComplete.then(() => {\n      var _a;\n      (_a = this.api) == null ? void 0 : _a.setPlaybackRate(val).catch(() => {});\n    });\n  }\n  get playsInline() {\n    return this.hasAttribute(\"playsinline\");\n  }\n  set playsInline(val) {\n    if (this.playsInline == val) return;\n    this.toggleAttribute(\"playsinline\", Boolean(val));\n  }\n  get poster() {\n    return this.getAttribute(\"poster\");\n  }\n  set poster(val) {\n    if (this.poster == val) return;\n    this.setAttribute(\"poster\", `${val}`);\n  }\n  get volume() {\n    return this.#volume;\n  }\n  set volume(val) {\n    if (this.volume == val) return;\n    this.#volume = val;\n    this.loadComplete.then(() => {\n      var _a;\n      (_a = this.api) == null ? void 0 : _a.setVolume(val).catch(() => {});\n    });\n  }\n  // This is a pattern to update property values that are set before\n  // the custom element is upgraded.\n  // https://web.dev/custom-elements-best-practices/#make-properties-lazy\n  #upgradeProperty(prop) {\n    if (Object.prototype.hasOwnProperty.call(this, prop)) {\n      const value = this[prop];\n      delete this[prop];\n      this[prop] = value;\n    }\n  }\n}\nfunction serializeAttributes(attrs) {\n  let html = \"\";\n  for (const key in attrs) {\n    const value = attrs[key];\n    if (value === \"\") html += ` ${escapeHtml(key)}`;else html += ` ${escapeHtml(key)}=\"${escapeHtml(`${value}`)}\"`;\n  }\n  return html;\n}\nfunction escapeHtml(str) {\n  return str.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&apos;\").replace(/`/g, \"&#x60;\");\n}\nfunction serialize(props) {\n  return String(new URLSearchParams(boolToBinary(props)));\n}\nfunction boolToBinary(props) {\n  let p = {};\n  for (let key in props) {\n    let val = props[key];\n    if (val === true || val === \"\") p[key] = 1;else if (val === false) p[key] = 0;else if (val != null) p[key] = val;\n  }\n  return p;\n}\nfunction namedNodeMapToObject(namedNodeMap) {\n  let obj = {};\n  for (let attr of namedNodeMap) {\n    obj[attr.name] = attr.value;\n  }\n  return obj;\n}\nclass PublicPromise extends Promise {\n  constructor() {\n    let executor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : () => {};\n    let res, rej;\n    super((resolve, reject) => {\n      executor(resolve, reject);\n      res = resolve;\n      rej = reject;\n    });\n    this.resolve = res;\n    this.reject = rej;\n  }\n}\nfunction createTimeRanges(start, end) {\n  if (Array.isArray(start)) {\n    return createTimeRangesObj(start);\n  } else if (start == null || end == null || start === 0 && end === 0) {\n    return createTimeRangesObj([[0, 0]]);\n  }\n  return createTimeRangesObj([[start, end]]);\n}\nfunction createTimeRangesObj(ranges) {\n  Object.defineProperties(ranges, {\n    start: {\n      value: i => ranges[i][0]\n    },\n    end: {\n      value: i => ranges[i][1]\n    }\n  });\n  return ranges;\n}\nif (globalThis.customElements && !globalThis.customElements.get(\"vimeo-video\")) {\n  globalThis.customElements.define(\"vimeo-video\", VimeoVideoElement);\n}\nvar vimeo_video_element_default = VimeoVideoElement;\nexport { vimeo_video_element_default as default };","map":null,"metadata":{},"sourceType":"module"}