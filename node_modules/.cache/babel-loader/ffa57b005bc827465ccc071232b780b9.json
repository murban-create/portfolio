{"ast":null,"code":"import { MediaChromeButton } from \"./media-chrome-button.js\";\nimport { globalThis } from \"./utils/server-safe-globals.js\";\nimport { MediaUIEvents, MediaUIAttributes } from \"./constants.js\";\nimport { t } from \"./utils/i18n.js\";\nimport { getBooleanAttr, getStringAttr, setBooleanAttr, setStringAttr } from \"./utils/element-utils.js\";\nconst enterFullscreenIcon = `<svg aria-hidden=\"true\" viewBox=\"0 0 26 24\">\n  <path d=\"M16 3v2.5h3.5V9H22V3h-6ZM4 9h2.5V5.5H10V3H4v6Zm15.5 9.5H16V21h6v-6h-2.5v3.5ZM6.5 15H4v6h6v-2.5H6.5V15Z\"/>\n</svg>`;\nconst exitFullscreenIcon = `<svg aria-hidden=\"true\" viewBox=\"0 0 26 24\">\n  <path d=\"M18.5 6.5V3H16v6h6V6.5h-3.5ZM16 21h2.5v-3.5H22V15h-6v6ZM4 17.5h3.5V21H10v-6H4v2.5Zm3.5-11H4V9h6V3H7.5v3.5Z\"/>\n</svg>`;\nfunction getSlotTemplateHTML(_attrs) {\n  return /*html*/`\n    <style>\n      :host([${MediaUIAttributes.MEDIA_IS_FULLSCREEN}]) slot[name=icon] slot:not([name=exit]) {\n        display: none !important;\n      }\n\n      ${/* Double negative, but safer if display doesn't equal 'block' */\n  \"\"}\n      :host(:not([${MediaUIAttributes.MEDIA_IS_FULLSCREEN}])) slot[name=icon] slot:not([name=enter]) {\n        display: none !important;\n      }\n\n      :host([${MediaUIAttributes.MEDIA_IS_FULLSCREEN}]) slot[name=tooltip-enter],\n      :host(:not([${MediaUIAttributes.MEDIA_IS_FULLSCREEN}])) slot[name=tooltip-exit] {\n        display: none;\n      }\n    </style>\n\n    <slot name=\"icon\">\n      <slot name=\"enter\">${enterFullscreenIcon}</slot>\n      <slot name=\"exit\">${exitFullscreenIcon}</slot>\n    </slot>\n  `;\n}\nfunction getTooltipContentHTML() {\n  return /*html*/`\n    <slot name=\"tooltip-enter\">${t(\"Enter fullscreen mode\")}</slot>\n    <slot name=\"tooltip-exit\">${t(\"Exit fullscreen mode\")}</slot>\n  `;\n}\nconst updateAriaLabel = el => {\n  const label = el.mediaIsFullscreen ? t(\"exit fullscreen mode\") : t(\"enter fullscreen mode\");\n  el.setAttribute(\"aria-label\", label);\n};\nclass MediaFullscreenButton extends MediaChromeButton {\n  static get observedAttributes() {\n    return [...super.observedAttributes, MediaUIAttributes.MEDIA_IS_FULLSCREEN, MediaUIAttributes.MEDIA_FULLSCREEN_UNAVAILABLE];\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    updateAriaLabel(this);\n  }\n  attributeChangedCallback(attrName, oldValue, newValue) {\n    super.attributeChangedCallback(attrName, oldValue, newValue);\n    if (attrName === MediaUIAttributes.MEDIA_IS_FULLSCREEN) {\n      updateAriaLabel(this);\n    }\n  }\n  /**\n   * @type {string | undefined} Fullscreen unavailability state\n   */\n  get mediaFullscreenUnavailable() {\n    return getStringAttr(this, MediaUIAttributes.MEDIA_FULLSCREEN_UNAVAILABLE);\n  }\n  set mediaFullscreenUnavailable(value) {\n    setStringAttr(this, MediaUIAttributes.MEDIA_FULLSCREEN_UNAVAILABLE, value);\n  }\n  /**\n   * @type {boolean} Whether fullscreen is available\n   */\n  get mediaIsFullscreen() {\n    return getBooleanAttr(this, MediaUIAttributes.MEDIA_IS_FULLSCREEN);\n  }\n  set mediaIsFullscreen(value) {\n    setBooleanAttr(this, MediaUIAttributes.MEDIA_IS_FULLSCREEN, value);\n  }\n  handleClick() {\n    const eventName = this.mediaIsFullscreen ? MediaUIEvents.MEDIA_EXIT_FULLSCREEN_REQUEST : MediaUIEvents.MEDIA_ENTER_FULLSCREEN_REQUEST;\n    this.dispatchEvent(new globalThis.CustomEvent(eventName, {\n      composed: true,\n      bubbles: true\n    }));\n  }\n}\nMediaFullscreenButton.getSlotTemplateHTML = getSlotTemplateHTML;\nMediaFullscreenButton.getTooltipContentHTML = getTooltipContentHTML;\nif (!globalThis.customElements.get(\"media-fullscreen-button\")) {\n  globalThis.customElements.define(\"media-fullscreen-button\", MediaFullscreenButton);\n}\nvar media_fullscreen_button_default = MediaFullscreenButton;\nexport { media_fullscreen_button_default as default };","map":{"version":3,"names":["MediaChromeButton","globalThis","MediaUIEvents","MediaUIAttributes","t","getBooleanAttr","getStringAttr","setBooleanAttr","setStringAttr","enterFullscreenIcon","exitFullscreenIcon","getSlotTemplateHTML","_attrs","MEDIA_IS_FULLSCREEN","getTooltipContentHTML","updateAriaLabel","el","label","mediaIsFullscreen","setAttribute","MediaFullscreenButton","observedAttributes","MEDIA_FULLSCREEN_UNAVAILABLE","connectedCallback","attributeChangedCallback","attrName","oldValue","newValue","mediaFullscreenUnavailable","value","handleClick","eventName","MEDIA_EXIT_FULLSCREEN_REQUEST","MEDIA_ENTER_FULLSCREEN_REQUEST","dispatchEvent","CustomEvent","composed","bubbles","customElements","get","define","media_fullscreen_button_default","default"],"sources":["/Users/monawiebkeurban/Documents/portfolio/node_modules/media-chrome/dist/media-fullscreen-button.js"],"sourcesContent":["import { MediaChromeButton } from \"./media-chrome-button.js\";\nimport { globalThis } from \"./utils/server-safe-globals.js\";\nimport { MediaUIEvents, MediaUIAttributes } from \"./constants.js\";\nimport { t } from \"./utils/i18n.js\";\nimport {\n  getBooleanAttr,\n  getStringAttr,\n  setBooleanAttr,\n  setStringAttr\n} from \"./utils/element-utils.js\";\nconst enterFullscreenIcon = `<svg aria-hidden=\"true\" viewBox=\"0 0 26 24\">\n  <path d=\"M16 3v2.5h3.5V9H22V3h-6ZM4 9h2.5V5.5H10V3H4v6Zm15.5 9.5H16V21h6v-6h-2.5v3.5ZM6.5 15H4v6h6v-2.5H6.5V15Z\"/>\n</svg>`;\nconst exitFullscreenIcon = `<svg aria-hidden=\"true\" viewBox=\"0 0 26 24\">\n  <path d=\"M18.5 6.5V3H16v6h6V6.5h-3.5ZM16 21h2.5v-3.5H22V15h-6v6ZM4 17.5h3.5V21H10v-6H4v2.5Zm3.5-11H4V9h6V3H7.5v3.5Z\"/>\n</svg>`;\nfunction getSlotTemplateHTML(_attrs) {\n  return (\n    /*html*/\n    `\n    <style>\n      :host([${MediaUIAttributes.MEDIA_IS_FULLSCREEN}]) slot[name=icon] slot:not([name=exit]) {\n        display: none !important;\n      }\n\n      ${/* Double negative, but safer if display doesn't equal 'block' */\n    \"\"}\n      :host(:not([${MediaUIAttributes.MEDIA_IS_FULLSCREEN}])) slot[name=icon] slot:not([name=enter]) {\n        display: none !important;\n      }\n\n      :host([${MediaUIAttributes.MEDIA_IS_FULLSCREEN}]) slot[name=tooltip-enter],\n      :host(:not([${MediaUIAttributes.MEDIA_IS_FULLSCREEN}])) slot[name=tooltip-exit] {\n        display: none;\n      }\n    </style>\n\n    <slot name=\"icon\">\n      <slot name=\"enter\">${enterFullscreenIcon}</slot>\n      <slot name=\"exit\">${exitFullscreenIcon}</slot>\n    </slot>\n  `\n  );\n}\nfunction getTooltipContentHTML() {\n  return (\n    /*html*/\n    `\n    <slot name=\"tooltip-enter\">${t(\"Enter fullscreen mode\")}</slot>\n    <slot name=\"tooltip-exit\">${t(\"Exit fullscreen mode\")}</slot>\n  `\n  );\n}\nconst updateAriaLabel = (el) => {\n  const label = el.mediaIsFullscreen ? t(\"exit fullscreen mode\") : t(\"enter fullscreen mode\");\n  el.setAttribute(\"aria-label\", label);\n};\nclass MediaFullscreenButton extends MediaChromeButton {\n  static get observedAttributes() {\n    return [\n      ...super.observedAttributes,\n      MediaUIAttributes.MEDIA_IS_FULLSCREEN,\n      MediaUIAttributes.MEDIA_FULLSCREEN_UNAVAILABLE\n    ];\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    updateAriaLabel(this);\n  }\n  attributeChangedCallback(attrName, oldValue, newValue) {\n    super.attributeChangedCallback(attrName, oldValue, newValue);\n    if (attrName === MediaUIAttributes.MEDIA_IS_FULLSCREEN) {\n      updateAriaLabel(this);\n    }\n  }\n  /**\n   * @type {string | undefined} Fullscreen unavailability state\n   */\n  get mediaFullscreenUnavailable() {\n    return getStringAttr(this, MediaUIAttributes.MEDIA_FULLSCREEN_UNAVAILABLE);\n  }\n  set mediaFullscreenUnavailable(value) {\n    setStringAttr(this, MediaUIAttributes.MEDIA_FULLSCREEN_UNAVAILABLE, value);\n  }\n  /**\n   * @type {boolean} Whether fullscreen is available\n   */\n  get mediaIsFullscreen() {\n    return getBooleanAttr(this, MediaUIAttributes.MEDIA_IS_FULLSCREEN);\n  }\n  set mediaIsFullscreen(value) {\n    setBooleanAttr(this, MediaUIAttributes.MEDIA_IS_FULLSCREEN, value);\n  }\n  handleClick() {\n    const eventName = this.mediaIsFullscreen ? MediaUIEvents.MEDIA_EXIT_FULLSCREEN_REQUEST : MediaUIEvents.MEDIA_ENTER_FULLSCREEN_REQUEST;\n    this.dispatchEvent(\n      new globalThis.CustomEvent(eventName, { composed: true, bubbles: true })\n    );\n  }\n}\nMediaFullscreenButton.getSlotTemplateHTML = getSlotTemplateHTML;\nMediaFullscreenButton.getTooltipContentHTML = getTooltipContentHTML;\nif (!globalThis.customElements.get(\"media-fullscreen-button\")) {\n  globalThis.customElements.define(\n    \"media-fullscreen-button\",\n    MediaFullscreenButton\n  );\n}\nvar media_fullscreen_button_default = MediaFullscreenButton;\nexport {\n  media_fullscreen_button_default as default\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}