{"ast":null,"code":"class EventTarget {\n  addEventListener() {}\n  removeEventListener() {}\n  dispatchEvent() {\n    return true;\n  }\n}\nclass Node extends EventTarget {}\nclass Element extends Node {\n  constructor() {\n    super(...arguments);\n    this.role = null;\n  }\n}\nclass ResizeObserver {\n  observe() {}\n  unobserve() {}\n  disconnect() {}\n}\nconst documentShim = {\n  createElement: function () {\n    return new globalThisShim.HTMLElement();\n  },\n  createElementNS: function () {\n    return new globalThisShim.HTMLElement();\n  },\n  addEventListener() {},\n  removeEventListener() {},\n  dispatchEvent(_event) {\n    return false;\n  }\n};\nconst globalThisShim = {\n  ResizeObserver,\n  document: documentShim,\n  Node,\n  Element,\n  HTMLElement: class HTMLElement extends Element {\n    constructor() {\n      super(...arguments);\n      this.innerHTML = \"\";\n    }\n    get content() {\n      return new globalThisShim.DocumentFragment();\n    }\n  },\n  DocumentFragment: class DocumentFragment extends EventTarget {},\n  customElements: {\n    get: function () {},\n    define: function () {},\n    whenDefined: function () {}\n  },\n  localStorage: {\n    getItem(_key) {\n      return null;\n    },\n    setItem(_key, _value) {},\n    removeItem(_key) {}\n  },\n  CustomEvent: function CustomEvent() {},\n  getComputedStyle: function () {},\n  navigator: {\n    languages: [],\n    get userAgent() {\n      return \"\";\n    }\n  },\n  matchMedia(media) {\n    return {\n      matches: false,\n      media\n    };\n  },\n  DOMParser: class DOMParser {\n    parseFromString(string, _contentType) {\n      return {\n        body: {\n          textContent: string\n        }\n      };\n    }\n  }\n};\nconst isServer = typeof window === \"undefined\" || typeof window.customElements === \"undefined\";\nconst isShimmed = Object.keys(globalThisShim).every(key => key in globalThis);\nconst GlobalThis = isServer && !isShimmed ? globalThisShim : globalThis;\nconst Document = isServer && !isShimmed ? documentShim : globalThis.document;\nexport { Document, GlobalThis, Document as document, GlobalThis as globalThis, isServer };","map":null,"metadata":{},"sourceType":"module"}