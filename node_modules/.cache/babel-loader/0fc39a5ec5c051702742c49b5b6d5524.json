{"ast":null,"code":"const EMBED_BASE = \"https://www.youtube.com/embed\";\nconst EMBED_BASE_NOCOOKIE = \"https://www.youtube-nocookie.com/embed\";\nconst API_URL = \"https://www.youtube.com/iframe_api\";\nconst API_GLOBAL = \"YT\";\nconst API_GLOBAL_READY = \"onYouTubeIframeAPIReady\";\nconst VIDEO_MATCH_SRC = /(?:youtu\\.be\\/|youtube(?:-nocookie)?\\.com\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=|shorts\\/|live\\/))((\\w|-){11})/;\nconst PLAYLIST_MATCH_SRC = /(?:youtu\\.be\\/|youtube(?:-nocookie)?\\.com\\/.*?[?&]list=)([\\w_-]+)/;\nfunction getTemplateHTML(attrs) {\n  let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const iframeAttrs = {\n    src: serializeIframeUrl(attrs, props),\n    frameborder: 0,\n    width: \"100%\",\n    height: \"100%\",\n    allow: \"accelerometer; fullscreen; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n  };\n  if (props.config) {\n    iframeAttrs[\"data-config\"] = JSON.stringify(props.config);\n  }\n  return /*html*/`\n    <style>\n      :host {\n        display: inline-block;\n        line-height: 0;\n        position: relative;\n        min-width: 300px;\n        min-height: 150px;\n      }\n      iframe {\n        position: absolute;\n        top: 0;\n        left: 0;\n      }\n    </style>\n    <iframe${serializeAttributes(iframeAttrs)}></iframe>\n  `;\n}\nfunction serializeIframeUrl(attrs, props) {\n  if (!attrs.src) return;\n  const embedBase = attrs.src.includes(\"-nocookie\") ? EMBED_BASE_NOCOOKIE : EMBED_BASE;\n  const params = {\n    // ?controls=true is enabled by default in the iframe\n    controls: attrs.controls === \"\" ? null : 0,\n    autoplay: attrs.autoplay,\n    loop: attrs.loop,\n    mute: attrs.muted,\n    playsinline: attrs.playsinline,\n    preload: attrs.preload ?? \"metadata\",\n    // https://developers.google.com/youtube/player_parameters#Parameters\n    // origin: globalThis.location?.origin,\n    enablejsapi: 1,\n    showinfo: 0,\n    rel: 0,\n    iv_load_policy: 3,\n    modestbranding: 1,\n    ...props.config\n  };\n  if (VIDEO_MATCH_SRC.test(attrs.src)) {\n    const matches2 = attrs.src.match(VIDEO_MATCH_SRC);\n    const srcId = matches2 && matches2[1];\n    return `${embedBase}/${srcId}?${serialize(params)}`;\n  }\n  const matches = attrs.src.match(PLAYLIST_MATCH_SRC);\n  const playlistId = matches && matches[1];\n  const extendedParams = {\n    listType: \"playlist\",\n    list: playlistId,\n    ...params\n  };\n  return `${embedBase}?${serialize(extendedParams)}`;\n}\nclass YoutubeVideoElement extends (globalThis.HTMLElement ?? class {}) {\n  static getTemplateHTML = getTemplateHTML;\n  static shadowRootOptions = {\n    mode: \"open\"\n  };\n  static observedAttributes = [\"autoplay\", \"controls\", \"crossorigin\", \"loop\", \"muted\", \"playsinline\", \"poster\", \"preload\", \"src\"];\n  loadComplete = new PublicPromise();\n  #loadRequested;\n  #hasLoaded;\n  #readyState = 0;\n  #seeking = false;\n  #seekComplete;\n  isLoaded = false;\n  #error = null;\n  #config = null;\n  constructor() {\n    super();\n    this.#upgradeProperty(\"config\");\n  }\n  get config() {\n    return this.#config;\n  }\n  set config(value) {\n    this.#config = value;\n  }\n  async load() {\n    if (this.#loadRequested) return;\n    if (!this.shadowRoot) {\n      this.attachShadow({\n        mode: \"open\"\n      });\n    }\n    const isFirstLoad = !this.#hasLoaded;\n    if (this.#hasLoaded) {\n      this.loadComplete = new PublicPromise();\n      this.isLoaded = false;\n    }\n    this.#hasLoaded = true;\n    await (this.#loadRequested = Promise.resolve());\n    this.#loadRequested = null;\n    this.#readyState = 0;\n    this.dispatchEvent(new Event(\"emptied\"));\n    let oldApi = this.api;\n    this.api = null;\n    if (!this.src) {\n      oldApi == null ? void 0 : oldApi.destroy();\n      return;\n    }\n    this.dispatchEvent(new Event(\"loadstart\"));\n    let iframe = this.shadowRoot.querySelector(\"iframe\");\n    let attrs = namedNodeMapToObject(this.attributes);\n    if (isFirstLoad && iframe) {\n      this.#config = JSON.parse(iframe.getAttribute(\"data-config\") || \"{}\");\n    }\n    if (!(iframe == null ? void 0 : iframe.src) || iframe.src !== serializeIframeUrl(attrs, this)) {\n      this.shadowRoot.innerHTML = getTemplateHTML(attrs, this);\n      iframe = this.shadowRoot.querySelector(\"iframe\");\n    }\n    const YT = await loadScript(API_URL, API_GLOBAL, API_GLOBAL_READY);\n    this.api = new YT.Player(iframe, {\n      events: {\n        onReady: () => {\n          this.#readyState = 1;\n          this.dispatchEvent(new Event(\"loadedmetadata\"));\n          this.dispatchEvent(new Event(\"durationchange\"));\n          this.dispatchEvent(new Event(\"volumechange\"));\n          this.dispatchEvent(new Event(\"loadcomplete\"));\n          this.isLoaded = true;\n          this.loadComplete.resolve();\n        },\n        onError: error => {\n          console.error(error);\n          this.#error = {\n            code: error.data,\n            message: `YouTube iframe player error #${error.data}; visit https://developers.google.com/youtube/iframe_api_reference#onError for the full error message.`\n          };\n          this.dispatchEvent(new Event(\"error\"));\n        }\n      }\n    });\n    let playFired = false;\n    this.api.addEventListener(\"onStateChange\", event => {\n      var _a;\n      const state = event.data;\n      if (state === YT.PlayerState.PLAYING || state === YT.PlayerState.BUFFERING) {\n        if (!playFired) {\n          playFired = true;\n          this.dispatchEvent(new Event(\"play\"));\n        }\n      }\n      if (state === YT.PlayerState.PLAYING) {\n        if (this.seeking) {\n          this.#seeking = false;\n          (_a = this.#seekComplete) == null ? void 0 : _a.resolve();\n          this.dispatchEvent(new Event(\"seeked\"));\n        }\n        this.#readyState = 3;\n        this.dispatchEvent(new Event(\"playing\"));\n      } else if (state === YT.PlayerState.PAUSED) {\n        const diff = Math.abs(this.currentTime - lastCurrentTime);\n        if (!this.seeking && diff > 0.1) {\n          this.#seeking = true;\n          this.dispatchEvent(new Event(\"seeking\"));\n        }\n        playFired = false;\n        this.dispatchEvent(new Event(\"pause\"));\n      }\n      if (state === YT.PlayerState.ENDED) {\n        playFired = false;\n        this.dispatchEvent(new Event(\"pause\"));\n        this.dispatchEvent(new Event(\"ended\"));\n        if (this.loop) {\n          this.play();\n        }\n      }\n    });\n    this.api.addEventListener(\"onPlaybackRateChange\", () => {\n      this.dispatchEvent(new Event(\"ratechange\"));\n    });\n    this.api.addEventListener(\"onVolumeChange\", () => {\n      this.dispatchEvent(new Event(\"volumechange\"));\n    });\n    this.api.addEventListener(\"onVideoProgress\", () => {\n      this.dispatchEvent(new Event(\"timeupdate\"));\n    });\n    await this.loadComplete;\n    let lastCurrentTime = 0;\n    setInterval(() => {\n      var _a;\n      const diff = Math.abs(this.currentTime - lastCurrentTime);\n      const bufferedEnd = this.buffered.end(this.buffered.length - 1);\n      if (this.seeking && bufferedEnd > 0.1) {\n        this.#seeking = false;\n        (_a = this.#seekComplete) == null ? void 0 : _a.resolve();\n        this.dispatchEvent(new Event(\"seeked\"));\n      } else if (!this.seeking && diff > 0.1) {\n        this.#seeking = true;\n        this.dispatchEvent(new Event(\"seeking\"));\n      }\n      lastCurrentTime = this.currentTime;\n    }, 50);\n    let lastBufferedEnd;\n    const progressInterval = setInterval(() => {\n      const bufferedEnd = this.buffered.end(this.buffered.length - 1);\n      if (bufferedEnd >= this.duration) {\n        clearInterval(progressInterval);\n        this.#readyState = 4;\n      }\n      if (lastBufferedEnd != bufferedEnd) {\n        lastBufferedEnd = bufferedEnd;\n        this.dispatchEvent(new Event(\"progress\"));\n      }\n    }, 100);\n  }\n  async attributeChangedCallback(attrName, oldValue, newValue) {\n    if (oldValue === newValue) return;\n    switch (attrName) {\n      case \"src\":\n      case \"autoplay\":\n      case \"controls\":\n      case \"loop\":\n      case \"playsinline\":\n        {\n          this.load();\n        }\n    }\n  }\n  async play() {\n    var _a;\n    this.#seekComplete = null;\n    await this.loadComplete;\n    (_a = this.api) == null ? void 0 : _a.playVideo();\n    return createPlayPromise(this);\n  }\n  async pause() {\n    var _a;\n    await this.loadComplete;\n    return (_a = this.api) == null ? void 0 : _a.pauseVideo();\n  }\n  get seeking() {\n    return this.#seeking;\n  }\n  get readyState() {\n    return this.#readyState;\n  }\n  get src() {\n    return this.getAttribute(\"src\");\n  }\n  set src(val) {\n    if (this.src == val) return;\n    this.setAttribute(\"src\", val);\n  }\n  get error() {\n    return this.#error;\n  }\n  /* onStateChange\n    -1 (unstarted)\n    0 (ended)\n    1 (playing)\n    2 (paused)\n    3 (buffering)\n    5 (video cued).\n  */\n  get paused() {\n    var _a, _b;\n    if (!this.isLoaded) return !this.autoplay;\n    return [-1, 0, 2, 5].includes((_b = (_a = this.api) == null ? void 0 : _a.getPlayerState) == null ? void 0 : _b.call(_a));\n  }\n  get duration() {\n    var _a, _b;\n    return ((_b = (_a = this.api) == null ? void 0 : _a.getDuration) == null ? void 0 : _b.call(_a)) ?? NaN;\n  }\n  get autoplay() {\n    return this.hasAttribute(\"autoplay\");\n  }\n  set autoplay(val) {\n    if (this.autoplay == val) return;\n    this.toggleAttribute(\"autoplay\", Boolean(val));\n  }\n  get buffered() {\n    var _a, _b;\n    if (!this.isLoaded) return createTimeRanges();\n    const progress = ((_a = this.api) == null ? void 0 : _a.getVideoLoadedFraction()) * ((_b = this.api) == null ? void 0 : _b.getDuration());\n    if (progress > 0) {\n      return createTimeRanges(0, progress);\n    }\n    return createTimeRanges();\n  }\n  get controls() {\n    return this.hasAttribute(\"controls\");\n  }\n  set controls(val) {\n    if (this.controls == val) return;\n    this.toggleAttribute(\"controls\", Boolean(val));\n  }\n  get currentTime() {\n    var _a, _b;\n    return ((_b = (_a = this.api) == null ? void 0 : _a.getCurrentTime) == null ? void 0 : _b.call(_a)) ?? 0;\n  }\n  set currentTime(val) {\n    if (this.currentTime == val) return;\n    this.#seekComplete = new PublicPromise();\n    this.loadComplete.then(() => {\n      var _a, _b;\n      (_a = this.api) == null ? void 0 : _a.seekTo(val, true);\n      if (this.paused) {\n        (_b = this.#seekComplete) == null ? void 0 : _b.then(() => {\n          var _a2;\n          if (!this.#seekComplete) return;\n          (_a2 = this.api) == null ? void 0 : _a2.pauseVideo();\n        });\n      }\n    });\n  }\n  set defaultMuted(val) {\n    if (this.defaultMuted == val) return;\n    this.toggleAttribute(\"muted\", Boolean(val));\n  }\n  get defaultMuted() {\n    return this.hasAttribute(\"muted\");\n  }\n  get loop() {\n    return this.hasAttribute(\"loop\");\n  }\n  set loop(val) {\n    if (this.loop == val) return;\n    this.toggleAttribute(\"loop\", Boolean(val));\n  }\n  set muted(val) {\n    if (this.muted == val) return;\n    this.loadComplete.then(() => {\n      var _a, _b;\n      val ? (_a = this.api) == null ? void 0 : _a.mute() : (_b = this.api) == null ? void 0 : _b.unMute();\n    });\n  }\n  get muted() {\n    var _a, _b;\n    if (!this.isLoaded) return this.defaultMuted;\n    return (_b = (_a = this.api) == null ? void 0 : _a.isMuted) == null ? void 0 : _b.call(_a);\n  }\n  get playbackRate() {\n    var _a, _b;\n    return ((_b = (_a = this.api) == null ? void 0 : _a.getPlaybackRate) == null ? void 0 : _b.call(_a)) ?? 1;\n  }\n  set playbackRate(val) {\n    if (this.playbackRate == val) return;\n    this.loadComplete.then(() => {\n      var _a;\n      (_a = this.api) == null ? void 0 : _a.setPlaybackRate(val);\n    });\n  }\n  get playsInline() {\n    return this.hasAttribute(\"playsinline\");\n  }\n  set playsInline(val) {\n    if (this.playsInline == val) return;\n    this.toggleAttribute(\"playsinline\", Boolean(val));\n  }\n  get poster() {\n    return this.getAttribute(\"poster\");\n  }\n  set poster(val) {\n    if (this.poster == val) return;\n    this.setAttribute(\"poster\", `${val}`);\n  }\n  set volume(val) {\n    if (this.volume == val) return;\n    this.loadComplete.then(() => {\n      var _a;\n      (_a = this.api) == null ? void 0 : _a.setVolume(val * 100);\n    });\n  }\n  get volume() {\n    var _a;\n    if (!this.isLoaded) return 1;\n    return ((_a = this.api) == null ? void 0 : _a.getVolume()) / 100;\n  }\n  // This is a pattern to update property values that are set before\n  // the custom element is upgraded.\n  // https://web.dev/custom-elements-best-practices/#make-properties-lazy\n  #upgradeProperty(prop) {\n    if (Object.prototype.hasOwnProperty.call(this, prop)) {\n      const value = this[prop];\n      delete this[prop];\n      this[prop] = value;\n    }\n  }\n}\nfunction serializeAttributes(attrs) {\n  let html = \"\";\n  for (const key in attrs) {\n    const value = attrs[key];\n    if (value === \"\") html += ` ${escapeHtml(key)}`;else html += ` ${escapeHtml(key)}=\"${escapeHtml(`${value}`)}\"`;\n  }\n  return html;\n}\nfunction escapeHtml(str) {\n  return str.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&apos;\").replace(/`/g, \"&#x60;\");\n}\nfunction serialize(props) {\n  return String(new URLSearchParams(boolToBinary(props)));\n}\nfunction boolToBinary(props) {\n  let p = {};\n  for (let key in props) {\n    let val = props[key];\n    if (val === true || val === \"\") p[key] = 1;else if (val === false) p[key] = 0;else if (val != null) p[key] = val;\n  }\n  return p;\n}\nfunction namedNodeMapToObject(namedNodeMap) {\n  let obj = {};\n  for (let attr of namedNodeMap) {\n    obj[attr.name] = attr.value;\n  }\n  return obj;\n}\nconst loadScriptCache = {};\nasync function loadScript(src, globalName, readyFnName) {\n  if (loadScriptCache[src]) return loadScriptCache[src];\n  if (globalName && self[globalName]) {\n    await delay(0);\n    return self[globalName];\n  }\n  return loadScriptCache[src] = new Promise(function (resolve, reject) {\n    const script = document.createElement(\"script\");\n    script.src = src;\n    const ready = () => resolve(self[globalName]);\n    if (readyFnName) self[readyFnName] = ready;\n    script.onload = () => !readyFnName && ready();\n    script.onerror = reject;\n    document.head.append(script);\n  });\n}\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\nfunction promisify(fn) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return new Promise(resolve => {\n      fn(...args, function () {\n        for (var _len2 = arguments.length, res = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          res[_key2] = arguments[_key2];\n        }\n        if (res.length > 1) resolve(res);else resolve(res[0]);\n      });\n    });\n  };\n}\nfunction createPlayPromise(player) {\n  return promisify((event, cb) => {\n    let fn;\n    player.addEventListener(event, fn = () => {\n      player.removeEventListener(event, fn);\n      cb();\n    });\n  })(\"playing\");\n}\nclass PublicPromise extends Promise {\n  constructor() {\n    let executor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : () => {};\n    let res, rej;\n    super((resolve, reject) => {\n      executor(resolve, reject);\n      res = resolve;\n      rej = reject;\n    });\n    this.resolve = res;\n    this.reject = rej;\n  }\n}\nfunction createTimeRanges(start, end) {\n  if (Array.isArray(start)) {\n    return createTimeRangesObj(start);\n  } else if (start == null || end == null || start === 0 && end === 0) {\n    return createTimeRangesObj([[0, 0]]);\n  }\n  return createTimeRangesObj([[start, end]]);\n}\nfunction createTimeRangesObj(ranges) {\n  Object.defineProperties(ranges, {\n    start: {\n      value: i => ranges[i][0]\n    },\n    end: {\n      value: i => ranges[i][1]\n    }\n  });\n  return ranges;\n}\nif (globalThis.customElements && !globalThis.customElements.get(\"youtube-video\")) {\n  globalThis.customElements.define(\"youtube-video\", YoutubeVideoElement);\n}\nvar youtube_video_element_default = YoutubeVideoElement;\nexport { youtube_video_element_default as default };","map":null,"metadata":{},"sourceType":"module"}