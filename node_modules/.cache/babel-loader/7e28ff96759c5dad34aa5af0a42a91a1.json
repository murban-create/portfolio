{"ast":null,"code":"var f = e => {\n  throw TypeError(e);\n};\nvar g = (e, o, t) => o.has(e) || f(\"Cannot \" + t);\nvar u = (e, o, t) => (g(e, o, \"read from private field\"), t ? t.call(e) : o.get(e)),\n  m = (e, o, t) => o.has(e) ? f(\"Cannot add the same private member more than once\") : o instanceof WeakSet ? o.add(e) : o.set(e, t),\n  d = (e, o, t, l) => (g(e, o, \"write to private field\"), l ? l.call(e, t) : o.set(e, t), t);\nvar s = class {\n  addEventListener() {}\n  removeEventListener() {}\n  dispatchEvent(o) {\n    return !0;\n  }\n};\nif (typeof DocumentFragment == \"undefined\") {\n  class e extends s {}\n  globalThis.DocumentFragment = e;\n}\nvar n = class extends s {},\n  p = class extends s {},\n  x = {\n    get(e) {},\n    define(e, o, t) {},\n    getName(e) {\n      return null;\n    },\n    upgrade(e) {},\n    whenDefined(e) {\n      return Promise.resolve(n);\n    }\n  },\n  a,\n  h = class {\n    constructor(o) {\n      let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      m(this, a);\n      d(this, a, t == null ? void 0 : t.detail);\n    }\n    get detail() {\n      return u(this, a);\n    }\n    initCustomEvent() {}\n  };\na = new WeakMap();\nfunction C(e, o) {\n  return new n();\n}\nvar y = {\n    document: {\n      createElement: C\n    },\n    DocumentFragment,\n    customElements: x,\n    CustomEvent: h,\n    EventTarget: s,\n    HTMLElement: n,\n    HTMLVideoElement: p\n  },\n  b = typeof window == \"undefined\" || typeof globalThis.customElements == \"undefined\",\n  c = b ? y : globalThis,\n  k = b ? y.document : globalThis.document;\nimport { MuxVideoBaseElement as T } from \"@mux/mux-video/base\";\nimport { CastableMediaMixin as E } from \"castable-video/castable-mixin.js\";\nimport { MediaTracksMixin as D } from \"media-tracks\";\nexport * from \"@mux/mux-video/base\";\nvar r,\n  i = class extends E(D(T)) {\n    constructor() {\n      super(...arguments);\n      m(this, r);\n    }\n    get autoplay() {\n      let t = this.getAttribute(\"autoplay\");\n      return t === null ? !1 : t === \"\" ? !0 : t;\n    }\n    set autoplay(t) {\n      let l = this.autoplay;\n      t !== l && (t ? this.setAttribute(\"autoplay\", typeof t == \"string\" ? t : \"\") : this.removeAttribute(\"autoplay\"));\n    }\n    get muxCastCustomData() {\n      return {\n        mux: {\n          playbackId: this.playbackId,\n          minResolution: this.minResolution,\n          maxResolution: this.maxResolution,\n          renditionOrder: this.renditionOrder,\n          customDomain: this.customDomain,\n          tokens: {\n            drm: this.drmToken\n          },\n          envKey: this.envKey,\n          metadata: this.metadata,\n          disableCookies: this.disableCookies,\n          disableTracking: this.disableTracking,\n          beaconCollectionDomain: this.beaconCollectionDomain,\n          startTime: this.startTime,\n          preferCmcd: this.preferCmcd\n        }\n      };\n    }\n    get castCustomData() {\n      var t;\n      return (t = u(this, r)) != null ? t : this.muxCastCustomData;\n    }\n    set castCustomData(t) {\n      d(this, r, t);\n    }\n  };\nr = new WeakMap();\nc.customElements.get(\"mux-video\") || (c.customElements.define(\"mux-video\", i), c.MuxVideoElement = i);\nvar F = i;\nexport { F as default };","map":{"version":3,"mappings":";;;;;;;AAEA,IAAMA,IAAN,MAAkB;EAChBC,mBAAmB,CAAC;EACpBC,sBAAsB,CAAC;EACvBC,cAAcC,GAAe;IAC3B,OAAO,EACT;EAAA;AACF;AAGA,IAAI,OAAOC,oBAAqB,aAAa;EAC3C,MAAMA,UAAyBL,CAAY;EAE3CM,WAAWD,mBAAmBA,CAChC;AAAA;AAEA,IAAME,IAAN,cAA0BP,CAAY,GAAC;EACjCQ,IAAN,cAA+BR,CAAY,GAAC;EAEtCS,IAAwC;IAC5CC,IAAIC,GAAe,CAEnB;IACAC,OAAOD,GAAOE,GAAcC,GAAU,CAAC;IACvCC,QAAQF,GAAc;MACpB,OAAO,IACT;IAAA;IACAG,QAAQC,GAAO,CAAC;IAChBC,YAAYP,GAAO;MACjB,OAAOQ,QAAQC,QAAQb,CAAkD,CAC3E;IAAA;EACF;EAhCAc;EAkCMC,IAAN,MAAkB;IAKhBC,YAAYC,GAAuD;MAAA,IAArCC,wEAAiC,CAAC;MAJhEC;MAMEC,QAAKN,GAAUI,uBAAeG,OAChC;IAAA;IANA,IAAIA,SAAS;MACX,OAAOC,QAAKR,EACd;IAAA;IAKAS,kBAAkB,CAAC;EACrB;AATET;AAWF,SAASU,EAAcC,GAAkBlB,GAAgD;EACvF,OAAO,IAAIP,CACb,CADaA,CACb;AAAA;AAEA,IAAM0B,IAAiB;IACrBC,UAAU;MACRH;IACF;IACA1B;IACAI;IACAa;IACAtB;IACAO;IACAC;EACF;EAOM2B,IAAW,OAAOC,UAAW,eAAe,OAAO9B,WAAWG,kBAAmB;EAEjF4B,IAAkCF,IAAWF,IAAiB3B;EAC9DgC,IAA8BH,IAAWF,EAAeC,WAAW5B,WAAW4B;ACpEpF,SAASK,gCAA2B;AACpC,SAASC,+BAA0B;AACnC,SAASC,6BAAwB;AAEjC,cAAc;AANd;EASMC,IAAN,cAA8BF,EAAmBC,EAAiBF,CAAmB,CAAC,CAAE;IAAxFhB;MAAA;MAkCEG;IAAAiB;IA9BA,IAAIC,WAAqB;MACvB,IAAMC,IAAO,KAAKC,aAAa,UAAU;MAEzC,OAAID,MAAS,OACJ,KACEA,MAAS,KACX,KAEAA,CAEX;IAAA;IAGA,IAAID,SAASG,GAAe;MAC1B,IAAMC,IAAa,KAAKJ;MACpBG,MAAQC,MAIRD,IACF,KAAKE,aAAa,YAAY,OAAOF,KAAQ,WAAWA,IAAM,EAAE,IAEhE,KAAKG,gBAAgB,UAAU,EAEnC;IAAA;IAQA,IAAIC,oBAAoB;MACtB,OAAO;QACLC,KAAK;UAEHC,YAAY,KAAKA;UACjBC,eAAe,KAAKA;UACpBC,eAAe,KAAKA;UACpBC,gBAAgB,KAAKA;UACrBC,cAAc,KAAKA;UAEnBC,QAAQ;YACNC,KAAK,KAAKC;UACZ;UAEAC,QAAQ,KAAKA;UACbC,UAAU,KAAKA;UACfC,gBAAgB,KAAKA;UACrBC,iBAAiB,KAAKA;UACtBC,wBAAwB,KAAKA;UAE7BC,WAAW,KAAKA;UAEhBC,YAAY,KAAKA;QACnB;MACF,CACF;IAAA;IAEA,IAAIC,iBAAiB;MAxEvB;MAyEI,QAAOC,YAAK1B,OAAL,WAAwB,KAAKQ,iBACtC;IAAA;IAEA,IAAIiB,eAAerB,GAAsC;MACvDpB,QAAKgB,GAAkBI,EACzB;IAAA;EACF;AApCEJ;AA2CGN,EAAW5B,eAAeC,IAAI,WAAW,MAC5C2B,EAAW5B,eAAeG,OAAO,aAAa8B,CAAe,GAC7DL,EAAWK,kBAAkBA;AAG/B,IAAO4B,IAAQ5B;AAAAA","names":["EventTarget","addEventListener","removeEventListener","dispatchEvent","_event","DocumentFragment","globalThis","HTMLElement","HTMLVideoElement","customElements","get","_name","define","_constructor","_options","getName","upgrade","_root","whenDefined","Promise","resolve","_detail","CustomEvent","constructor","_typeArg","eventInitDict","__privateAdd","__privateSet","detail","__privateGet","initCustomEvent","createElement","_tagName","globalThisShim","document","isServer","window","internalGlobalThis","internalDocument","MuxVideoBaseElement","CastableMediaMixin","MediaTracksMixin","MuxVideoElement","_castCustomData","autoplay","attr","getAttribute","val","currentVal","setAttribute","removeAttribute","muxCastCustomData","mux","playbackId","minResolution","maxResolution","renditionOrder","customDomain","tokens","drm","drmToken","envKey","metadata","disableCookies","disableTracking","beaconCollectionDomain","startTime","preferCmcd","castCustomData","_a","index_default"],"sources":["/Users/monawiebkeurban/Documents/portfolio/node_modules/@mux/mux-video/src/polyfills/index.ts","/Users/monawiebkeurban/Documents/portfolio/node_modules/@mux/mux-video/src/index.ts"],"sourcesContent":["/* eslint @typescript-eslint/no-empty-function: \"off\" */\n\nclass EventTarget {\n  addEventListener() {}\n  removeEventListener() {}\n  dispatchEvent(_event: Event) {\n    return true;\n  }\n}\n\n// @github/template-parts requires DocumentFragment to be available on globalThis for SSR\nif (typeof DocumentFragment === 'undefined') {\n  class DocumentFragment extends EventTarget {}\n  // @ts-ignore\n  globalThis.DocumentFragment = DocumentFragment;\n}\n\nclass HTMLElement extends EventTarget {}\nclass HTMLVideoElement extends EventTarget {}\n\nconst customElements: CustomElementRegistry = {\n  get(_name: string) {\n    return undefined;\n  },\n  define(_name, _constructor, _options) {},\n  getName(_constructor) {\n    return null;\n  },\n  upgrade(_root) {},\n  whenDefined(_name) {\n    return Promise.resolve(HTMLElement as unknown as CustomElementConstructor);\n  },\n};\n\nclass CustomEvent {\n  #detail;\n  get detail() {\n    return this.#detail;\n  }\n  constructor(_typeArg: string, eventInitDict: CustomEventInit = {}) {\n    // super(typeArg, eventInitDict);\n    this.#detail = eventInitDict?.detail;\n  }\n  initCustomEvent() {}\n}\n\nfunction createElement(_tagName: string, _options?: ElementCreationOptions): HTMLElement {\n  return new HTMLElement();\n}\n\nconst globalThisShim = {\n  document: {\n    createElement,\n  },\n  DocumentFragment,\n  customElements,\n  CustomEvent,\n  EventTarget,\n  HTMLElement,\n  HTMLVideoElement,\n};\n\n// const isServer = typeof window === 'undefined' || typeof globalThis.customElements === 'undefined';\n// const GlobalThis = isServer ? globalThisShim : globalThis;\n// const Document = isServer ? globalThisShim.document : globalThis.document;\n//\n// export { GlobalThis as globalThis, Document as document };\nconst isServer = typeof window === 'undefined' || typeof globalThis.customElements === 'undefined';\ntype GlobalThis = typeof globalThis;\nconst internalGlobalThis: GlobalThis = (isServer ? globalThisShim : globalThis) as GlobalThis;\nconst internalDocument: Document = (isServer ? globalThisShim.document : globalThis.document) as Document;\n\nexport { internalGlobalThis as globalThis, internalDocument as document };\n","import { globalThis } from './polyfills';\nimport { Autoplay } from '@mux/playback-core';\nimport { MuxVideoBaseElement } from '@mux/mux-video/base';\nimport { CastableMediaMixin } from 'castable-video/castable-mixin.js';\nimport { MediaTracksMixin } from 'media-tracks';\n\nexport * from '@mux/mux-video/base';\n\n// castable-video should be mixed in last so that it can override load().\nclass MuxVideoElement extends CastableMediaMixin(MediaTracksMixin(MuxVideoBaseElement)) {\n  // Define autoplay in the most outer layer because mux-video accepts string | boolean\n  // which is not compatible the CustomVideoElement.autoplay boolean only type.\n  /** @ts-ignore */\n  get autoplay(): Autoplay {\n    const attr = this.getAttribute('autoplay');\n\n    if (attr === null) {\n      return false;\n    } else if (attr === '') {\n      return true;\n    } else {\n      return attr as Autoplay;\n    }\n  }\n\n  /** @ts-ignore */\n  set autoplay(val: Autoplay) {\n    const currentVal = this.autoplay;\n    if (val === currentVal) {\n      return;\n    }\n\n    if (val) {\n      this.setAttribute('autoplay', typeof val === 'string' ? val : '');\n    } else {\n      this.removeAttribute('autoplay');\n    }\n  }\n\n  // NOTE: CastableMediaMixin needs to be a subclass of whatever implements the load() method\n  // (i.e. MuxVideoBaseElement), but we're overriding castCustomData to provide mux-specific\n  // values by default, so it needs to be defined here (i.e. in the composed subclass of\n  // CastableMediaMixin). (CJP)\n  #castCustomData: Record<string, any> | undefined;\n\n  get muxCastCustomData() {\n    return {\n      mux: {\n        // Mux Video values\n        playbackId: this.playbackId,\n        minResolution: this.minResolution,\n        maxResolution: this.maxResolution,\n        renditionOrder: this.renditionOrder,\n        customDomain: this.customDomain,\n        /** @TODO Add this.tokens to MuxVideoElement (CJP) */\n        tokens: {\n          drm: this.drmToken,\n        },\n        // Mux Data values\n        envKey: this.envKey,\n        metadata: this.metadata,\n        disableCookies: this.disableCookies,\n        disableTracking: this.disableTracking,\n        beaconCollectionDomain: this.beaconCollectionDomain,\n        // Playback values\n        startTime: this.startTime,\n        // Other values\n        preferCmcd: this.preferCmcd,\n      },\n    } as const;\n  }\n\n  get castCustomData() {\n    return this.#castCustomData ?? this.muxCastCustomData;\n  }\n\n  set castCustomData(val: Record<string, any> | undefined) {\n    this.#castCustomData = val;\n  }\n}\n\ntype MuxVideoElementType = typeof MuxVideoElement;\ndeclare global {\n  var MuxVideoElement: MuxVideoElementType; // eslint-disable-line\n}\n\nif (!globalThis.customElements.get('mux-video')) {\n  globalThis.customElements.define('mux-video', MuxVideoElement);\n  globalThis.MuxVideoElement = MuxVideoElement;\n}\n\nexport default MuxVideoElement;\n"]},"metadata":{},"sourceType":"module"}