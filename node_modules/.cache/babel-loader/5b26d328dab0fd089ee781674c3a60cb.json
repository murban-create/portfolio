{"ast":null,"code":"import { globalThis } from \"../utils/server-safe-globals.js\";\nimport { MediaUIEvents, StreamTypes, TextTrackKinds, TextTrackModes } from \"../constants.js\";\nimport { getTextTracksList, parseTracks, updateTracksModeTo } from \"../utils/captions.js\";\nimport { getSubtitleTracks, toggleSubtitleTracks } from \"./util.js\";\nconst requestMap = {\n  /**\n   * @TODO Consider adding state to `StateMediator` for e.g. `mediaThumbnailCues` and use that for derived state here (CJP)\n   */\n  [MediaUIEvents.MEDIA_PREVIEW_REQUEST](stateMediator, stateOwners, _ref) {\n    let {\n      detail\n    } = _ref;\n    var _a, _b, _c;\n    const {\n      media\n    } = stateOwners;\n    const mediaPreviewTime = detail != null ? detail : void 0;\n    let mediaPreviewImage = void 0;\n    let mediaPreviewCoords = void 0;\n    if (media && mediaPreviewTime != null) {\n      const [track] = getTextTracksList(media, {\n        kind: TextTrackKinds.METADATA,\n        label: \"thumbnails\"\n      });\n      const cue = Array.prototype.find.call((_a = track == null ? void 0 : track.cues) != null ? _a : [], (c, i, cs) => {\n        if (i === 0) return c.endTime > mediaPreviewTime;\n        if (i === cs.length - 1) return c.startTime <= mediaPreviewTime;\n        return c.startTime <= mediaPreviewTime && c.endTime > mediaPreviewTime;\n      });\n      if (cue) {\n        const base = !/'^(?:[a-z]+:)?\\/\\//i.test(cue.text) ? (_b = media == null ? void 0 : media.querySelector('track[label=\"thumbnails\"]')) == null ? void 0 : _b.src : void 0;\n        const url = new URL(cue.text, base);\n        const previewCoordsStr = new URLSearchParams(url.hash).get(\"#xywh\");\n        mediaPreviewCoords = previewCoordsStr.split(\",\").map(numStr => +numStr);\n        mediaPreviewImage = url.href;\n      }\n    }\n    const mediaDuration = stateMediator.mediaDuration.get(stateOwners);\n    const mediaChaptersCues = stateMediator.mediaChaptersCues.get(stateOwners);\n    let mediaPreviewChapter = (_c = mediaChaptersCues.find((c, i, cs) => {\n      if (i === cs.length - 1 && mediaDuration === c.endTime) {\n        return c.startTime <= mediaPreviewTime && c.endTime >= mediaPreviewTime;\n      }\n      return c.startTime <= mediaPreviewTime && c.endTime > mediaPreviewTime;\n    })) == null ? void 0 : _c.text;\n    if (detail != null && mediaPreviewChapter == null) {\n      mediaPreviewChapter = \"\";\n    }\n    return {\n      mediaPreviewTime,\n      mediaPreviewImage,\n      mediaPreviewCoords,\n      mediaPreviewChapter\n    };\n  },\n  [MediaUIEvents.MEDIA_PAUSE_REQUEST](stateMediator, stateOwners) {\n    const key = \"mediaPaused\";\n    const value = true;\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_PLAY_REQUEST](stateMediator, stateOwners) {\n    var _a, _b, _c, _d;\n    const key = \"mediaPaused\";\n    const value = false;\n    const isLive = stateMediator.mediaStreamType.get(stateOwners) === StreamTypes.LIVE;\n    const canAutoSeekToLive = !((_a = stateOwners.options) == null ? void 0 : _a.noAutoSeekToLive);\n    const isDVR = stateMediator.mediaTargetLiveWindow.get(stateOwners) > 0;\n    if (isLive && canAutoSeekToLive && !isDVR) {\n      const seekableEnd = (_b = stateMediator.mediaSeekable.get(stateOwners)) == null ? void 0 : _b[1];\n      if (seekableEnd) {\n        const seekToLiveOffset = (_d = (_c = stateOwners.options) == null ? void 0 : _c.seekToLiveOffset) != null ? _d : 0;\n        const liveEdgeTime = seekableEnd - seekToLiveOffset;\n        stateMediator.mediaCurrentTime.set(liveEdgeTime, stateOwners);\n      }\n    }\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_PLAYBACK_RATE_REQUEST](stateMediator, stateOwners, _ref2) {\n    let {\n      detail\n    } = _ref2;\n    const key = \"mediaPlaybackRate\";\n    const value = detail;\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_MUTE_REQUEST](stateMediator, stateOwners) {\n    const key = \"mediaMuted\";\n    const value = true;\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_UNMUTE_REQUEST](stateMediator, stateOwners) {\n    const key = \"mediaMuted\";\n    const value = false;\n    if (!stateMediator.mediaVolume.get(stateOwners)) {\n      stateMediator.mediaVolume.set(0.25, stateOwners);\n    }\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_VOLUME_REQUEST](stateMediator, stateOwners, _ref3) {\n    let {\n      detail\n    } = _ref3;\n    const key = \"mediaVolume\";\n    const value = detail;\n    if (value && stateMediator.mediaMuted.get(stateOwners)) {\n      stateMediator.mediaMuted.set(false, stateOwners);\n    }\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_SEEK_REQUEST](stateMediator, stateOwners, _ref4) {\n    let {\n      detail\n    } = _ref4;\n    const key = \"mediaCurrentTime\";\n    const value = detail;\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_SEEK_TO_LIVE_REQUEST](stateMediator, stateOwners) {\n    var _a, _b, _c;\n    const key = \"mediaCurrentTime\";\n    const seekableEnd = (_a = stateMediator.mediaSeekable.get(stateOwners)) == null ? void 0 : _a[1];\n    if (Number.isNaN(Number(seekableEnd))) return;\n    const seekToLiveOffset = (_c = (_b = stateOwners.options) == null ? void 0 : _b.seekToLiveOffset) != null ? _c : 0;\n    const value = seekableEnd - seekToLiveOffset;\n    stateMediator[key].set(value, stateOwners);\n  },\n  // Text Tracks state change requests\n  [MediaUIEvents.MEDIA_SHOW_SUBTITLES_REQUEST](_stateMediator, stateOwners, _ref5) {\n    let {\n      detail\n    } = _ref5;\n    var _a;\n    const {\n      options\n    } = stateOwners;\n    const tracks = getSubtitleTracks(stateOwners);\n    const tracksToUpdate = parseTracks(detail);\n    const preferredLanguage = (_a = tracksToUpdate[0]) == null ? void 0 : _a.language;\n    if (preferredLanguage && !options.noSubtitlesLangPref) {\n      globalThis.localStorage.setItem(\"media-chrome-pref-subtitles-lang\", preferredLanguage);\n    }\n    updateTracksModeTo(TextTrackModes.SHOWING, tracks, tracksToUpdate);\n  },\n  [MediaUIEvents.MEDIA_DISABLE_SUBTITLES_REQUEST](_stateMediator, stateOwners, _ref6) {\n    let {\n      detail\n    } = _ref6;\n    const tracks = getSubtitleTracks(stateOwners);\n    const tracksToUpdate = detail != null ? detail : [];\n    updateTracksModeTo(TextTrackModes.DISABLED, tracks, tracksToUpdate);\n  },\n  [MediaUIEvents.MEDIA_TOGGLE_SUBTITLES_REQUEST](_stateMediator, stateOwners, _ref7) {\n    let {\n      detail\n    } = _ref7;\n    toggleSubtitleTracks(stateOwners, detail);\n  },\n  // Renditions/Tracks state change requests\n  [MediaUIEvents.MEDIA_RENDITION_REQUEST](stateMediator, stateOwners, _ref8) {\n    let {\n      detail\n    } = _ref8;\n    const key = \"mediaRenditionSelected\";\n    const value = detail;\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_AUDIO_TRACK_REQUEST](stateMediator, stateOwners, _ref9) {\n    let {\n      detail\n    } = _ref9;\n    const key = \"mediaAudioTrackEnabled\";\n    const value = detail;\n    stateMediator[key].set(value, stateOwners);\n  },\n  // State change requests dependent on root node\n  [MediaUIEvents.MEDIA_ENTER_PIP_REQUEST](stateMediator, stateOwners) {\n    const key = \"mediaIsPip\";\n    const value = true;\n    if (stateMediator.mediaIsFullscreen.get(stateOwners)) {\n      stateMediator.mediaIsFullscreen.set(false, stateOwners);\n    }\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_EXIT_PIP_REQUEST](stateMediator, stateOwners) {\n    const key = \"mediaIsPip\";\n    const value = false;\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_ENTER_FULLSCREEN_REQUEST](stateMediator, stateOwners) {\n    const key = \"mediaIsFullscreen\";\n    const value = true;\n    if (stateMediator.mediaIsPip.get(stateOwners)) {\n      stateMediator.mediaIsPip.set(false, stateOwners);\n    }\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_EXIT_FULLSCREEN_REQUEST](stateMediator, stateOwners) {\n    const key = \"mediaIsFullscreen\";\n    const value = false;\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_ENTER_CAST_REQUEST](stateMediator, stateOwners) {\n    const key = \"mediaIsCasting\";\n    const value = true;\n    if (stateMediator.mediaIsFullscreen.get(stateOwners)) {\n      stateMediator.mediaIsFullscreen.set(false, stateOwners);\n    }\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_EXIT_CAST_REQUEST](stateMediator, stateOwners) {\n    const key = \"mediaIsCasting\";\n    const value = false;\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_AIRPLAY_REQUEST](stateMediator, stateOwners) {\n    const key = \"mediaIsAirplaying\";\n    const value = true;\n    stateMediator[key].set(value, stateOwners);\n  }\n};\nexport { requestMap };","map":{"version":3,"names":["globalThis","MediaUIEvents","StreamTypes","TextTrackKinds","TextTrackModes","getTextTracksList","parseTracks","updateTracksModeTo","getSubtitleTracks","toggleSubtitleTracks","requestMap","MEDIA_PREVIEW_REQUEST","stateMediator","stateOwners","_ref","detail","_a","_b","_c","media","mediaPreviewTime","mediaPreviewImage","mediaPreviewCoords","track","kind","METADATA","label","cue","Array","prototype","find","call","cues","c","i","cs","endTime","length","startTime","base","test","text","querySelector","src","url","URL","previewCoordsStr","URLSearchParams","hash","get","split","map","numStr","href","mediaDuration","mediaChaptersCues","mediaPreviewChapter","MEDIA_PAUSE_REQUEST","key","value","set","MEDIA_PLAY_REQUEST","_d","isLive","mediaStreamType","LIVE","canAutoSeekToLive","options","noAutoSeekToLive","isDVR","mediaTargetLiveWindow","seekableEnd","mediaSeekable","seekToLiveOffset","liveEdgeTime","mediaCurrentTime","MEDIA_PLAYBACK_RATE_REQUEST","_ref2","MEDIA_MUTE_REQUEST","MEDIA_UNMUTE_REQUEST","mediaVolume","MEDIA_VOLUME_REQUEST","_ref3","mediaMuted","MEDIA_SEEK_REQUEST","_ref4","MEDIA_SEEK_TO_LIVE_REQUEST","Number","isNaN","MEDIA_SHOW_SUBTITLES_REQUEST","_stateMediator","_ref5","tracks","tracksToUpdate","preferredLanguage","language","noSubtitlesLangPref","localStorage","setItem","SHOWING","MEDIA_DISABLE_SUBTITLES_REQUEST","_ref6","DISABLED","MEDIA_TOGGLE_SUBTITLES_REQUEST","_ref7","MEDIA_RENDITION_REQUEST","_ref8","MEDIA_AUDIO_TRACK_REQUEST","_ref9","MEDIA_ENTER_PIP_REQUEST","mediaIsFullscreen","MEDIA_EXIT_PIP_REQUEST","MEDIA_ENTER_FULLSCREEN_REQUEST","mediaIsPip","MEDIA_EXIT_FULLSCREEN_REQUEST","MEDIA_ENTER_CAST_REQUEST","MEDIA_EXIT_CAST_REQUEST","MEDIA_AIRPLAY_REQUEST"],"sources":["/Users/monawiebkeurban/Documents/portfolio/node_modules/media-chrome/dist/media-store/request-map.js"],"sourcesContent":["import { globalThis } from \"../utils/server-safe-globals.js\";\nimport {\n  MediaUIEvents,\n  StreamTypes,\n  TextTrackKinds,\n  TextTrackModes\n} from \"../constants.js\";\nimport {\n  getTextTracksList,\n  parseTracks,\n  updateTracksModeTo\n} from \"../utils/captions.js\";\nimport { getSubtitleTracks, toggleSubtitleTracks } from \"./util.js\";\nconst requestMap = {\n  /**\n   * @TODO Consider adding state to `StateMediator` for e.g. `mediaThumbnailCues` and use that for derived state here (CJP)\n   */\n  [MediaUIEvents.MEDIA_PREVIEW_REQUEST](stateMediator, stateOwners, { detail }) {\n    var _a, _b, _c;\n    const { media } = stateOwners;\n    const mediaPreviewTime = detail != null ? detail : void 0;\n    let mediaPreviewImage = void 0;\n    let mediaPreviewCoords = void 0;\n    if (media && mediaPreviewTime != null) {\n      const [track] = getTextTracksList(media, {\n        kind: TextTrackKinds.METADATA,\n        label: \"thumbnails\"\n      });\n      const cue = Array.prototype.find.call((_a = track == null ? void 0 : track.cues) != null ? _a : [], (c, i, cs) => {\n        if (i === 0)\n          return c.endTime > mediaPreviewTime;\n        if (i === cs.length - 1)\n          return c.startTime <= mediaPreviewTime;\n        return c.startTime <= mediaPreviewTime && c.endTime > mediaPreviewTime;\n      });\n      if (cue) {\n        const base = !/'^(?:[a-z]+:)?\\/\\//i.test(cue.text) ? (_b = media == null ? void 0 : media.querySelector(\n          'track[label=\"thumbnails\"]'\n        )) == null ? void 0 : _b.src : void 0;\n        const url = new URL(cue.text, base);\n        const previewCoordsStr = new URLSearchParams(url.hash).get(\"#xywh\");\n        mediaPreviewCoords = previewCoordsStr.split(\",\").map((numStr) => +numStr);\n        mediaPreviewImage = url.href;\n      }\n    }\n    const mediaDuration = stateMediator.mediaDuration.get(stateOwners);\n    const mediaChaptersCues = stateMediator.mediaChaptersCues.get(stateOwners);\n    let mediaPreviewChapter = (_c = mediaChaptersCues.find((c, i, cs) => {\n      if (i === cs.length - 1 && mediaDuration === c.endTime) {\n        return c.startTime <= mediaPreviewTime && c.endTime >= mediaPreviewTime;\n      }\n      return c.startTime <= mediaPreviewTime && c.endTime > mediaPreviewTime;\n    })) == null ? void 0 : _c.text;\n    if (detail != null && mediaPreviewChapter == null) {\n      mediaPreviewChapter = \"\";\n    }\n    return {\n      mediaPreviewTime,\n      mediaPreviewImage,\n      mediaPreviewCoords,\n      mediaPreviewChapter\n    };\n  },\n  [MediaUIEvents.MEDIA_PAUSE_REQUEST](stateMediator, stateOwners) {\n    const key = \"mediaPaused\";\n    const value = true;\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_PLAY_REQUEST](stateMediator, stateOwners) {\n    var _a, _b, _c, _d;\n    const key = \"mediaPaused\";\n    const value = false;\n    const isLive = stateMediator.mediaStreamType.get(stateOwners) === StreamTypes.LIVE;\n    const canAutoSeekToLive = !((_a = stateOwners.options) == null ? void 0 : _a.noAutoSeekToLive);\n    const isDVR = stateMediator.mediaTargetLiveWindow.get(stateOwners) > 0;\n    if (isLive && canAutoSeekToLive && !isDVR) {\n      const seekableEnd = (_b = stateMediator.mediaSeekable.get(stateOwners)) == null ? void 0 : _b[1];\n      if (seekableEnd) {\n        const seekToLiveOffset = (_d = (_c = stateOwners.options) == null ? void 0 : _c.seekToLiveOffset) != null ? _d : 0;\n        const liveEdgeTime = seekableEnd - seekToLiveOffset;\n        stateMediator.mediaCurrentTime.set(liveEdgeTime, stateOwners);\n      }\n    }\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_PLAYBACK_RATE_REQUEST](stateMediator, stateOwners, { detail }) {\n    const key = \"mediaPlaybackRate\";\n    const value = detail;\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_MUTE_REQUEST](stateMediator, stateOwners) {\n    const key = \"mediaMuted\";\n    const value = true;\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_UNMUTE_REQUEST](stateMediator, stateOwners) {\n    const key = \"mediaMuted\";\n    const value = false;\n    if (!stateMediator.mediaVolume.get(stateOwners)) {\n      stateMediator.mediaVolume.set(0.25, stateOwners);\n    }\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_VOLUME_REQUEST](stateMediator, stateOwners, { detail }) {\n    const key = \"mediaVolume\";\n    const value = detail;\n    if (value && stateMediator.mediaMuted.get(stateOwners)) {\n      stateMediator.mediaMuted.set(false, stateOwners);\n    }\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_SEEK_REQUEST](stateMediator, stateOwners, { detail }) {\n    const key = \"mediaCurrentTime\";\n    const value = detail;\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_SEEK_TO_LIVE_REQUEST](stateMediator, stateOwners) {\n    var _a, _b, _c;\n    const key = \"mediaCurrentTime\";\n    const seekableEnd = (_a = stateMediator.mediaSeekable.get(stateOwners)) == null ? void 0 : _a[1];\n    if (Number.isNaN(Number(seekableEnd)))\n      return;\n    const seekToLiveOffset = (_c = (_b = stateOwners.options) == null ? void 0 : _b.seekToLiveOffset) != null ? _c : 0;\n    const value = seekableEnd - seekToLiveOffset;\n    stateMediator[key].set(value, stateOwners);\n  },\n  // Text Tracks state change requests\n  [MediaUIEvents.MEDIA_SHOW_SUBTITLES_REQUEST](_stateMediator, stateOwners, { detail }) {\n    var _a;\n    const { options } = stateOwners;\n    const tracks = getSubtitleTracks(stateOwners);\n    const tracksToUpdate = parseTracks(detail);\n    const preferredLanguage = (_a = tracksToUpdate[0]) == null ? void 0 : _a.language;\n    if (preferredLanguage && !options.noSubtitlesLangPref) {\n      globalThis.localStorage.setItem(\n        \"media-chrome-pref-subtitles-lang\",\n        preferredLanguage\n      );\n    }\n    updateTracksModeTo(TextTrackModes.SHOWING, tracks, tracksToUpdate);\n  },\n  [MediaUIEvents.MEDIA_DISABLE_SUBTITLES_REQUEST](_stateMediator, stateOwners, { detail }) {\n    const tracks = getSubtitleTracks(stateOwners);\n    const tracksToUpdate = detail != null ? detail : [];\n    updateTracksModeTo(TextTrackModes.DISABLED, tracks, tracksToUpdate);\n  },\n  [MediaUIEvents.MEDIA_TOGGLE_SUBTITLES_REQUEST](_stateMediator, stateOwners, { detail }) {\n    toggleSubtitleTracks(stateOwners, detail);\n  },\n  // Renditions/Tracks state change requests\n  [MediaUIEvents.MEDIA_RENDITION_REQUEST](stateMediator, stateOwners, { detail }) {\n    const key = \"mediaRenditionSelected\";\n    const value = detail;\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_AUDIO_TRACK_REQUEST](stateMediator, stateOwners, { detail }) {\n    const key = \"mediaAudioTrackEnabled\";\n    const value = detail;\n    stateMediator[key].set(value, stateOwners);\n  },\n  // State change requests dependent on root node\n  [MediaUIEvents.MEDIA_ENTER_PIP_REQUEST](stateMediator, stateOwners) {\n    const key = \"mediaIsPip\";\n    const value = true;\n    if (stateMediator.mediaIsFullscreen.get(stateOwners)) {\n      stateMediator.mediaIsFullscreen.set(false, stateOwners);\n    }\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_EXIT_PIP_REQUEST](stateMediator, stateOwners) {\n    const key = \"mediaIsPip\";\n    const value = false;\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_ENTER_FULLSCREEN_REQUEST](stateMediator, stateOwners) {\n    const key = \"mediaIsFullscreen\";\n    const value = true;\n    if (stateMediator.mediaIsPip.get(stateOwners)) {\n      stateMediator.mediaIsPip.set(false, stateOwners);\n    }\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_EXIT_FULLSCREEN_REQUEST](stateMediator, stateOwners) {\n    const key = \"mediaIsFullscreen\";\n    const value = false;\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_ENTER_CAST_REQUEST](stateMediator, stateOwners) {\n    const key = \"mediaIsCasting\";\n    const value = true;\n    if (stateMediator.mediaIsFullscreen.get(stateOwners)) {\n      stateMediator.mediaIsFullscreen.set(false, stateOwners);\n    }\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_EXIT_CAST_REQUEST](stateMediator, stateOwners) {\n    const key = \"mediaIsCasting\";\n    const value = false;\n    stateMediator[key].set(value, stateOwners);\n  },\n  [MediaUIEvents.MEDIA_AIRPLAY_REQUEST](stateMediator, stateOwners) {\n    const key = \"mediaIsAirplaying\";\n    const value = true;\n    stateMediator[key].set(value, stateOwners);\n  }\n};\nexport {\n  requestMap\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}