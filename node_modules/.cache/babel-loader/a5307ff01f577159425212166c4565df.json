{"ast":null,"code":"var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\nvar _renditionList, _prevState, _render, render_fn, _onChange, onChange_fn;\nimport { globalThis } from \"../utils/server-safe-globals.js\";\nimport { MediaUIAttributes, MediaUIEvents } from \"../constants.js\";\nimport { getMediaController, getStringAttr, setStringAttr, getNumericAttr, setNumericAttr } from \"../utils/element-utils.js\";\nimport { parseRenditionList } from \"../utils/utils.js\";\nimport { MediaChromeMenu, createMenuItem, createIndicator } from \"./media-chrome-menu.js\";\nimport { t } from \"../utils/i18n.js\";\nclass MediaRenditionMenu extends MediaChromeMenu {\n  constructor() {\n    super(...arguments);\n    __privateAdd(this, _render);\n    __privateAdd(this, _onChange);\n    __privateAdd(this, _renditionList, []);\n    __privateAdd(this, _prevState, {});\n  }\n  static get observedAttributes() {\n    return [...super.observedAttributes, MediaUIAttributes.MEDIA_RENDITION_LIST, MediaUIAttributes.MEDIA_RENDITION_SELECTED, MediaUIAttributes.MEDIA_RENDITION_UNAVAILABLE, MediaUIAttributes.MEDIA_HEIGHT];\n  }\n  attributeChangedCallback(attrName, oldValue, newValue) {\n    super.attributeChangedCallback(attrName, oldValue, newValue);\n    if (attrName === MediaUIAttributes.MEDIA_RENDITION_SELECTED && oldValue !== newValue) {\n      this.value = newValue != null ? newValue : \"auto\";\n      __privateMethod(this, _render, render_fn).call(this);\n    } else if (attrName === MediaUIAttributes.MEDIA_RENDITION_LIST && oldValue !== newValue) {\n      __privateSet(this, _renditionList, parseRenditionList(newValue));\n      __privateMethod(this, _render, render_fn).call(this);\n    } else if (attrName === MediaUIAttributes.MEDIA_HEIGHT && oldValue !== newValue) {\n      __privateMethod(this, _render, render_fn).call(this);\n    }\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.addEventListener(\"change\", __privateMethod(this, _onChange, onChange_fn));\n  }\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.removeEventListener(\"change\", __privateMethod(this, _onChange, onChange_fn));\n  }\n  /**\n   * Returns the anchor element when it is a floating menu.\n   */\n  get anchorElement() {\n    if (this.anchor !== \"auto\") return super.anchorElement;\n    return getMediaController(this).querySelector(\"media-rendition-menu-button\");\n  }\n  get mediaRenditionList() {\n    return __privateGet(this, _renditionList);\n  }\n  set mediaRenditionList(list) {\n    __privateSet(this, _renditionList, list);\n    __privateMethod(this, _render, render_fn).call(this);\n  }\n  /**\n   * Get selected rendition id.\n   */\n  get mediaRenditionSelected() {\n    return getStringAttr(this, MediaUIAttributes.MEDIA_RENDITION_SELECTED);\n  }\n  set mediaRenditionSelected(id) {\n    setStringAttr(this, MediaUIAttributes.MEDIA_RENDITION_SELECTED, id);\n  }\n  get mediaHeight() {\n    return getNumericAttr(this, MediaUIAttributes.MEDIA_HEIGHT);\n  }\n  set mediaHeight(height) {\n    setNumericAttr(this, MediaUIAttributes.MEDIA_HEIGHT, height);\n  }\n}\n_renditionList = new WeakMap();\n_prevState = new WeakMap();\n_render = new WeakSet();\nrender_fn = function () {\n  if (__privateGet(this, _prevState).mediaRenditionList === JSON.stringify(this.mediaRenditionList) && __privateGet(this, _prevState).mediaHeight === this.mediaHeight) return;\n  __privateGet(this, _prevState).mediaRenditionList = JSON.stringify(this.mediaRenditionList);\n  __privateGet(this, _prevState).mediaHeight = this.mediaHeight;\n  const renditionList = this.mediaRenditionList.sort((a, b) => b.height - a.height);\n  for (const rendition of renditionList) {\n    rendition.selected = rendition.id === this.mediaRenditionSelected;\n  }\n  this.defaultSlot.textContent = \"\";\n  const isAuto = !this.mediaRenditionSelected;\n  for (const rendition of renditionList) {\n    const text2 = this.formatMenuItemText(`${Math.min(rendition.width, rendition.height)}p`, rendition);\n    const item2 = createMenuItem({\n      type: \"radio\",\n      text: text2,\n      value: `${rendition.id}`,\n      checked: rendition.selected && !isAuto\n    });\n    item2.prepend(createIndicator(this, \"checked-indicator\"));\n    this.defaultSlot.append(item2);\n  }\n  const text = isAuto ? this.formatMenuItemText(`${t(\"Auto\")} (${this.mediaHeight}p)`) : this.formatMenuItemText(t(\"Auto\"));\n  const item = createMenuItem({\n    type: \"radio\",\n    text,\n    value: \"auto\",\n    checked: isAuto\n  });\n  const autoDescription = this.mediaHeight > 0 ? `${t(\"Auto\")} (${this.mediaHeight}p)` : t(\"Auto\");\n  item.dataset.description = autoDescription;\n  item.prepend(createIndicator(this, \"checked-indicator\"));\n  this.defaultSlot.append(item);\n};\n_onChange = new WeakSet();\nonChange_fn = function () {\n  if (this.value == null) return;\n  const event = new globalThis.CustomEvent(MediaUIEvents.MEDIA_RENDITION_REQUEST, {\n    composed: true,\n    bubbles: true,\n    detail: this.value\n  });\n  this.dispatchEvent(event);\n};\nif (!globalThis.customElements.get(\"media-rendition-menu\")) {\n  globalThis.customElements.define(\"media-rendition-menu\", MediaRenditionMenu);\n}\nvar media_rendition_menu_default = MediaRenditionMenu;\nexport { MediaRenditionMenu, media_rendition_menu_default as default };","map":null,"metadata":{},"sourceType":"module"}