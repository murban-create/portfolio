{"ast":null,"code":"var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar _mediaError;\nimport { globalThis } from \"./utils/server-safe-globals.js\";\nimport { MediaUIAttributes } from \"./constants.js\";\nimport { formatError } from \"./labels/labels.js\";\nimport { MediaChromeDialog } from \"./media-chrome-dialog.js\";\nimport { getNumericAttr, getStringAttr, setNumericAttr, setStringAttr } from \"./utils/element-utils.js\";\nfunction getSlotTemplateHTML(attrs) {\n  return /*html*/`\n    <style>\n      :host {\n        background: rgb(20 20 30 / .8);\n      }\n\n      #content {\n        display: block;\n        padding: 1.2em 1.5em;\n      }\n\n      h3,\n      p {\n        margin-block: 0 .3em;\n      }\n    </style>\n    <slot name=\"error-${attrs.mediaerrorcode}\" id=\"content\">\n      ${formatErrorMessage({\n    code: +attrs.mediaerrorcode,\n    message: attrs.mediaerrormessage\n  })}\n    </slot>\n  `;\n}\nfunction shouldOpenErrorDialog(error) {\n  return error.code && formatError(error) !== null;\n}\nfunction formatErrorMessage(error) {\n  var _a;\n  const {\n    title,\n    message\n  } = (_a = formatError(error)) != null ? _a : {};\n  let html = \"\";\n  if (title) html += `<slot name=\"error-${error.code}-title\"><h3>${title}</h3></slot>`;\n  if (message) html += `<slot name=\"error-${error.code}-message\"><p>${message}</p></slot>`;\n  return html;\n}\nconst observedAttributes = [MediaUIAttributes.MEDIA_ERROR_CODE, MediaUIAttributes.MEDIA_ERROR_MESSAGE];\nclass MediaErrorDialog extends MediaChromeDialog {\n  constructor() {\n    super(...arguments);\n    __privateAdd(this, _mediaError, null);\n  }\n  static get observedAttributes() {\n    return [...super.observedAttributes, ...observedAttributes];\n  }\n  formatErrorMessage(error) {\n    return this.constructor.formatErrorMessage(error);\n  }\n  attributeChangedCallback(attrName, oldValue, newValue) {\n    var _a;\n    super.attributeChangedCallback(attrName, oldValue, newValue);\n    if (!observedAttributes.includes(attrName)) return;\n    const mediaError = (_a = this.mediaError) != null ? _a : {\n      code: this.mediaErrorCode,\n      message: this.mediaErrorMessage\n    };\n    this.open = shouldOpenErrorDialog(mediaError);\n    if (this.open) {\n      this.shadowRoot.querySelector(\"slot\").name = `error-${this.mediaErrorCode}`;\n      this.shadowRoot.querySelector(\"#content\").innerHTML = this.formatErrorMessage(mediaError);\n    }\n  }\n  get mediaError() {\n    return __privateGet(this, _mediaError);\n  }\n  set mediaError(value) {\n    __privateSet(this, _mediaError, value);\n  }\n  get mediaErrorCode() {\n    return getNumericAttr(this, \"mediaerrorcode\");\n  }\n  set mediaErrorCode(value) {\n    setNumericAttr(this, \"mediaerrorcode\", value);\n  }\n  get mediaErrorMessage() {\n    return getStringAttr(this, \"mediaerrormessage\");\n  }\n  set mediaErrorMessage(value) {\n    setStringAttr(this, \"mediaerrormessage\", value);\n  }\n}\n_mediaError = new WeakMap();\nMediaErrorDialog.getSlotTemplateHTML = getSlotTemplateHTML;\nMediaErrorDialog.formatErrorMessage = formatErrorMessage;\nif (!globalThis.customElements.get(\"media-error-dialog\")) {\n  globalThis.customElements.define(\"media-error-dialog\", MediaErrorDialog);\n}\nvar media_error_dialog_default = MediaErrorDialog;\nexport { MediaErrorDialog, media_error_dialog_default as default };","map":null,"metadata":{},"sourceType":"module"}