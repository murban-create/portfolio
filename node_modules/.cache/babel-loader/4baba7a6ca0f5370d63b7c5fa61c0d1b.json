{"ast":null,"code":"var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\nvar _hotKeys, _fullscreenElement, _mediaStore, _mediaStateCallback, _mediaStoreUnsubscribe, _mediaStateEventHandler, _setupDefaultStore, setupDefaultStore_fn, _keyUpHandler, keyUpHandler_fn, _keyDownHandler, keyDownHandler_fn;\nimport { MediaContainer } from \"./media-container.js\";\nimport { document, globalThis } from \"./utils/server-safe-globals.js\";\nimport { AttributeTokenList } from \"./utils/attribute-token-list.js\";\nimport { delay, stringifyRenditionList, stringifyAudioTrackList } from \"./utils/utils.js\";\nimport { stringifyTextTrackList } from \"./utils/captions.js\";\nimport { MediaUIEvents, MediaUIAttributes, MediaStateReceiverAttributes, AttributeToStateChangeEventMap, MediaUIProps } from \"./constants.js\";\nimport { getBooleanAttr, getNumericAttr, getStringAttr, setBooleanAttr, setNumericAttr, setStringAttr } from \"./utils/element-utils.js\";\nimport { createMediaStore } from \"./media-store/media-store.js\";\nimport { setLanguage } from \"./utils/i18n.js\";\nconst ButtonPressedKeys = [\"ArrowLeft\", \"ArrowRight\", \"Enter\", \" \", \"f\", \"m\", \"k\", \"c\"];\nconst DEFAULT_SEEK_OFFSET = 10;\nconst Attributes = {\n  DEFAULT_SUBTITLES: \"defaultsubtitles\",\n  DEFAULT_STREAM_TYPE: \"defaultstreamtype\",\n  DEFAULT_DURATION: \"defaultduration\",\n  FULLSCREEN_ELEMENT: \"fullscreenelement\",\n  HOTKEYS: \"hotkeys\",\n  KEYS_USED: \"keysused\",\n  LIVE_EDGE_OFFSET: \"liveedgeoffset\",\n  SEEK_TO_LIVE_OFFSET: \"seektoliveoffset\",\n  NO_AUTO_SEEK_TO_LIVE: \"noautoseektolive\",\n  NO_HOTKEYS: \"nohotkeys\",\n  NO_VOLUME_PREF: \"novolumepref\",\n  NO_SUBTITLES_LANG_PREF: \"nosubtitleslangpref\",\n  NO_DEFAULT_STORE: \"nodefaultstore\",\n  KEYBOARD_FORWARD_SEEK_OFFSET: \"keyboardforwardseekoffset\",\n  KEYBOARD_BACKWARD_SEEK_OFFSET: \"keyboardbackwardseekoffset\",\n  LANG: \"lang\"\n};\nclass MediaController extends MediaContainer {\n  constructor() {\n    super();\n    __privateAdd(this, _setupDefaultStore);\n    __privateAdd(this, _keyUpHandler);\n    __privateAdd(this, _keyDownHandler);\n    this.mediaStateReceivers = [];\n    this.associatedElementSubscriptions = /* @__PURE__ */new Map();\n    __privateAdd(this, _hotKeys, new AttributeTokenList(this, Attributes.HOTKEYS));\n    __privateAdd(this, _fullscreenElement, void 0);\n    __privateAdd(this, _mediaStore, void 0);\n    __privateAdd(this, _mediaStateCallback, void 0);\n    __privateAdd(this, _mediaStoreUnsubscribe, void 0);\n    __privateAdd(this, _mediaStateEventHandler, event => {\n      var _a;\n      (_a = __privateGet(this, _mediaStore)) == null ? void 0 : _a.dispatch(event);\n    });\n    this.associateElement(this);\n    let prevState = {};\n    __privateSet(this, _mediaStateCallback, nextState => {\n      Object.entries(nextState).forEach(_ref => {\n        let [stateName, stateValue] = _ref;\n        if (stateName in prevState && prevState[stateName] === stateValue) return;\n        this.propagateMediaState(stateName, stateValue);\n        const attrName = stateName.toLowerCase();\n        const evt = new globalThis.CustomEvent(AttributeToStateChangeEventMap[attrName], {\n          composed: true,\n          detail: stateValue\n        });\n        this.dispatchEvent(evt);\n      });\n      prevState = nextState;\n    });\n    this.enableHotkeys();\n  }\n  static get observedAttributes() {\n    return super.observedAttributes.concat(Attributes.NO_HOTKEYS, Attributes.HOTKEYS, Attributes.DEFAULT_STREAM_TYPE, Attributes.DEFAULT_SUBTITLES, Attributes.DEFAULT_DURATION, Attributes.LANG);\n  }\n  get mediaStore() {\n    return __privateGet(this, _mediaStore);\n  }\n  set mediaStore(value) {\n    var _a, _b;\n    if (__privateGet(this, _mediaStore)) {\n      (_a = __privateGet(this, _mediaStoreUnsubscribe)) == null ? void 0 : _a.call(this);\n      __privateSet(this, _mediaStoreUnsubscribe, void 0);\n    }\n    __privateSet(this, _mediaStore, value);\n    if (!__privateGet(this, _mediaStore) && !this.hasAttribute(Attributes.NO_DEFAULT_STORE)) {\n      __privateMethod(this, _setupDefaultStore, setupDefaultStore_fn).call(this);\n      return;\n    }\n    __privateSet(this, _mediaStoreUnsubscribe, (_b = __privateGet(this, _mediaStore)) == null ? void 0 : _b.subscribe(__privateGet(this, _mediaStateCallback)));\n  }\n  get fullscreenElement() {\n    var _a;\n    return (_a = __privateGet(this, _fullscreenElement)) != null ? _a : this;\n  }\n  set fullscreenElement(element) {\n    var _a;\n    if (this.hasAttribute(Attributes.FULLSCREEN_ELEMENT)) {\n      this.removeAttribute(Attributes.FULLSCREEN_ELEMENT);\n    }\n    __privateSet(this, _fullscreenElement, element);\n    (_a = __privateGet(this, _mediaStore)) == null ? void 0 : _a.dispatch({\n      type: \"fullscreenelementchangerequest\",\n      detail: this.fullscreenElement\n    });\n  }\n  get defaultSubtitles() {\n    return getBooleanAttr(this, Attributes.DEFAULT_SUBTITLES);\n  }\n  set defaultSubtitles(value) {\n    setBooleanAttr(this, Attributes.DEFAULT_SUBTITLES, value);\n  }\n  get defaultStreamType() {\n    return getStringAttr(this, Attributes.DEFAULT_STREAM_TYPE);\n  }\n  set defaultStreamType(value) {\n    setStringAttr(this, Attributes.DEFAULT_STREAM_TYPE, value);\n  }\n  get defaultDuration() {\n    return getNumericAttr(this, Attributes.DEFAULT_DURATION);\n  }\n  set defaultDuration(value) {\n    setNumericAttr(this, Attributes.DEFAULT_DURATION, value);\n  }\n  get noHotkeys() {\n    return getBooleanAttr(this, Attributes.NO_HOTKEYS);\n  }\n  set noHotkeys(value) {\n    setBooleanAttr(this, Attributes.NO_HOTKEYS, value);\n  }\n  get keysUsed() {\n    return getStringAttr(this, Attributes.KEYS_USED);\n  }\n  set keysUsed(value) {\n    setStringAttr(this, Attributes.KEYS_USED, value);\n  }\n  get liveEdgeOffset() {\n    return getNumericAttr(this, Attributes.LIVE_EDGE_OFFSET);\n  }\n  set liveEdgeOffset(value) {\n    setNumericAttr(this, Attributes.LIVE_EDGE_OFFSET, value);\n  }\n  get noAutoSeekToLive() {\n    return getBooleanAttr(this, Attributes.NO_AUTO_SEEK_TO_LIVE);\n  }\n  set noAutoSeekToLive(value) {\n    setBooleanAttr(this, Attributes.NO_AUTO_SEEK_TO_LIVE, value);\n  }\n  get noVolumePref() {\n    return getBooleanAttr(this, Attributes.NO_VOLUME_PREF);\n  }\n  set noVolumePref(value) {\n    setBooleanAttr(this, Attributes.NO_VOLUME_PREF, value);\n  }\n  get noSubtitlesLangPref() {\n    return getBooleanAttr(this, Attributes.NO_SUBTITLES_LANG_PREF);\n  }\n  set noSubtitlesLangPref(value) {\n    setBooleanAttr(this, Attributes.NO_SUBTITLES_LANG_PREF, value);\n  }\n  get noDefaultStore() {\n    return getBooleanAttr(this, Attributes.NO_DEFAULT_STORE);\n  }\n  set noDefaultStore(value) {\n    setBooleanAttr(this, Attributes.NO_DEFAULT_STORE, value);\n  }\n  attributeChangedCallback(attrName, oldValue, newValue) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    super.attributeChangedCallback(attrName, oldValue, newValue);\n    if (attrName === Attributes.NO_HOTKEYS) {\n      if (newValue !== oldValue && newValue === \"\") {\n        if (this.hasAttribute(Attributes.HOTKEYS)) {\n          console.warn(\"Media Chrome: Both `hotkeys` and `nohotkeys` have been set. All hotkeys will be disabled.\");\n        }\n        this.disableHotkeys();\n      } else if (newValue !== oldValue && newValue === null) {\n        this.enableHotkeys();\n      }\n    } else if (attrName === Attributes.HOTKEYS) {\n      __privateGet(this, _hotKeys).value = newValue;\n    } else if (attrName === Attributes.DEFAULT_SUBTITLES && newValue !== oldValue) {\n      (_a = __privateGet(this, _mediaStore)) == null ? void 0 : _a.dispatch({\n        type: \"optionschangerequest\",\n        detail: {\n          defaultSubtitles: this.hasAttribute(Attributes.DEFAULT_SUBTITLES)\n        }\n      });\n    } else if (attrName === Attributes.DEFAULT_STREAM_TYPE) {\n      (_c = __privateGet(this, _mediaStore)) == null ? void 0 : _c.dispatch({\n        type: \"optionschangerequest\",\n        detail: {\n          defaultStreamType: (_b = this.getAttribute(Attributes.DEFAULT_STREAM_TYPE)) != null ? _b : void 0\n        }\n      });\n    } else if (attrName === Attributes.LIVE_EDGE_OFFSET) {\n      (_d = __privateGet(this, _mediaStore)) == null ? void 0 : _d.dispatch({\n        type: \"optionschangerequest\",\n        detail: {\n          liveEdgeOffset: this.hasAttribute(Attributes.LIVE_EDGE_OFFSET) ? +this.getAttribute(Attributes.LIVE_EDGE_OFFSET) : void 0,\n          seekToLiveOffset: !this.hasAttribute(Attributes.SEEK_TO_LIVE_OFFSET) ? +this.getAttribute(Attributes.LIVE_EDGE_OFFSET) : void 0\n        }\n      });\n    } else if (attrName === Attributes.SEEK_TO_LIVE_OFFSET) {\n      (_e = __privateGet(this, _mediaStore)) == null ? void 0 : _e.dispatch({\n        type: \"optionschangerequest\",\n        detail: {\n          seekToLiveOffset: this.hasAttribute(Attributes.SEEK_TO_LIVE_OFFSET) ? +this.getAttribute(Attributes.SEEK_TO_LIVE_OFFSET) : void 0\n        }\n      });\n    } else if (attrName === Attributes.NO_AUTO_SEEK_TO_LIVE) {\n      (_f = __privateGet(this, _mediaStore)) == null ? void 0 : _f.dispatch({\n        type: \"optionschangerequest\",\n        detail: {\n          noAutoSeekToLive: this.hasAttribute(Attributes.NO_AUTO_SEEK_TO_LIVE)\n        }\n      });\n    } else if (attrName === Attributes.FULLSCREEN_ELEMENT) {\n      const el = newValue ? (_g = this.getRootNode()) == null ? void 0 : _g.getElementById(newValue) : void 0;\n      __privateSet(this, _fullscreenElement, el);\n      (_h = __privateGet(this, _mediaStore)) == null ? void 0 : _h.dispatch({\n        type: \"fullscreenelementchangerequest\",\n        detail: this.fullscreenElement\n      });\n    } else if (attrName === Attributes.LANG && newValue !== oldValue) {\n      setLanguage(newValue);\n    }\n  }\n  connectedCallback() {\n    var _a, _b;\n    if (!__privateGet(this, _mediaStore) && !this.hasAttribute(Attributes.NO_DEFAULT_STORE)) {\n      __privateMethod(this, _setupDefaultStore, setupDefaultStore_fn).call(this);\n    }\n    (_a = __privateGet(this, _mediaStore)) == null ? void 0 : _a.dispatch({\n      type: \"documentelementchangerequest\",\n      detail: document\n    });\n    super.connectedCallback();\n    if (__privateGet(this, _mediaStore) && !__privateGet(this, _mediaStoreUnsubscribe)) {\n      __privateSet(this, _mediaStoreUnsubscribe, (_b = __privateGet(this, _mediaStore)) == null ? void 0 : _b.subscribe(__privateGet(this, _mediaStateCallback)));\n    }\n    this.enableHotkeys();\n  }\n  disconnectedCallback() {\n    var _a, _b, _c, _d;\n    (_a = super.disconnectedCallback) == null ? void 0 : _a.call(this);\n    if (__privateGet(this, _mediaStore)) {\n      (_b = __privateGet(this, _mediaStore)) == null ? void 0 : _b.dispatch({\n        type: \"documentelementchangerequest\",\n        detail: void 0\n      });\n      (_c = __privateGet(this, _mediaStore)) == null ? void 0 : _c.dispatch({\n        type: MediaUIEvents.MEDIA_TOGGLE_SUBTITLES_REQUEST,\n        detail: false\n      });\n    }\n    if (__privateGet(this, _mediaStoreUnsubscribe)) {\n      (_d = __privateGet(this, _mediaStoreUnsubscribe)) == null ? void 0 : _d.call(this);\n      __privateSet(this, _mediaStoreUnsubscribe, void 0);\n    }\n  }\n  /**\n   * @override\n   * @param {HTMLMediaElement} media\n   */\n  mediaSetCallback(media) {\n    var _a;\n    super.mediaSetCallback(media);\n    (_a = __privateGet(this, _mediaStore)) == null ? void 0 : _a.dispatch({\n      type: \"mediaelementchangerequest\",\n      detail: media\n    });\n    if (!media.hasAttribute(\"tabindex\")) {\n      media.tabIndex = -1;\n    }\n  }\n  /**\n   * @override\n   * @param {HTMLMediaElement} media\n   */\n  mediaUnsetCallback(media) {\n    var _a;\n    super.mediaUnsetCallback(media);\n    (_a = __privateGet(this, _mediaStore)) == null ? void 0 : _a.dispatch({\n      type: \"mediaelementchangerequest\",\n      detail: void 0\n    });\n  }\n  propagateMediaState(stateName, state) {\n    propagateMediaState(this.mediaStateReceivers, stateName, state);\n  }\n  associateElement(element) {\n    if (!element) return;\n    const {\n      associatedElementSubscriptions\n    } = this;\n    if (associatedElementSubscriptions.has(element)) return;\n    const registerMediaStateReceiver = this.registerMediaStateReceiver.bind(this);\n    const unregisterMediaStateReceiver = this.unregisterMediaStateReceiver.bind(this);\n    const unsubscribe = monitorForMediaStateReceivers(element, registerMediaStateReceiver, unregisterMediaStateReceiver);\n    Object.values(MediaUIEvents).forEach(eventName => {\n      element.addEventListener(eventName, __privateGet(this, _mediaStateEventHandler));\n    });\n    associatedElementSubscriptions.set(element, unsubscribe);\n  }\n  unassociateElement(element) {\n    if (!element) return;\n    const {\n      associatedElementSubscriptions\n    } = this;\n    if (!associatedElementSubscriptions.has(element)) return;\n    const unsubscribe = associatedElementSubscriptions.get(element);\n    unsubscribe();\n    associatedElementSubscriptions.delete(element);\n    Object.values(MediaUIEvents).forEach(eventName => {\n      element.removeEventListener(eventName, __privateGet(this, _mediaStateEventHandler));\n    });\n  }\n  registerMediaStateReceiver(el) {\n    if (!el) return;\n    const els = this.mediaStateReceivers;\n    const index = els.indexOf(el);\n    if (index > -1) return;\n    els.push(el);\n    if (__privateGet(this, _mediaStore)) {\n      Object.entries(__privateGet(this, _mediaStore).getState()).forEach(_ref2 => {\n        let [stateName, stateValue] = _ref2;\n        propagateMediaState([el], stateName, stateValue);\n      });\n    }\n  }\n  unregisterMediaStateReceiver(el) {\n    const els = this.mediaStateReceivers;\n    const index = els.indexOf(el);\n    if (index < 0) return;\n    els.splice(index, 1);\n  }\n  enableHotkeys() {\n    this.addEventListener(\"keydown\", __privateMethod(this, _keyDownHandler, keyDownHandler_fn));\n  }\n  disableHotkeys() {\n    this.removeEventListener(\"keydown\", __privateMethod(this, _keyDownHandler, keyDownHandler_fn));\n    this.removeEventListener(\"keyup\", __privateMethod(this, _keyUpHandler, keyUpHandler_fn));\n  }\n  get hotkeys() {\n    return getStringAttr(this, Attributes.HOTKEYS);\n  }\n  set hotkeys(value) {\n    setStringAttr(this, Attributes.HOTKEYS, value);\n  }\n  keyboardShortcutHandler(e) {\n    var _a, _b, _c, _d, _e;\n    const target = e.target;\n    const keysUsed = ((_c = (_b = (_a = target.getAttribute(Attributes.KEYS_USED)) == null ? void 0 : _a.split(\" \")) != null ? _b : target == null ? void 0 : target.keysUsed) != null ? _c : []).map(key => key === \"Space\" ? \" \" : key).filter(Boolean);\n    if (keysUsed.includes(e.key)) {\n      return;\n    }\n    let eventName, detail, evt;\n    if (__privateGet(this, _hotKeys).contains(`no${e.key.toLowerCase()}`)) return;\n    if (e.key === \" \" && __privateGet(this, _hotKeys).contains(`nospace`)) return;\n    switch (e.key) {\n      case \" \":\n      case \"k\":\n        eventName = __privateGet(this, _mediaStore).getState().mediaPaused ? MediaUIEvents.MEDIA_PLAY_REQUEST : MediaUIEvents.MEDIA_PAUSE_REQUEST;\n        this.dispatchEvent(new globalThis.CustomEvent(eventName, {\n          composed: true,\n          bubbles: true\n        }));\n        break;\n      case \"m\":\n        eventName = this.mediaStore.getState().mediaVolumeLevel === \"off\" ? MediaUIEvents.MEDIA_UNMUTE_REQUEST : MediaUIEvents.MEDIA_MUTE_REQUEST;\n        this.dispatchEvent(new globalThis.CustomEvent(eventName, {\n          composed: true,\n          bubbles: true\n        }));\n        break;\n      case \"f\":\n        eventName = this.mediaStore.getState().mediaIsFullscreen ? MediaUIEvents.MEDIA_EXIT_FULLSCREEN_REQUEST : MediaUIEvents.MEDIA_ENTER_FULLSCREEN_REQUEST;\n        this.dispatchEvent(new globalThis.CustomEvent(eventName, {\n          composed: true,\n          bubbles: true\n        }));\n        break;\n      case \"c\":\n        this.dispatchEvent(new globalThis.CustomEvent(MediaUIEvents.MEDIA_TOGGLE_SUBTITLES_REQUEST, {\n          composed: true,\n          bubbles: true\n        }));\n        break;\n      case \"ArrowLeft\":\n        {\n          const offsetValue = this.hasAttribute(Attributes.KEYBOARD_BACKWARD_SEEK_OFFSET) ? +this.getAttribute(Attributes.KEYBOARD_BACKWARD_SEEK_OFFSET) : DEFAULT_SEEK_OFFSET;\n          detail = Math.max(((_d = this.mediaStore.getState().mediaCurrentTime) != null ? _d : 0) - offsetValue, 0);\n          evt = new globalThis.CustomEvent(MediaUIEvents.MEDIA_SEEK_REQUEST, {\n            composed: true,\n            bubbles: true,\n            detail\n          });\n          this.dispatchEvent(evt);\n          break;\n        }\n      case \"ArrowRight\":\n        {\n          const offsetValue = this.hasAttribute(Attributes.KEYBOARD_FORWARD_SEEK_OFFSET) ? +this.getAttribute(Attributes.KEYBOARD_FORWARD_SEEK_OFFSET) : DEFAULT_SEEK_OFFSET;\n          detail = Math.max(((_e = this.mediaStore.getState().mediaCurrentTime) != null ? _e : 0) + offsetValue, 0);\n          evt = new globalThis.CustomEvent(MediaUIEvents.MEDIA_SEEK_REQUEST, {\n            composed: true,\n            bubbles: true,\n            detail\n          });\n          this.dispatchEvent(evt);\n          break;\n        }\n      default:\n        break;\n    }\n  }\n}\n_hotKeys = new WeakMap();\n_fullscreenElement = new WeakMap();\n_mediaStore = new WeakMap();\n_mediaStateCallback = new WeakMap();\n_mediaStoreUnsubscribe = new WeakMap();\n_mediaStateEventHandler = new WeakMap();\n_setupDefaultStore = new WeakSet();\nsetupDefaultStore_fn = function () {\n  var _a;\n  this.mediaStore = createMediaStore({\n    media: this.media,\n    fullscreenElement: this.fullscreenElement,\n    options: {\n      defaultSubtitles: this.hasAttribute(Attributes.DEFAULT_SUBTITLES),\n      defaultDuration: this.hasAttribute(Attributes.DEFAULT_DURATION) ? +this.getAttribute(Attributes.DEFAULT_DURATION) : void 0,\n      defaultStreamType: (/** @type {import('./media-store/state-mediator.js').StreamTypeValue} */\n      (_a = this.getAttribute(Attributes.DEFAULT_STREAM_TYPE)) != null ? _a : void 0),\n      liveEdgeOffset: this.hasAttribute(Attributes.LIVE_EDGE_OFFSET) ? +this.getAttribute(Attributes.LIVE_EDGE_OFFSET) : void 0,\n      seekToLiveOffset: this.hasAttribute(Attributes.SEEK_TO_LIVE_OFFSET) ? +this.getAttribute(Attributes.SEEK_TO_LIVE_OFFSET) : this.hasAttribute(Attributes.LIVE_EDGE_OFFSET) ? +this.getAttribute(Attributes.LIVE_EDGE_OFFSET) : void 0,\n      noAutoSeekToLive: this.hasAttribute(Attributes.NO_AUTO_SEEK_TO_LIVE),\n      // NOTE: This wasn't updated if it was changed later. Should it be? (CJP)\n      noVolumePref: this.hasAttribute(Attributes.NO_VOLUME_PREF),\n      noSubtitlesLangPref: this.hasAttribute(Attributes.NO_SUBTITLES_LANG_PREF)\n    }\n  });\n};\n_keyUpHandler = new WeakSet();\nkeyUpHandler_fn = function (e) {\n  const {\n    key\n  } = e;\n  if (!ButtonPressedKeys.includes(key)) {\n    this.removeEventListener(\"keyup\", __privateMethod(this, _keyUpHandler, keyUpHandler_fn));\n    return;\n  }\n  this.keyboardShortcutHandler(e);\n};\n_keyDownHandler = new WeakSet();\nkeyDownHandler_fn = function (e) {\n  const {\n    metaKey,\n    altKey,\n    key\n  } = e;\n  if (metaKey || altKey || !ButtonPressedKeys.includes(key)) {\n    this.removeEventListener(\"keyup\", __privateMethod(this, _keyUpHandler, keyUpHandler_fn));\n    return;\n  }\n  if ([\" \", \"ArrowLeft\", \"ArrowRight\"].includes(key) && !(__privateGet(this, _hotKeys).contains(`no${key.toLowerCase()}`) || key === \" \" && __privateGet(this, _hotKeys).contains(\"nospace\"))) {\n    e.preventDefault();\n  }\n  this.addEventListener(\"keyup\", __privateMethod(this, _keyUpHandler, keyUpHandler_fn), {\n    once: true\n  });\n};\nconst MEDIA_UI_ATTRIBUTE_NAMES = Object.values(MediaUIAttributes);\nconst MEDIA_UI_PROP_NAMES = Object.values(MediaUIProps);\nconst getMediaUIAttributesFrom = child => {\n  var _a, _b, _c, _d;\n  let {\n    observedAttributes\n  } = child.constructor;\n  if (!observedAttributes && ((_a = child.nodeName) == null ? void 0 : _a.includes(\"-\"))) {\n    globalThis.customElements.upgrade(child);\n    ({\n      observedAttributes\n    } = child.constructor);\n  }\n  const mediaChromeAttributesList = (_d = (_c = (_b = child == null ? void 0 : child.getAttribute) == null ? void 0 : _b.call(child, MediaStateReceiverAttributes.MEDIA_CHROME_ATTRIBUTES)) == null ? void 0 : _c.split) == null ? void 0 : _d.call(_c, /\\s+/);\n  if (!Array.isArray(observedAttributes || mediaChromeAttributesList)) return [];\n  return (observedAttributes || mediaChromeAttributesList).filter(attrName => MEDIA_UI_ATTRIBUTE_NAMES.includes(attrName));\n};\nconst hasMediaUIProps = mediaStateReceiverCandidate => {\n  var _a, _b;\n  if (((_a = mediaStateReceiverCandidate.nodeName) == null ? void 0 : _a.includes(\"-\")) && !!globalThis.customElements.get((_b = mediaStateReceiverCandidate.nodeName) == null ? void 0 : _b.toLowerCase()) && !(mediaStateReceiverCandidate instanceof globalThis.customElements.get(mediaStateReceiverCandidate.nodeName.toLowerCase()))) {\n    globalThis.customElements.upgrade(mediaStateReceiverCandidate);\n  }\n  return MEDIA_UI_PROP_NAMES.some(propName => propName in mediaStateReceiverCandidate);\n};\nconst isMediaStateReceiver = child => {\n  return hasMediaUIProps(child) || !!getMediaUIAttributesFrom(child).length;\n};\nconst serializeTuple = tuple => {\n  var _a;\n  return (_a = tuple == null ? void 0 : tuple.join) == null ? void 0 : _a.call(tuple, \":\");\n};\nconst CustomAttrSerializer = {\n  [MediaUIAttributes.MEDIA_SUBTITLES_LIST]: stringifyTextTrackList,\n  [MediaUIAttributes.MEDIA_SUBTITLES_SHOWING]: stringifyTextTrackList,\n  [MediaUIAttributes.MEDIA_SEEKABLE]: serializeTuple,\n  [MediaUIAttributes.MEDIA_BUFFERED]: tuples => tuples == null ? void 0 : tuples.map(serializeTuple).join(\" \"),\n  [MediaUIAttributes.MEDIA_PREVIEW_COORDS]: coords => coords == null ? void 0 : coords.join(\" \"),\n  [MediaUIAttributes.MEDIA_RENDITION_LIST]: stringifyRenditionList,\n  [MediaUIAttributes.MEDIA_AUDIO_TRACK_LIST]: stringifyAudioTrackList\n};\nconst setAttr = async (child, attrName, attrValue) => {\n  var _a, _b;\n  if (!child.isConnected) {\n    await delay(0);\n  }\n  if (typeof attrValue === \"boolean\" || attrValue == null) {\n    return setBooleanAttr(child, attrName, attrValue);\n  }\n  if (typeof attrValue === \"number\") {\n    return setNumericAttr(child, attrName, attrValue);\n  }\n  if (typeof attrValue === \"string\") {\n    return setStringAttr(child, attrName, attrValue);\n  }\n  if (Array.isArray(attrValue) && !attrValue.length) {\n    return child.removeAttribute(attrName);\n  }\n  const val = (_b = (_a = CustomAttrSerializer[attrName]) == null ? void 0 : _a.call(CustomAttrSerializer, attrValue)) != null ? _b : attrValue;\n  return child.setAttribute(attrName, val);\n};\nconst isMediaSlotElementDescendant = el => {\n  var _a;\n  return !!((_a = el.closest) == null ? void 0 : _a.call(el, '*[slot=\"media\"]'));\n};\nconst traverseForMediaStateReceivers = (rootNode, mediaStateReceiverCallback) => {\n  if (isMediaSlotElementDescendant(rootNode)) {\n    return;\n  }\n  const traverseForMediaStateReceiversSync = (rootNode2, mediaStateReceiverCallback2) => {\n    var _a, _b;\n    if (isMediaStateReceiver(rootNode2)) {\n      mediaStateReceiverCallback2(rootNode2);\n    }\n    const {\n      children = []\n    } = rootNode2 != null ? rootNode2 : {};\n    const shadowChildren = (_b = (_a = rootNode2 == null ? void 0 : rootNode2.shadowRoot) == null ? void 0 : _a.children) != null ? _b : [];\n    const allChildren = [...children, ...shadowChildren];\n    allChildren.forEach(child => traverseForMediaStateReceivers(child, mediaStateReceiverCallback2));\n  };\n  const name = rootNode == null ? void 0 : rootNode.nodeName.toLowerCase();\n  if (name.includes(\"-\") && !isMediaStateReceiver(rootNode)) {\n    globalThis.customElements.whenDefined(name).then(() => {\n      traverseForMediaStateReceiversSync(rootNode, mediaStateReceiverCallback);\n    });\n    return;\n  }\n  traverseForMediaStateReceiversSync(rootNode, mediaStateReceiverCallback);\n};\nconst propagateMediaState = (els, stateName, val) => {\n  els.forEach(el => {\n    if (stateName in el) {\n      el[stateName] = val;\n      return;\n    }\n    const relevantAttrs = getMediaUIAttributesFrom(el);\n    const attrName = stateName.toLowerCase();\n    if (!relevantAttrs.includes(attrName)) return;\n    setAttr(el, attrName, val);\n  });\n};\nconst monitorForMediaStateReceivers = (rootNode, registerMediaStateReceiver, unregisterMediaStateReceiver) => {\n  traverseForMediaStateReceivers(rootNode, registerMediaStateReceiver);\n  const registerMediaStateReceiverHandler = evt => {\n    var _a;\n    const el = (_a = evt == null ? void 0 : evt.composedPath()[0]) != null ? _a : evt.target;\n    registerMediaStateReceiver(el);\n  };\n  const unregisterMediaStateReceiverHandler = evt => {\n    var _a;\n    const el = (_a = evt == null ? void 0 : evt.composedPath()[0]) != null ? _a : evt.target;\n    unregisterMediaStateReceiver(el);\n  };\n  rootNode.addEventListener(MediaUIEvents.REGISTER_MEDIA_STATE_RECEIVER, registerMediaStateReceiverHandler);\n  rootNode.addEventListener(MediaUIEvents.UNREGISTER_MEDIA_STATE_RECEIVER, unregisterMediaStateReceiverHandler);\n  const mutationCallback = mutationsList => {\n    mutationsList.forEach(mutationRecord => {\n      const {\n        addedNodes = [],\n        removedNodes = [],\n        type,\n        target,\n        attributeName\n      } = mutationRecord;\n      if (type === \"childList\") {\n        Array.prototype.forEach.call(addedNodes, node => traverseForMediaStateReceivers(node, registerMediaStateReceiver));\n        Array.prototype.forEach.call(removedNodes, node => traverseForMediaStateReceivers(node, unregisterMediaStateReceiver));\n      } else if (type === \"attributes\" && attributeName === MediaStateReceiverAttributes.MEDIA_CHROME_ATTRIBUTES) {\n        if (isMediaStateReceiver(target)) {\n          registerMediaStateReceiver(target);\n        } else {\n          unregisterMediaStateReceiver(target);\n        }\n      }\n    });\n  };\n  let prevSlotted = [];\n  const slotChangeHandler = event => {\n    const slotEl = event.target;\n    if (slotEl.name === \"media\") return;\n    prevSlotted.forEach(node => traverseForMediaStateReceivers(node, unregisterMediaStateReceiver));\n    prevSlotted = [...slotEl.assignedElements({\n      flatten: true\n    })];\n    prevSlotted.forEach(node => traverseForMediaStateReceivers(node, registerMediaStateReceiver));\n  };\n  rootNode.addEventListener(\"slotchange\", slotChangeHandler);\n  const observer = new MutationObserver(mutationCallback);\n  observer.observe(rootNode, {\n    childList: true,\n    attributes: true,\n    subtree: true\n  });\n  const unsubscribe = () => {\n    traverseForMediaStateReceivers(rootNode, unregisterMediaStateReceiver);\n    rootNode.removeEventListener(\"slotchange\", slotChangeHandler);\n    observer.disconnect();\n    rootNode.removeEventListener(MediaUIEvents.REGISTER_MEDIA_STATE_RECEIVER, registerMediaStateReceiverHandler);\n    rootNode.removeEventListener(MediaUIEvents.UNREGISTER_MEDIA_STATE_RECEIVER, unregisterMediaStateReceiverHandler);\n  };\n  return unsubscribe;\n};\nif (!globalThis.customElements.get(\"media-controller\")) {\n  globalThis.customElements.define(\"media-controller\", MediaController);\n}\nvar media_controller_default = MediaController;\nexport { Attributes, MediaController, media_controller_default as default };","map":null,"metadata":{},"sourceType":"module"}