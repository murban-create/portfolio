{"ast":null,"code":"import { WebkitPresentationModes } from \"../constants.js\";\nimport { containsComposedNode } from \"./element-utils.js\";\nimport { document } from \"./server-safe-globals.js\";\nconst enterFullscreen = stateOwners => {\n  var _a;\n  const {\n    media,\n    fullscreenElement\n  } = stateOwners;\n  try {\n    const enterFullscreenKey = fullscreenElement && \"requestFullscreen\" in fullscreenElement ? \"requestFullscreen\" : fullscreenElement && \"webkitRequestFullScreen\" in fullscreenElement ? \"webkitRequestFullScreen\" : void 0;\n    if (enterFullscreenKey) {\n      const maybePromise = (_a = fullscreenElement[enterFullscreenKey]) == null ? void 0 : _a.call(fullscreenElement);\n      if (maybePromise instanceof Promise) {\n        return maybePromise.catch(() => {});\n      }\n    } else if (media == null ? void 0 : media.webkitEnterFullscreen) {\n      media.webkitEnterFullscreen();\n    } else if (media == null ? void 0 : media.requestFullscreen) {\n      media.requestFullscreen();\n    }\n  } catch (e) {\n    console.error(e);\n  }\n};\nconst exitFullscreenKey = \"exitFullscreen\" in document ? \"exitFullscreen\" : \"webkitExitFullscreen\" in document ? \"webkitExitFullscreen\" : \"webkitCancelFullScreen\" in document ? \"webkitCancelFullScreen\" : void 0;\nconst exitFullscreen = stateOwners => {\n  var _a;\n  const {\n    documentElement\n  } = stateOwners;\n  if (exitFullscreenKey) {\n    const maybePromise = (_a = documentElement == null ? void 0 : documentElement[exitFullscreenKey]) == null ? void 0 : _a.call(documentElement);\n    if (maybePromise instanceof Promise) {\n      return maybePromise.catch(() => {});\n    }\n  }\n};\nconst fullscreenElementKey = \"fullscreenElement\" in document ? \"fullscreenElement\" : \"webkitFullscreenElement\" in document ? \"webkitFullscreenElement\" : void 0;\nconst getFullscreenElement = stateOwners => {\n  const {\n    documentElement,\n    media\n  } = stateOwners;\n  const docFullscreenElement = documentElement == null ? void 0 : documentElement[fullscreenElementKey];\n  if (!docFullscreenElement && \"webkitDisplayingFullscreen\" in media && \"webkitPresentationMode\" in media && media.webkitDisplayingFullscreen && media.webkitPresentationMode === WebkitPresentationModes.FULLSCREEN) {\n    return media;\n  }\n  return docFullscreenElement;\n};\nconst isFullscreen = stateOwners => {\n  var _a;\n  const {\n    media,\n    documentElement,\n    fullscreenElement = media\n  } = stateOwners;\n  if (!media || !documentElement) return false;\n  const currentFullscreenElement = getFullscreenElement(stateOwners);\n  if (!currentFullscreenElement) return false;\n  if (currentFullscreenElement === fullscreenElement || currentFullscreenElement === media) {\n    return true;\n  }\n  if (currentFullscreenElement.localName.includes(\"-\")) {\n    let currentRoot = currentFullscreenElement.shadowRoot;\n    if (!(fullscreenElementKey in currentRoot)) {\n      return containsComposedNode(currentFullscreenElement, /** @TODO clean up type assumptions (e.g. Node) (CJP) */\n      // @ts-ignore\n      fullscreenElement);\n    }\n    while (currentRoot == null ? void 0 : currentRoot[fullscreenElementKey]) {\n      if (currentRoot[fullscreenElementKey] === fullscreenElement) return true;\n      currentRoot = (_a = currentRoot[fullscreenElementKey]) == null ? void 0 : _a.shadowRoot;\n    }\n  }\n  return false;\n};\nconst fullscreenEnabledKey = \"fullscreenEnabled\" in document ? \"fullscreenEnabled\" : \"webkitFullscreenEnabled\" in document ? \"webkitFullscreenEnabled\" : void 0;\nconst isFullscreenEnabled = stateOwners => {\n  const {\n    documentElement,\n    media\n  } = stateOwners;\n  return !!(documentElement == null ? void 0 : documentElement[fullscreenEnabledKey]) || media && \"webkitSupportsFullscreen\" in media;\n};\nexport { enterFullscreen, exitFullscreen, getFullscreenElement, isFullscreen, isFullscreenEnabled };","map":null,"metadata":{},"sourceType":"module"}