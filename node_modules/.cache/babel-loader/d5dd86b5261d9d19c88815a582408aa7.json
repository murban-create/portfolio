{"ast":null,"code":"import { MediaChromeButton } from \"./media-chrome-button.js\";\nimport { globalThis } from \"./utils/server-safe-globals.js\";\nimport { MediaUIEvents, MediaUIAttributes } from \"./constants.js\";\nimport { t } from \"./utils/i18n.js\";\nimport { getStringAttr, setStringAttr, getBooleanAttr, setBooleanAttr } from \"./utils/element-utils.js\";\nconst airplayIcon = `<svg aria-hidden=\"true\" viewBox=\"0 0 26 24\">\n  <path d=\"M22.13 3H3.87a.87.87 0 0 0-.87.87v13.26a.87.87 0 0 0 .87.87h3.4L9 16H5V5h16v11h-4l1.72 2h3.4a.87.87 0 0 0 .87-.87V3.87a.87.87 0 0 0-.86-.87Zm-8.75 11.44a.5.5 0 0 0-.76 0l-4.91 5.73a.5.5 0 0 0 .38.83h9.82a.501.501 0 0 0 .38-.83l-4.91-5.73Z\"/>\n</svg>\n`;\nfunction getSlotTemplateHTML(_attrs) {\n  return /*html*/`\n    <style>\n      :host([${MediaUIAttributes.MEDIA_IS_AIRPLAYING}]) slot[name=icon] slot:not([name=exit]) {\n        display: none !important;\n      }\n\n      ${/* Double negative, but safer if display doesn't equal 'block' */\n  \"\"}\n      :host(:not([${MediaUIAttributes.MEDIA_IS_AIRPLAYING}])) slot[name=icon] slot:not([name=enter]) {\n        display: none !important;\n      }\n\n      :host([${MediaUIAttributes.MEDIA_IS_AIRPLAYING}]) slot[name=tooltip-enter],\n      :host(:not([${MediaUIAttributes.MEDIA_IS_AIRPLAYING}])) slot[name=tooltip-exit] {\n        display: none;\n      }\n    </style>\n\n    <slot name=\"icon\">\n      <slot name=\"enter\">${airplayIcon}</slot>\n      <slot name=\"exit\">${airplayIcon}</slot>\n    </slot>\n  `;\n}\nfunction getTooltipContentHTML() {\n  return /*html*/`\n    <slot name=\"tooltip-enter\">${t(\"start airplay\")}</slot>\n    <slot name=\"tooltip-exit\">${t(\"stop airplay\")}</slot>\n  `;\n}\nconst updateAriaLabel = el => {\n  const label = el.mediaIsAirplaying ? t(\"stop airplay\") : t(\"start airplay\");\n  el.setAttribute(\"aria-label\", label);\n};\nclass MediaAirplayButton extends MediaChromeButton {\n  static get observedAttributes() {\n    return [...super.observedAttributes, MediaUIAttributes.MEDIA_IS_AIRPLAYING, MediaUIAttributes.MEDIA_AIRPLAY_UNAVAILABLE];\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    updateAriaLabel(this);\n  }\n  attributeChangedCallback(attrName, oldValue, newValue) {\n    super.attributeChangedCallback(attrName, oldValue, newValue);\n    if (attrName === MediaUIAttributes.MEDIA_IS_AIRPLAYING) {\n      updateAriaLabel(this);\n    }\n  }\n  /**\n   * Are we currently airplaying\n   */\n  get mediaIsAirplaying() {\n    return getBooleanAttr(this, MediaUIAttributes.MEDIA_IS_AIRPLAYING);\n  }\n  set mediaIsAirplaying(value) {\n    setBooleanAttr(this, MediaUIAttributes.MEDIA_IS_AIRPLAYING, value);\n  }\n  /**\n   * Airplay unavailability state\n   */\n  get mediaAirplayUnavailable() {\n    return getStringAttr(this, MediaUIAttributes.MEDIA_AIRPLAY_UNAVAILABLE);\n  }\n  set mediaAirplayUnavailable(value) {\n    setStringAttr(this, MediaUIAttributes.MEDIA_AIRPLAY_UNAVAILABLE, value);\n  }\n  handleClick() {\n    const evt = new globalThis.CustomEvent(MediaUIEvents.MEDIA_AIRPLAY_REQUEST, {\n      composed: true,\n      bubbles: true\n    });\n    this.dispatchEvent(evt);\n  }\n}\nMediaAirplayButton.getSlotTemplateHTML = getSlotTemplateHTML;\nMediaAirplayButton.getTooltipContentHTML = getTooltipContentHTML;\nif (!globalThis.customElements.get(\"media-airplay-button\")) {\n  globalThis.customElements.define(\"media-airplay-button\", MediaAirplayButton);\n}\nvar media_airplay_button_default = MediaAirplayButton;\nexport { media_airplay_button_default as default };","map":{"version":3,"names":["MediaChromeButton","globalThis","MediaUIEvents","MediaUIAttributes","t","getStringAttr","setStringAttr","getBooleanAttr","setBooleanAttr","airplayIcon","getSlotTemplateHTML","_attrs","MEDIA_IS_AIRPLAYING","getTooltipContentHTML","updateAriaLabel","el","label","mediaIsAirplaying","setAttribute","MediaAirplayButton","observedAttributes","MEDIA_AIRPLAY_UNAVAILABLE","connectedCallback","attributeChangedCallback","attrName","oldValue","newValue","value","mediaAirplayUnavailable","handleClick","evt","CustomEvent","MEDIA_AIRPLAY_REQUEST","composed","bubbles","dispatchEvent","customElements","get","define","media_airplay_button_default","default"],"sources":["/Users/monawiebkeurban/Documents/portfolio/node_modules/media-chrome/dist/media-airplay-button.js"],"sourcesContent":["import { MediaChromeButton } from \"./media-chrome-button.js\";\nimport { globalThis } from \"./utils/server-safe-globals.js\";\nimport { MediaUIEvents, MediaUIAttributes } from \"./constants.js\";\nimport { t } from \"./utils/i18n.js\";\nimport {\n  getStringAttr,\n  setStringAttr,\n  getBooleanAttr,\n  setBooleanAttr\n} from \"./utils/element-utils.js\";\nconst airplayIcon = `<svg aria-hidden=\"true\" viewBox=\"0 0 26 24\">\n  <path d=\"M22.13 3H3.87a.87.87 0 0 0-.87.87v13.26a.87.87 0 0 0 .87.87h3.4L9 16H5V5h16v11h-4l1.72 2h3.4a.87.87 0 0 0 .87-.87V3.87a.87.87 0 0 0-.86-.87Zm-8.75 11.44a.5.5 0 0 0-.76 0l-4.91 5.73a.5.5 0 0 0 .38.83h9.82a.501.501 0 0 0 .38-.83l-4.91-5.73Z\"/>\n</svg>\n`;\nfunction getSlotTemplateHTML(_attrs) {\n  return (\n    /*html*/\n    `\n    <style>\n      :host([${MediaUIAttributes.MEDIA_IS_AIRPLAYING}]) slot[name=icon] slot:not([name=exit]) {\n        display: none !important;\n      }\n\n      ${/* Double negative, but safer if display doesn't equal 'block' */\n    \"\"}\n      :host(:not([${MediaUIAttributes.MEDIA_IS_AIRPLAYING}])) slot[name=icon] slot:not([name=enter]) {\n        display: none !important;\n      }\n\n      :host([${MediaUIAttributes.MEDIA_IS_AIRPLAYING}]) slot[name=tooltip-enter],\n      :host(:not([${MediaUIAttributes.MEDIA_IS_AIRPLAYING}])) slot[name=tooltip-exit] {\n        display: none;\n      }\n    </style>\n\n    <slot name=\"icon\">\n      <slot name=\"enter\">${airplayIcon}</slot>\n      <slot name=\"exit\">${airplayIcon}</slot>\n    </slot>\n  `\n  );\n}\nfunction getTooltipContentHTML() {\n  return (\n    /*html*/\n    `\n    <slot name=\"tooltip-enter\">${t(\"start airplay\")}</slot>\n    <slot name=\"tooltip-exit\">${t(\"stop airplay\")}</slot>\n  `\n  );\n}\nconst updateAriaLabel = (el) => {\n  const label = el.mediaIsAirplaying ? t(\"stop airplay\") : t(\"start airplay\");\n  el.setAttribute(\"aria-label\", label);\n};\nclass MediaAirplayButton extends MediaChromeButton {\n  static get observedAttributes() {\n    return [\n      ...super.observedAttributes,\n      MediaUIAttributes.MEDIA_IS_AIRPLAYING,\n      MediaUIAttributes.MEDIA_AIRPLAY_UNAVAILABLE\n    ];\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    updateAriaLabel(this);\n  }\n  attributeChangedCallback(attrName, oldValue, newValue) {\n    super.attributeChangedCallback(attrName, oldValue, newValue);\n    if (attrName === MediaUIAttributes.MEDIA_IS_AIRPLAYING) {\n      updateAriaLabel(this);\n    }\n  }\n  /**\n   * Are we currently airplaying\n   */\n  get mediaIsAirplaying() {\n    return getBooleanAttr(this, MediaUIAttributes.MEDIA_IS_AIRPLAYING);\n  }\n  set mediaIsAirplaying(value) {\n    setBooleanAttr(this, MediaUIAttributes.MEDIA_IS_AIRPLAYING, value);\n  }\n  /**\n   * Airplay unavailability state\n   */\n  get mediaAirplayUnavailable() {\n    return getStringAttr(this, MediaUIAttributes.MEDIA_AIRPLAY_UNAVAILABLE);\n  }\n  set mediaAirplayUnavailable(value) {\n    setStringAttr(this, MediaUIAttributes.MEDIA_AIRPLAY_UNAVAILABLE, value);\n  }\n  handleClick() {\n    const evt = new globalThis.CustomEvent(\n      MediaUIEvents.MEDIA_AIRPLAY_REQUEST,\n      {\n        composed: true,\n        bubbles: true\n      }\n    );\n    this.dispatchEvent(evt);\n  }\n}\nMediaAirplayButton.getSlotTemplateHTML = getSlotTemplateHTML;\nMediaAirplayButton.getTooltipContentHTML = getTooltipContentHTML;\nif (!globalThis.customElements.get(\"media-airplay-button\")) {\n  globalThis.customElements.define(\"media-airplay-button\", MediaAirplayButton);\n}\nvar media_airplay_button_default = MediaAirplayButton;\nexport {\n  media_airplay_button_default as default\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}