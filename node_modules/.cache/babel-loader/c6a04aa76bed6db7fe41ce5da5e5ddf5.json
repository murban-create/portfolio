{"ast":null,"code":"var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateMethod = (obj, member, method) => {\n  __accessCheck(obj, member, \"access private method\");\n  return method;\n};\nvar _pointerDownTimeStamp, _currentMedia, _inactiveTimeout, _autohide, _mutationObserver, _handleMutation, handleMutation_fn, _isResizePending, _handleResize, _handlePointerMove, handlePointerMove_fn, _handlePointerUp, handlePointerUp_fn, _setInactive, setInactive_fn, _setActive, setActive_fn, _scheduleInactive, scheduleInactive_fn;\nimport { globalThis } from \"./utils/server-safe-globals.js\";\nimport { MediaUIAttributes, MediaStateChangeEvents } from \"./constants.js\";\nimport { observeResize, unobserveResize } from \"./utils/resize-observer.js\";\nimport \"./media-gesture-receiver.js\";\nimport { t } from \"./utils/i18n.js\";\nimport { getBooleanAttr, getStringAttr, namedNodeMapToObject, setBooleanAttr, setStringAttr } from \"./utils/element-utils.js\";\nimport MediaGestureReceiver from \"./media-gesture-receiver.js\";\nconst Attributes = {\n  AUDIO: \"audio\",\n  AUTOHIDE: \"autohide\",\n  BREAKPOINTS: \"breakpoints\",\n  GESTURES_DISABLED: \"gesturesdisabled\",\n  KEYBOARD_CONTROL: \"keyboardcontrol\",\n  NO_AUTOHIDE: \"noautohide\",\n  USER_INACTIVE: \"userinactive\",\n  AUTOHIDE_OVER_CONTROLS: \"autohideovercontrols\"\n};\nfunction getTemplateHTML(_attrs) {\n  return /*html*/`\n    <style>\n      ${\n  /*\n  * outline on media is turned off because it is allowed to get focus to faciliate hotkeys.\n  * However, on keyboard interactions, the focus outline is shown,\n  * which is particularly noticeable when going fullscreen via hotkeys.\n  */\n  \"\"}\n      :host([${MediaUIAttributes.MEDIA_IS_FULLSCREEN}]) ::slotted([slot=media]) {\n        outline: none;\n      }\n\n      :host {\n        box-sizing: border-box;\n        position: relative;\n        display: inline-block;\n        line-height: 0;\n        background-color: var(--media-background-color, #000);\n      }\n\n      :host(:not([${Attributes.AUDIO}])) [part~=layer]:not([part~=media-layer]) {\n        position: absolute;\n        top: 0;\n        left: 0;\n        bottom: 0;\n        right: 0;\n        display: flex;\n        flex-flow: column nowrap;\n        align-items: start;\n        pointer-events: none;\n        background: none;\n      }\n\n      slot[name=media] {\n        display: var(--media-slot-display, contents);\n      }\n\n      ${\n  /*\n  * when in audio mode, hide the slotted media element by default\n  */\n  \"\"}\n      :host([${Attributes.AUDIO}]) slot[name=media] {\n        display: var(--media-slot-display, none);\n      }\n\n      ${\n  /*\n  * when in audio mode, hide the gesture-layer which causes media-controller to be taller than the control bar\n  */\n  \"\"}\n      :host([${Attributes.AUDIO}]) [part~=layer][part~=gesture-layer] {\n        height: 0;\n        display: block;\n      }\n\n      ${\n  /*\n  * if gestures are disabled, don't accept pointer-events\n  */\n  \"\"}\n      :host(:not([${Attributes.AUDIO}])[${Attributes.GESTURES_DISABLED}]) ::slotted([slot=gestures-chrome]),\n          :host(:not([${Attributes.AUDIO}])[${Attributes.GESTURES_DISABLED}]) media-gesture-receiver[slot=gestures-chrome] {\n        display: none;\n      }\n\n      ${\n  /*\n  * any slotted element that isn't a poster or media slot should be pointer-events auto\n  * we'll want to add here any slotted elements that shouldn't get pointer-events by default when slotted\n  */\n  \"\"}\n      ::slotted(:not([slot=media]):not([slot=poster]):not(media-loading-indicator):not([role=dialog]):not([hidden])) {\n        pointer-events: auto;\n      }\n\n      :host(:not([${Attributes.AUDIO}])) *[part~=layer][part~=centered-layer] {\n        align-items: center;\n        justify-content: center;\n      }\n\n      :host(:not([${Attributes.AUDIO}])) ::slotted(media-gesture-receiver[slot=gestures-chrome]),\n      :host(:not([${Attributes.AUDIO}])) media-gesture-receiver[slot=gestures-chrome] {\n        align-self: stretch;\n        flex-grow: 1;\n      }\n\n      slot[name=middle-chrome] {\n        display: inline;\n        flex-grow: 1;\n        pointer-events: none;\n        background: none;\n      }\n\n      ${/* Position the media and poster elements to fill the container */\n  \"\"}\n      ::slotted([slot=media]),\n      ::slotted([slot=poster]) {\n        width: 100%;\n        height: 100%;\n      }\n\n      ${/* Video specific styles */\n  \"\"}\n      :host(:not([${Attributes.AUDIO}])) .spacer {\n        flex-grow: 1;\n      }\n\n      ${/* Safari needs this to actually make the element fill the window */\n  \"\"}\n      :host(:-webkit-full-screen) {\n        ${/* Needs to use !important otherwise easy to break */\n  \"\"}\n        width: 100% !important;\n        height: 100% !important;\n      }\n\n      ${/* Only add these if auto hide is not disabled */\n  \"\"}\n      ::slotted(:not([slot=media]):not([slot=poster]):not([${Attributes.NO_AUTOHIDE}]):not([hidden]):not([role=dialog])) {\n        opacity: 1;\n        transition: var(--media-control-transition-in, opacity 0.25s);\n      }\n\n      ${/* Hide controls when inactive, not paused, not audio and auto hide not disabled */\n  \"\"}\n      :host([${Attributes.USER_INACTIVE}]:not([${MediaUIAttributes.MEDIA_PAUSED}]):not([${MediaUIAttributes.MEDIA_IS_AIRPLAYING}]):not([${MediaUIAttributes.MEDIA_IS_CASTING}]):not([${Attributes.AUDIO}])) ::slotted(:not([slot=media]):not([slot=poster]):not([${Attributes.NO_AUTOHIDE}]):not([role=dialog])) {\n        opacity: 0;\n        transition: var(--media-control-transition-out, opacity 1s);\n      }\n\n      :host([${Attributes.USER_INACTIVE}]:not([${Attributes.NO_AUTOHIDE}]):not([${MediaUIAttributes.MEDIA_PAUSED}]):not([${MediaUIAttributes.MEDIA_IS_CASTING}]):not([${Attributes.AUDIO}])) ::slotted([slot=media]) {\n        cursor: none;\n      }\n\n      :host([${Attributes.USER_INACTIVE}][${Attributes.AUTOHIDE_OVER_CONTROLS}]:not([${Attributes.NO_AUTOHIDE}]):not([${MediaUIAttributes.MEDIA_PAUSED}]):not([${MediaUIAttributes.MEDIA_IS_CASTING}]):not([${Attributes.AUDIO}])) * {\n        --media-cursor: none;\n        cursor: none;\n      }\n\n\n      ::slotted(media-control-bar)  {\n        align-self: stretch;\n      }\n\n      ${/* ::slotted([slot=poster]) doesn't work for slot fallback content so hide parent slot instead */\n  \"\"}\n      :host(:not([${Attributes.AUDIO}])[${MediaUIAttributes.MEDIA_HAS_PLAYED}]) slot[name=poster] {\n        display: none;\n      }\n\n      ::slotted([role=dialog]) {\n        width: 100%;\n        height: 100%;\n        align-self: center;\n      }\n\n      ::slotted([role=menu]) {\n        align-self: end;\n      }\n    </style>\n\n    <slot name=\"media\" part=\"layer media-layer\"></slot>\n    <slot name=\"poster\" part=\"layer poster-layer\"></slot>\n    <slot name=\"gestures-chrome\" part=\"layer gesture-layer\">\n      <media-gesture-receiver slot=\"gestures-chrome\">\n        <template shadowrootmode=\"${MediaGestureReceiver.shadowRootOptions.mode}\">\n          ${MediaGestureReceiver.getTemplateHTML({})}\n        </template>\n      </media-gesture-receiver>\n    </slot>\n    <span part=\"layer vertical-layer\">\n      <slot name=\"top-chrome\" part=\"top chrome\"></slot>\n      <slot name=\"middle-chrome\" part=\"middle chrome\"></slot>\n      <slot name=\"centered-chrome\" part=\"layer centered-layer center centered chrome\"></slot>\n      ${/* default, effectively \"bottom-chrome\" */\n  \"\"}\n      <slot part=\"bottom chrome\"></slot>\n    </span>\n    <slot name=\"dialog\" part=\"layer dialog-layer\"></slot>\n  `;\n}\nconst MEDIA_UI_ATTRIBUTE_NAMES = Object.values(MediaUIAttributes);\nconst defaultBreakpoints = \"sm:384 md:576 lg:768 xl:960\";\nfunction resizeCallback(entry) {\n  setBreakpoints(entry.target, entry.contentRect.width);\n}\nfunction setBreakpoints(container, width) {\n  var _a;\n  if (!container.isConnected) return;\n  const breakpoints = (_a = container.getAttribute(Attributes.BREAKPOINTS)) != null ? _a : defaultBreakpoints;\n  const ranges = createBreakpointMap(breakpoints);\n  const activeBreakpoints = getBreakpoints(ranges, width);\n  let changed = false;\n  Object.keys(ranges).forEach(name => {\n    if (activeBreakpoints.includes(name)) {\n      if (!container.hasAttribute(`breakpoint${name}`)) {\n        container.setAttribute(`breakpoint${name}`, \"\");\n        changed = true;\n      }\n      return;\n    }\n    if (container.hasAttribute(`breakpoint${name}`)) {\n      container.removeAttribute(`breakpoint${name}`);\n      changed = true;\n    }\n  });\n  if (changed) {\n    const evt = new CustomEvent(MediaStateChangeEvents.BREAKPOINTS_CHANGE, {\n      detail: activeBreakpoints\n    });\n    container.dispatchEvent(evt);\n  }\n  if (!container.breakpointsComputed) {\n    container.breakpointsComputed = true;\n    container.dispatchEvent(new CustomEvent(MediaStateChangeEvents.BREAKPOINTS_COMPUTED, {\n      bubbles: true,\n      composed: true\n    }));\n  }\n}\nfunction createBreakpointMap(breakpoints) {\n  const pairs = breakpoints.split(/\\s+/);\n  return Object.fromEntries(pairs.map(pair => pair.split(\":\")));\n}\nfunction getBreakpoints(breakpoints, width) {\n  return Object.keys(breakpoints).filter(name => {\n    return width >= parseInt(breakpoints[name]);\n  });\n}\nclass MediaContainer extends globalThis.HTMLElement {\n  constructor() {\n    super();\n    __privateAdd(this, _handleMutation);\n    __privateAdd(this, _handlePointerMove);\n    __privateAdd(this, _handlePointerUp);\n    __privateAdd(this, _setInactive);\n    __privateAdd(this, _setActive);\n    __privateAdd(this, _scheduleInactive);\n    __privateAdd(this, _pointerDownTimeStamp, 0);\n    __privateAdd(this, _currentMedia, null);\n    __privateAdd(this, _inactiveTimeout, null);\n    __privateAdd(this, _autohide, void 0);\n    this.breakpointsComputed = false;\n    __privateAdd(this, _mutationObserver, new MutationObserver(__privateMethod(this, _handleMutation, handleMutation_fn).bind(this)));\n    __privateAdd(this, _isResizePending, false);\n    __privateAdd(this, _handleResize, entry => {\n      if (__privateGet(this, _isResizePending)) return;\n      setTimeout(() => {\n        resizeCallback(entry);\n        __privateSet(this, _isResizePending, false);\n      }, 0);\n      __privateSet(this, _isResizePending, true);\n    });\n    if (!this.shadowRoot) {\n      this.attachShadow(this.constructor.shadowRootOptions);\n      const attrs = namedNodeMapToObject(this.attributes);\n      const html = this.constructor.getTemplateHTML(attrs);\n      this.shadowRoot.setHTMLUnsafe ? this.shadowRoot.setHTMLUnsafe(html) : this.shadowRoot.innerHTML = html;\n    }\n    const chainedSlot = this.querySelector(\":scope > slot[slot=media]\");\n    if (chainedSlot) {\n      chainedSlot.addEventListener(\"slotchange\", () => {\n        const slotEls = chainedSlot.assignedElements({\n          flatten: true\n        });\n        if (!slotEls.length) {\n          if (__privateGet(this, _currentMedia)) {\n            this.mediaUnsetCallback(__privateGet(this, _currentMedia));\n          }\n          return;\n        }\n        this.handleMediaUpdated(this.media);\n      });\n    }\n  }\n  static get observedAttributes() {\n    return [Attributes.AUTOHIDE, Attributes.GESTURES_DISABLED].concat(MEDIA_UI_ATTRIBUTE_NAMES).filter(name => ![MediaUIAttributes.MEDIA_RENDITION_LIST, MediaUIAttributes.MEDIA_AUDIO_TRACK_LIST, MediaUIAttributes.MEDIA_CHAPTERS_CUES, MediaUIAttributes.MEDIA_WIDTH, MediaUIAttributes.MEDIA_HEIGHT, MediaUIAttributes.MEDIA_ERROR, MediaUIAttributes.MEDIA_ERROR_MESSAGE].includes(name));\n  }\n  // Could share this code with media-chrome-html-element instead\n  attributeChangedCallback(attrName, _oldValue, newValue) {\n    if (attrName.toLowerCase() == Attributes.AUTOHIDE) {\n      this.autohide = newValue;\n    }\n  }\n  // First direct child with slot=media, or null\n  get media() {\n    let media = this.querySelector(\":scope > [slot=media]\");\n    if ((media == null ? void 0 : media.nodeName) == \"SLOT\") media = media.assignedElements({\n      flatten: true\n    })[0];\n    return media;\n  }\n  async handleMediaUpdated(media) {\n    if (!media) return;\n    __privateSet(this, _currentMedia, media);\n    if (media.localName.includes(\"-\")) {\n      await globalThis.customElements.whenDefined(media.localName);\n    }\n    this.mediaSetCallback(media);\n  }\n  connectedCallback() {\n    var _a;\n    __privateGet(this, _mutationObserver).observe(this, {\n      childList: true,\n      subtree: true\n    });\n    observeResize(this, __privateGet(this, _handleResize));\n    const isAudioChrome = this.getAttribute(Attributes.AUDIO) != null;\n    const label = isAudioChrome ? t(\"audio player\") : t(\"video player\");\n    this.setAttribute(\"role\", \"region\");\n    this.setAttribute(\"aria-label\", label);\n    this.handleMediaUpdated(this.media);\n    this.setAttribute(Attributes.USER_INACTIVE, \"\");\n    setBreakpoints(this, this.getBoundingClientRect().width);\n    this.addEventListener(\"pointerdown\", this);\n    this.addEventListener(\"pointermove\", this);\n    this.addEventListener(\"pointerup\", this);\n    this.addEventListener(\"mouseleave\", this);\n    this.addEventListener(\"keyup\", this);\n    (_a = globalThis.window) == null ? void 0 : _a.addEventListener(\"mouseup\", this);\n  }\n  disconnectedCallback() {\n    var _a;\n    __privateGet(this, _mutationObserver).disconnect();\n    unobserveResize(this, __privateGet(this, _handleResize));\n    if (this.media) {\n      this.mediaUnsetCallback(this.media);\n    }\n    (_a = globalThis.window) == null ? void 0 : _a.removeEventListener(\"mouseup\", this);\n  }\n  /**\n   * @abstract\n   */\n  mediaSetCallback(_media) {}\n  mediaUnsetCallback(_media) {\n    __privateSet(this, _currentMedia, null);\n  }\n  handleEvent(event) {\n    switch (event.type) {\n      case \"pointerdown\":\n        __privateSet(this, _pointerDownTimeStamp, event.timeStamp);\n        break;\n      case \"pointermove\":\n        __privateMethod(this, _handlePointerMove, handlePointerMove_fn).call(this, event);\n        break;\n      case \"pointerup\":\n        __privateMethod(this, _handlePointerUp, handlePointerUp_fn).call(this, event);\n        break;\n      case \"mouseleave\":\n        __privateMethod(this, _setInactive, setInactive_fn).call(this);\n        break;\n      case \"mouseup\":\n        this.removeAttribute(Attributes.KEYBOARD_CONTROL);\n        break;\n      case \"keyup\":\n        __privateMethod(this, _scheduleInactive, scheduleInactive_fn).call(this);\n        this.setAttribute(Attributes.KEYBOARD_CONTROL, \"\");\n        break;\n    }\n  }\n  set autohide(seconds) {\n    const parsedSeconds = Number(seconds);\n    __privateSet(this, _autohide, isNaN(parsedSeconds) ? 0 : parsedSeconds);\n  }\n  get autohide() {\n    return (__privateGet(this, _autohide) === void 0 ? 2 : __privateGet(this, _autohide)).toString();\n  }\n  get breakpoints() {\n    return getStringAttr(this, Attributes.BREAKPOINTS);\n  }\n  set breakpoints(value) {\n    setStringAttr(this, Attributes.BREAKPOINTS, value);\n  }\n  get audio() {\n    return getBooleanAttr(this, Attributes.AUDIO);\n  }\n  set audio(value) {\n    setBooleanAttr(this, Attributes.AUDIO, value);\n  }\n  get gesturesDisabled() {\n    return getBooleanAttr(this, Attributes.GESTURES_DISABLED);\n  }\n  set gesturesDisabled(value) {\n    setBooleanAttr(this, Attributes.GESTURES_DISABLED, value);\n  }\n  get keyboardControl() {\n    return getBooleanAttr(this, Attributes.KEYBOARD_CONTROL);\n  }\n  set keyboardControl(value) {\n    setBooleanAttr(this, Attributes.KEYBOARD_CONTROL, value);\n  }\n  get noAutohide() {\n    return getBooleanAttr(this, Attributes.NO_AUTOHIDE);\n  }\n  set noAutohide(value) {\n    setBooleanAttr(this, Attributes.NO_AUTOHIDE, value);\n  }\n  get autohideOverControls() {\n    return getBooleanAttr(this, Attributes.AUTOHIDE_OVER_CONTROLS);\n  }\n  set autohideOverControls(value) {\n    setBooleanAttr(this, Attributes.AUTOHIDE_OVER_CONTROLS, value);\n  }\n  get userInteractive() {\n    return getBooleanAttr(this, Attributes.USER_INACTIVE);\n  }\n  set userInteractive(value) {\n    setBooleanAttr(this, Attributes.USER_INACTIVE, value);\n  }\n}\n_pointerDownTimeStamp = new WeakMap();\n_currentMedia = new WeakMap();\n_inactiveTimeout = new WeakMap();\n_autohide = new WeakMap();\n_mutationObserver = new WeakMap();\n_handleMutation = new WeakSet();\nhandleMutation_fn = function (mutationsList) {\n  const media = this.media;\n  for (const mutation of mutationsList) {\n    if (mutation.type !== \"childList\") continue;\n    const removedNodes = mutation.removedNodes;\n    for (const node of removedNodes) {\n      if (node.slot != \"media\" || mutation.target != this) continue;\n      let previousSibling = mutation.previousSibling && mutation.previousSibling.previousElementSibling;\n      if (!previousSibling || !media) {\n        this.mediaUnsetCallback(node);\n      } else {\n        let wasFirst = previousSibling.slot !== \"media\";\n        while ((previousSibling = previousSibling.previousSibling) !== null) {\n          if (previousSibling.slot == \"media\") wasFirst = false;\n        }\n        if (wasFirst) this.mediaUnsetCallback(node);\n      }\n    }\n    if (media) {\n      for (const node of mutation.addedNodes) {\n        if (node === media) this.handleMediaUpdated(media);\n      }\n    }\n  }\n};\n_isResizePending = new WeakMap();\n_handleResize = new WeakMap();\n_handlePointerMove = new WeakSet();\nhandlePointerMove_fn = function (event) {\n  if (event.pointerType !== \"mouse\") {\n    const MAX_TAP_DURATION = 250;\n    if (event.timeStamp - __privateGet(this, _pointerDownTimeStamp) < MAX_TAP_DURATION) return;\n  }\n  __privateMethod(this, _setActive, setActive_fn).call(this);\n  clearTimeout(__privateGet(this, _inactiveTimeout));\n  const autohideOverControls = this.hasAttribute(Attributes.AUTOHIDE_OVER_CONTROLS);\n  if ([this, this.media].includes(event.target) || autohideOverControls) {\n    __privateMethod(this, _scheduleInactive, scheduleInactive_fn).call(this);\n  }\n};\n_handlePointerUp = new WeakSet();\nhandlePointerUp_fn = function (event) {\n  if (event.pointerType === \"touch\") {\n    const controlsVisible = !this.hasAttribute(Attributes.USER_INACTIVE);\n    if ([this, this.media].includes(event.target) && controlsVisible) {\n      __privateMethod(this, _setInactive, setInactive_fn).call(this);\n    } else {\n      __privateMethod(this, _scheduleInactive, scheduleInactive_fn).call(this);\n    }\n  } else if (event.composedPath().some(el => [\"media-play-button\", \"media-fullscreen-button\"].includes(el == null ? void 0 : el.localName))) {\n    __privateMethod(this, _scheduleInactive, scheduleInactive_fn).call(this);\n  }\n};\n_setInactive = new WeakSet();\nsetInactive_fn = function () {\n  if (__privateGet(this, _autohide) < 0) return;\n  if (this.hasAttribute(Attributes.USER_INACTIVE)) return;\n  this.setAttribute(Attributes.USER_INACTIVE, \"\");\n  const evt = new globalThis.CustomEvent(MediaStateChangeEvents.USER_INACTIVE_CHANGE, {\n    composed: true,\n    bubbles: true,\n    detail: true\n  });\n  this.dispatchEvent(evt);\n};\n_setActive = new WeakSet();\nsetActive_fn = function () {\n  if (!this.hasAttribute(Attributes.USER_INACTIVE)) return;\n  this.removeAttribute(Attributes.USER_INACTIVE);\n  const evt = new globalThis.CustomEvent(MediaStateChangeEvents.USER_INACTIVE_CHANGE, {\n    composed: true,\n    bubbles: true,\n    detail: false\n  });\n  this.dispatchEvent(evt);\n};\n_scheduleInactive = new WeakSet();\nscheduleInactive_fn = function () {\n  __privateMethod(this, _setActive, setActive_fn).call(this);\n  clearTimeout(__privateGet(this, _inactiveTimeout));\n  const autohide = parseInt(this.autohide);\n  if (autohide < 0) return;\n  __privateSet(this, _inactiveTimeout, setTimeout(() => {\n    __privateMethod(this, _setInactive, setInactive_fn).call(this);\n  }, autohide * 1e3));\n};\nMediaContainer.shadowRootOptions = {\n  mode: \"open\"\n};\nMediaContainer.getTemplateHTML = getTemplateHTML;\nif (!globalThis.customElements.get(\"media-container\")) {\n  globalThis.customElements.define(\"media-container\", MediaContainer);\n}\nvar media_container_default = MediaContainer;\nexport { Attributes, MediaContainer, media_container_default as default };","map":null,"metadata":{},"sourceType":"module"}