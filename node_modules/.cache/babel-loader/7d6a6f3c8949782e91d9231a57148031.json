{"ast":null,"code":"import { isValidNumber } from \"./utils.js\";\nconst UnitLabels = [{\n  singular: \"hour\",\n  plural: \"hours\"\n}, {\n  singular: \"minute\",\n  plural: \"minutes\"\n}, {\n  singular: \"second\",\n  plural: \"seconds\"\n}];\nconst toTimeUnitPhrase = (timeUnitValue, unitIndex) => {\n  const unitLabel = timeUnitValue === 1 ? UnitLabels[unitIndex].singular : UnitLabels[unitIndex].plural;\n  return `${timeUnitValue} ${unitLabel}`;\n};\nconst formatAsTimePhrase = seconds => {\n  if (!isValidNumber(seconds)) return \"\";\n  const positiveSeconds = Math.abs(seconds);\n  const negative = positiveSeconds !== seconds;\n  const secondsDateTime = new Date(0, 0, 0, 0, 0, positiveSeconds, 0);\n  const timeParts = [secondsDateTime.getHours(), secondsDateTime.getMinutes(), secondsDateTime.getSeconds()];\n  const timeString = timeParts.map((timeUnitValue, index) => timeUnitValue && toTimeUnitPhrase(timeUnitValue, index)).filter(x => x).join(\", \");\n  const negativeSuffix = negative ? \" remaining\" : \"\";\n  return `${timeString}${negativeSuffix}`;\n};\nfunction formatTime(seconds, guide) {\n  let negative = false;\n  if (seconds < 0) {\n    negative = true;\n    seconds = 0 - seconds;\n  }\n  seconds = seconds < 0 ? 0 : seconds;\n  let s = Math.floor(seconds % 60);\n  let m = Math.floor(seconds / 60 % 60);\n  let h = Math.floor(seconds / 3600);\n  const gm = Math.floor(guide / 60 % 60);\n  const gh = Math.floor(guide / 3600);\n  if (isNaN(seconds) || seconds === Infinity) {\n    h = m = s = \"0\";\n  }\n  h = h > 0 || gh > 0 ? h + \":\" : \"\";\n  m = ((h || gm >= 10) && m < 10 ? \"0\" + m : m) + \":\";\n  s = s < 10 ? \"0\" + s : s;\n  return (negative ? \"-\" : \"\") + h + m + s;\n}\nconst emptyTimeRanges = Object.freeze({\n  length: 0,\n  start(index) {\n    const unsignedIdx = index >>> 0;\n    if (unsignedIdx >= this.length) {\n      throw new DOMException(`Failed to execute 'start' on 'TimeRanges': The index provided (${unsignedIdx}) is greater than or equal to the maximum bound (${this.length}).`);\n    }\n    return 0;\n  },\n  end(index) {\n    const unsignedIdx = index >>> 0;\n    if (unsignedIdx >= this.length) {\n      throw new DOMException(`Failed to execute 'end' on 'TimeRanges': The index provided (${unsignedIdx}) is greater than or equal to the maximum bound (${this.length}).`);\n    }\n    return 0;\n  }\n});\nfunction serializeTimeRanges() {\n  let timeRanges = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : emptyTimeRanges;\n  return Array.from(timeRanges).map((_, i) => [Number(timeRanges.start(i).toFixed(3)), Number(timeRanges.end(i).toFixed(3))].join(\":\")).join(\" \");\n}\nexport { emptyTimeRanges, formatAsTimePhrase, formatTime, serializeTimeRanges };","map":{"version":3,"names":["isValidNumber","UnitLabels","singular","plural","toTimeUnitPhrase","timeUnitValue","unitIndex","unitLabel","formatAsTimePhrase","seconds","positiveSeconds","Math","abs","negative","secondsDateTime","Date","timeParts","getHours","getMinutes","getSeconds","timeString","map","index","filter","x","join","negativeSuffix","formatTime","guide","s","floor","m","h","gm","gh","isNaN","Infinity","emptyTimeRanges","Object","freeze","length","start","unsignedIdx","DOMException","end","serializeTimeRanges","timeRanges","arguments","undefined","Array","from","_","i","Number","toFixed"],"sources":["/Users/monawiebkeurban/Documents/portfolio/node_modules/media-chrome/dist/utils/time.js"],"sourcesContent":["import { isValidNumber } from \"./utils.js\";\nconst UnitLabels = [\n  {\n    singular: \"hour\",\n    plural: \"hours\"\n  },\n  {\n    singular: \"minute\",\n    plural: \"minutes\"\n  },\n  {\n    singular: \"second\",\n    plural: \"seconds\"\n  }\n];\nconst toTimeUnitPhrase = (timeUnitValue, unitIndex) => {\n  const unitLabel = timeUnitValue === 1 ? UnitLabels[unitIndex].singular : UnitLabels[unitIndex].plural;\n  return `${timeUnitValue} ${unitLabel}`;\n};\nconst formatAsTimePhrase = (seconds) => {\n  if (!isValidNumber(seconds))\n    return \"\";\n  const positiveSeconds = Math.abs(seconds);\n  const negative = positiveSeconds !== seconds;\n  const secondsDateTime = new Date(0, 0, 0, 0, 0, positiveSeconds, 0);\n  const timeParts = [\n    secondsDateTime.getHours(),\n    secondsDateTime.getMinutes(),\n    secondsDateTime.getSeconds()\n  ];\n  const timeString = timeParts.map(\n    (timeUnitValue, index) => timeUnitValue && toTimeUnitPhrase(timeUnitValue, index)\n  ).filter((x) => x).join(\", \");\n  const negativeSuffix = negative ? \" remaining\" : \"\";\n  return `${timeString}${negativeSuffix}`;\n};\nfunction formatTime(seconds, guide) {\n  let negative = false;\n  if (seconds < 0) {\n    negative = true;\n    seconds = 0 - seconds;\n  }\n  seconds = seconds < 0 ? 0 : seconds;\n  let s = Math.floor(seconds % 60);\n  let m = Math.floor(seconds / 60 % 60);\n  let h = Math.floor(seconds / 3600);\n  const gm = Math.floor(guide / 60 % 60);\n  const gh = Math.floor(guide / 3600);\n  if (isNaN(seconds) || seconds === Infinity) {\n    h = m = s = \"0\";\n  }\n  h = h > 0 || gh > 0 ? h + \":\" : \"\";\n  m = ((h || gm >= 10) && m < 10 ? \"0\" + m : m) + \":\";\n  s = s < 10 ? \"0\" + s : s;\n  return (negative ? \"-\" : \"\") + h + m + s;\n}\nconst emptyTimeRanges = Object.freeze({\n  length: 0,\n  start(index) {\n    const unsignedIdx = index >>> 0;\n    if (unsignedIdx >= this.length) {\n      throw new DOMException(\n        `Failed to execute 'start' on 'TimeRanges': The index provided (${unsignedIdx}) is greater than or equal to the maximum bound (${this.length}).`\n      );\n    }\n    return 0;\n  },\n  end(index) {\n    const unsignedIdx = index >>> 0;\n    if (unsignedIdx >= this.length) {\n      throw new DOMException(\n        `Failed to execute 'end' on 'TimeRanges': The index provided (${unsignedIdx}) is greater than or equal to the maximum bound (${this.length}).`\n      );\n    }\n    return 0;\n  }\n});\nfunction serializeTimeRanges(timeRanges = emptyTimeRanges) {\n  return Array.from(timeRanges).map(\n    (_, i) => [\n      Number(timeRanges.start(i).toFixed(3)),\n      Number(timeRanges.end(i).toFixed(3))\n    ].join(\":\")\n  ).join(\" \");\n}\nexport {\n  emptyTimeRanges,\n  formatAsTimePhrase,\n  formatTime,\n  serializeTimeRanges\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}