{"ast":null,"code":"var __accessCheck = (obj, member, msg) => {\n  if (!member.has(obj)) throw TypeError(\"Cannot \" + msg);\n};\nvar __privateGet = (obj, member, getter) => {\n  __accessCheck(obj, member, \"read from private field\");\n  return getter ? getter.call(obj) : member.get(obj);\n};\nvar __privateAdd = (obj, member, value) => {\n  if (member.has(obj)) throw TypeError(\"Cannot add the same private member more than once\");\n  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\n};\nvar __privateSet = (obj, member, value, setter) => {\n  __accessCheck(obj, member, \"write to private field\");\n  setter ? setter.call(obj, value) : member.set(obj, value);\n  return value;\n};\nvar __privateWrapper = (obj, member, setter, getter) => ({\n  set _(value) {\n    __privateSet(obj, member, value, setter);\n  },\n  get _() {\n    return __privateGet(obj, member, getter);\n  }\n});\nvar _range, _startTime, _previousTime, _deltaTime, _frameCount, _updateTimestamp, _updateStartValue, _lastRangeIncrease, _id, _animate;\nclass RangeAnimation {\n  constructor(range, callback, fps) {\n    var _this = this;\n    __privateAdd(this, _range, void 0);\n    __privateAdd(this, _startTime, void 0);\n    __privateAdd(this, _previousTime, void 0);\n    __privateAdd(this, _deltaTime, void 0);\n    __privateAdd(this, _frameCount, void 0);\n    __privateAdd(this, _updateTimestamp, void 0);\n    __privateAdd(this, _updateStartValue, void 0);\n    __privateAdd(this, _lastRangeIncrease, void 0);\n    __privateAdd(this, _id, 0);\n    __privateAdd(this, _animate, function () {\n      let now = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : performance.now();\n      __privateSet(_this, _id, requestAnimationFrame(__privateGet(_this, _animate)));\n      __privateSet(_this, _deltaTime, performance.now() - __privateGet(_this, _previousTime));\n      const fpsInterval = 1e3 / _this.fps;\n      if (__privateGet(_this, _deltaTime) > fpsInterval) {\n        __privateSet(_this, _previousTime, now - __privateGet(_this, _deltaTime) % fpsInterval);\n        const fps = 1e3 / ((now - __privateGet(_this, _startTime)) / ++__privateWrapper(_this, _frameCount)._);\n        const delta = (now - __privateGet(_this, _updateTimestamp)) / 1e3 / _this.duration;\n        let value = __privateGet(_this, _updateStartValue) + delta * _this.playbackRate;\n        const increase = value - __privateGet(_this, _range).valueAsNumber;\n        if (increase > 0) {\n          __privateSet(_this, _lastRangeIncrease, _this.playbackRate / _this.duration / fps);\n        } else {\n          __privateSet(_this, _lastRangeIncrease, 0.995 * __privateGet(_this, _lastRangeIncrease));\n          value = __privateGet(_this, _range).valueAsNumber + __privateGet(_this, _lastRangeIncrease);\n        }\n        _this.callback(value);\n      }\n    });\n    __privateSet(this, _range, range);\n    this.callback = callback;\n    this.fps = fps;\n  }\n  start() {\n    if (__privateGet(this, _id) !== 0) return;\n    __privateSet(this, _previousTime, performance.now());\n    __privateSet(this, _startTime, __privateGet(this, _previousTime));\n    __privateSet(this, _frameCount, 0);\n    __privateGet(this, _animate).call(this);\n  }\n  stop() {\n    if (__privateGet(this, _id) === 0) return;\n    cancelAnimationFrame(__privateGet(this, _id));\n    __privateSet(this, _id, 0);\n  }\n  update(_ref) {\n    let {\n      start,\n      duration,\n      playbackRate\n    } = _ref;\n    const increase = start - __privateGet(this, _range).valueAsNumber;\n    const durationDelta = Math.abs(duration - this.duration);\n    if (increase > 0 || increase < -0.03 || durationDelta >= 0.5) {\n      this.callback(start);\n    }\n    __privateSet(this, _updateStartValue, start);\n    __privateSet(this, _updateTimestamp, performance.now());\n    this.duration = duration;\n    this.playbackRate = playbackRate;\n  }\n}\n_range = new WeakMap();\n_startTime = new WeakMap();\n_previousTime = new WeakMap();\n_deltaTime = new WeakMap();\n_frameCount = new WeakMap();\n_updateTimestamp = new WeakMap();\n_updateStartValue = new WeakMap();\n_lastRangeIncrease = new WeakMap();\n_id = new WeakMap();\n_animate = new WeakMap();\nexport { RangeAnimation };","map":null,"metadata":{},"sourceType":"module"}