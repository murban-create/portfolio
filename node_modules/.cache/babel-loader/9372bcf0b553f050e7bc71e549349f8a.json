{"ast":null,"code":"import { TextTrackKinds, TextTrackModes } from \"../constants.js\";\nimport { getTextTracksList, updateTracksModeTo } from \"../utils/captions.js\";\nconst getSubtitleTracks = stateOwners => {\n  return getTextTracksList(stateOwners.media, textTrack => {\n    return [TextTrackKinds.SUBTITLES, TextTrackKinds.CAPTIONS].includes(textTrack.kind);\n  }).sort((a, b) => a.kind >= b.kind ? 1 : -1);\n};\nconst getShowingSubtitleTracks = stateOwners => {\n  return getTextTracksList(stateOwners.media, textTrack => {\n    return textTrack.mode === TextTrackModes.SHOWING && [TextTrackKinds.SUBTITLES, TextTrackKinds.CAPTIONS].includes(textTrack.kind);\n  });\n};\nconst toggleSubtitleTracks = (stateOwners, force) => {\n  const tracks = getSubtitleTracks(stateOwners);\n  const showingSubitleTracks = getShowingSubtitleTracks(stateOwners);\n  const subtitlesShowing = !!showingSubitleTracks.length;\n  if (!tracks.length) return;\n  if (force === false || subtitlesShowing && force !== true) {\n    updateTracksModeTo(TextTrackModes.DISABLED, tracks, showingSubitleTracks);\n  } else if (force === true || !subtitlesShowing && force !== false) {\n    let subTrack = tracks[0];\n    const {\n      options\n    } = stateOwners;\n    if (!(options == null ? void 0 : options.noSubtitlesLangPref)) {\n      const subtitlesPref = globalThis.localStorage.getItem(\"media-chrome-pref-subtitles-lang\");\n      const userLangPrefs = subtitlesPref ? [subtitlesPref, ...globalThis.navigator.languages] : globalThis.navigator.languages;\n      const preferredAvailableSubs = tracks.filter(textTrack => {\n        return userLangPrefs.some(lang => textTrack.language.toLowerCase().startsWith(lang.split(\"-\")[0]));\n      }).sort((textTrackA, textTrackB) => {\n        const idxA = userLangPrefs.findIndex(lang => textTrackA.language.toLowerCase().startsWith(lang.split(\"-\")[0]));\n        const idxB = userLangPrefs.findIndex(lang => textTrackB.language.toLowerCase().startsWith(lang.split(\"-\")[0]));\n        return idxA - idxB;\n      });\n      if (preferredAvailableSubs[0]) {\n        subTrack = preferredAvailableSubs[0];\n      }\n    }\n    const {\n      language,\n      label,\n      kind\n    } = subTrack;\n    updateTracksModeTo(TextTrackModes.DISABLED, tracks, showingSubitleTracks);\n    updateTracksModeTo(TextTrackModes.SHOWING, tracks, [{\n      language,\n      label,\n      kind\n    }]);\n  }\n};\nconst areValuesEq = (x, y) => {\n  if (x === y) return true;\n  if (x == null || y == null) return false;\n  if (typeof x !== typeof y) return false;\n  if (typeof x === \"number\" && Number.isNaN(x) && Number.isNaN(y)) return true;\n  if (typeof x !== \"object\") return false;\n  if (Array.isArray(x)) return areArraysEq(x, y);\n  return Object.entries(x).every(\n  // NOTE: Checking key in y to disambiguate between between missing keys and keys whose value are undefined (CJP)\n  _ref => {\n    let [key, value] = _ref;\n    return key in y && areValuesEq(value, y[key]);\n  });\n};\nconst areArraysEq = (xs, ys) => {\n  const xIsArray = Array.isArray(xs);\n  const yIsArray = Array.isArray(ys);\n  if (xIsArray !== yIsArray) return false;\n  if (!(xIsArray || yIsArray)) return true;\n  if (xs.length !== ys.length) return false;\n  return xs.every((x, i) => areValuesEq(x, ys[i]));\n};\nexport { areArraysEq, areValuesEq, getShowingSubtitleTracks, getSubtitleTracks, toggleSubtitleTracks };","map":{"version":3,"names":["TextTrackKinds","TextTrackModes","getTextTracksList","updateTracksModeTo","getSubtitleTracks","stateOwners","media","textTrack","SUBTITLES","CAPTIONS","includes","kind","sort","a","b","getShowingSubtitleTracks","mode","SHOWING","toggleSubtitleTracks","force","tracks","showingSubitleTracks","subtitlesShowing","length","DISABLED","subTrack","options","noSubtitlesLangPref","subtitlesPref","globalThis","localStorage","getItem","userLangPrefs","navigator","languages","preferredAvailableSubs","filter","some","lang","language","toLowerCase","startsWith","split","textTrackA","textTrackB","idxA","findIndex","idxB","label","areValuesEq","x","y","Number","isNaN","Array","isArray","areArraysEq","Object","entries","every","_ref","key","value","xs","ys","xIsArray","yIsArray","i"],"sources":["/Users/monawiebkeurban/Documents/portfolio/node_modules/media-chrome/dist/media-store/util.js"],"sourcesContent":["import { TextTrackKinds, TextTrackModes } from \"../constants.js\";\nimport { getTextTracksList, updateTracksModeTo } from \"../utils/captions.js\";\nconst getSubtitleTracks = (stateOwners) => {\n  return getTextTracksList(stateOwners.media, (textTrack) => {\n    return [TextTrackKinds.SUBTITLES, TextTrackKinds.CAPTIONS].includes(\n      textTrack.kind\n    );\n  }).sort((a, b) => a.kind >= b.kind ? 1 : -1);\n};\nconst getShowingSubtitleTracks = (stateOwners) => {\n  return getTextTracksList(stateOwners.media, (textTrack) => {\n    return textTrack.mode === TextTrackModes.SHOWING && [TextTrackKinds.SUBTITLES, TextTrackKinds.CAPTIONS].includes(\n      textTrack.kind\n    );\n  });\n};\nconst toggleSubtitleTracks = (stateOwners, force) => {\n  const tracks = getSubtitleTracks(stateOwners);\n  const showingSubitleTracks = getShowingSubtitleTracks(stateOwners);\n  const subtitlesShowing = !!showingSubitleTracks.length;\n  if (!tracks.length)\n    return;\n  if (force === false || subtitlesShowing && force !== true) {\n    updateTracksModeTo(TextTrackModes.DISABLED, tracks, showingSubitleTracks);\n  } else if (force === true || !subtitlesShowing && force !== false) {\n    let subTrack = tracks[0];\n    const { options } = stateOwners;\n    if (!(options == null ? void 0 : options.noSubtitlesLangPref)) {\n      const subtitlesPref = globalThis.localStorage.getItem(\n        \"media-chrome-pref-subtitles-lang\"\n      );\n      const userLangPrefs = subtitlesPref ? [subtitlesPref, ...globalThis.navigator.languages] : globalThis.navigator.languages;\n      const preferredAvailableSubs = tracks.filter((textTrack) => {\n        return userLangPrefs.some(\n          (lang) => textTrack.language.toLowerCase().startsWith(lang.split(\"-\")[0])\n        );\n      }).sort((textTrackA, textTrackB) => {\n        const idxA = userLangPrefs.findIndex(\n          (lang) => textTrackA.language.toLowerCase().startsWith(lang.split(\"-\")[0])\n        );\n        const idxB = userLangPrefs.findIndex(\n          (lang) => textTrackB.language.toLowerCase().startsWith(lang.split(\"-\")[0])\n        );\n        return idxA - idxB;\n      });\n      if (preferredAvailableSubs[0]) {\n        subTrack = preferredAvailableSubs[0];\n      }\n    }\n    const { language, label, kind } = subTrack;\n    updateTracksModeTo(TextTrackModes.DISABLED, tracks, showingSubitleTracks);\n    updateTracksModeTo(TextTrackModes.SHOWING, tracks, [\n      { language, label, kind }\n    ]);\n  }\n};\nconst areValuesEq = (x, y) => {\n  if (x === y)\n    return true;\n  if (x == null || y == null)\n    return false;\n  if (typeof x !== typeof y)\n    return false;\n  if (typeof x === \"number\" && Number.isNaN(x) && Number.isNaN(y))\n    return true;\n  if (typeof x !== \"object\")\n    return false;\n  if (Array.isArray(x))\n    return areArraysEq(x, y);\n  return Object.entries(x).every(\n    // NOTE: Checking key in y to disambiguate between between missing keys and keys whose value are undefined (CJP)\n    ([key, value]) => key in y && areValuesEq(value, y[key])\n  );\n};\nconst areArraysEq = (xs, ys) => {\n  const xIsArray = Array.isArray(xs);\n  const yIsArray = Array.isArray(ys);\n  if (xIsArray !== yIsArray)\n    return false;\n  if (!(xIsArray || yIsArray))\n    return true;\n  if (xs.length !== ys.length)\n    return false;\n  return xs.every((x, i) => areValuesEq(x, ys[i]));\n};\nexport {\n  areArraysEq,\n  areValuesEq,\n  getShowingSubtitleTracks,\n  getSubtitleTracks,\n  toggleSubtitleTracks\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}