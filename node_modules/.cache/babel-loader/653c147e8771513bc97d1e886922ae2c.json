{"ast":null,"code":"function stringifyRenditionList(renditions) {\n  return renditions == null ? void 0 : renditions.map(stringifyRendition).join(\" \");\n}\nfunction parseRenditionList(renditions) {\n  return renditions == null ? void 0 : renditions.split(/\\s+/).map(parseRendition);\n}\nfunction stringifyRendition(rendition) {\n  if (rendition) {\n    const {\n      id,\n      width,\n      height\n    } = rendition;\n    return [id, width, height].filter(a => a != null).join(\":\");\n  }\n}\nfunction parseRendition(rendition) {\n  if (rendition) {\n    const [id, width, height] = rendition.split(\":\");\n    return {\n      id,\n      width: +width,\n      height: +height\n    };\n  }\n}\nfunction stringifyAudioTrackList(audioTracks) {\n  return audioTracks == null ? void 0 : audioTracks.map(stringifyAudioTrack).join(\" \");\n}\nfunction parseAudioTrackList(audioTracks) {\n  return audioTracks == null ? void 0 : audioTracks.split(/\\s+/).map(parseAudioTrack);\n}\nfunction stringifyAudioTrack(audioTrack) {\n  if (audioTrack) {\n    const {\n      id,\n      kind,\n      language,\n      label\n    } = audioTrack;\n    return [id, kind, language, label].filter(a => a != null).join(\":\");\n  }\n}\nfunction parseAudioTrack(audioTrack) {\n  if (audioTrack) {\n    const [id, kind, language, label] = audioTrack.split(\":\");\n    return {\n      id,\n      kind,\n      language,\n      label\n    };\n  }\n}\nfunction dashedToCamel(word) {\n  return word.split(\"-\").map(function (x, i) {\n    return (i ? x[0].toUpperCase() : x[0].toLowerCase()) + x.slice(1).toLowerCase();\n  }).join(\"\");\n}\nfunction constToCamel(word) {\n  let upperFirst = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return word.split(\"_\").map(function (x, i) {\n    return (i || upperFirst ? x[0].toUpperCase() : x[0].toLowerCase()) + x.slice(1).toLowerCase();\n  }).join(\"\");\n}\nfunction camelCase(name) {\n  return name.replace(/[-_]([a-z])/g, ($0, $1) => $1.toUpperCase());\n}\nfunction isValidNumber(x) {\n  return typeof x === \"number\" && !Number.isNaN(x) && Number.isFinite(x);\n}\nfunction isNumericString(str) {\n  if (typeof str != \"string\") return false;\n  return !isNaN(str) && !isNaN(parseFloat(str));\n}\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\nconst capitalize = str => str && str[0].toUpperCase() + str.slice(1);\nexport { camelCase, capitalize, constToCamel, dashedToCamel, delay, isNumericString, isValidNumber, parseAudioTrack, parseAudioTrackList, parseRendition, parseRenditionList, stringifyAudioTrack, stringifyAudioTrackList, stringifyRendition, stringifyRenditionList };","map":null,"metadata":{},"sourceType":"module"}